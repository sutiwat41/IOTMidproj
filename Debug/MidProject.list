
MidProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08007740  08007740  00017740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a20  08007a20  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a28  08007a28  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001dc  08007c0c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08007c0c  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffd1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020a3  00000000  00000000  000301dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001068  00000000  00000000  00032280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  000332e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001722e  00000000  00000000  00034270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd77  00000000  00000000  0004b49e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000912b9  00000000  00000000  00057215  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e84ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  000e854c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007728 	.word	0x08007728

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007728 	.word	0x08007728

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <HX711_Init>:
#include "hx711.h"

void HX711_Init(HX711 data)
{
 8000f58:	b084      	sub	sp, #16
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	f107 0c20 	add.w	ip, r7, #32
 8000f64:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = data.pinSck;
 8000f68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f6a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioSck, &GPIO_InitStruct);
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	1d3a      	adds	r2, r7, #4
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fade 	bl	8002540 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = data.pinData;
 8000f84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000f86:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioData, &GPIO_InitStruct);
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	1d3a      	adds	r2, r7, #4
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fad0 	bl	8002540 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 fc64 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000fac:	2032      	movs	r0, #50	; 0x32
 8000fae:	f001 f993 	bl	80022d8 <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioData, data.pinSck, GPIO_PIN_RESET);
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fc5b 	bl	8002874 <HAL_GPIO_WritePin>

}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fc8:	b004      	add	sp, #16
 8000fca:	4770      	bx	lr

08000fcc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f023 030f 	bic.w	r3, r3, #15
 8000fdc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 030c 	orr.w	r3, r3, #12
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	f043 030c 	orr.w	r3, r3, #12
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	b2db      	uxtb	r3, r3
 800100a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800100c:	f107 0208 	add.w	r2, r7, #8
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2304      	movs	r3, #4
 8001016:	214e      	movs	r1, #78	; 0x4e
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <lcd_send_cmd+0x5c>)
 800101a:	f001 fd7d 	bl	8002b18 <HAL_I2C_Master_Transmit>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000022c 	.word	0x2000022c

0800102c <lcd_send_data>:

void lcd_send_data (char data)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f043 030d 	orr.w	r3, r3, #13
 800104a:	b2db      	uxtb	r3, r3
 800104c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	f043 0309 	orr.w	r3, r3, #9
 8001054:	b2db      	uxtb	r3, r3
 8001056:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001058:	7bbb      	ldrb	r3, [r7, #14]
 800105a:	f043 030d 	orr.w	r3, r3, #13
 800105e:	b2db      	uxtb	r3, r3
 8001060:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	f043 0309 	orr.w	r3, r3, #9
 8001068:	b2db      	uxtb	r3, r3
 800106a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	2364      	movs	r3, #100	; 0x64
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2304      	movs	r3, #4
 8001076:	214e      	movs	r1, #78	; 0x4e
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <lcd_send_data+0x5c>)
 800107a:	f001 fd4d 	bl	8002b18 <HAL_I2C_Master_Transmit>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000022c 	.word	0x2000022c

0800108c <lcd_clear>:

void lcd_clear (void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001092:	2080      	movs	r0, #128	; 0x80
 8001094:	f7ff ff9a 	bl	8000fcc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	e005      	b.n	80010aa <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800109e:	2020      	movs	r0, #32
 80010a0:	f7ff ffc4 	bl	800102c <lcd_send_data>
	for (int i=0; i<70; i++)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b45      	cmp	r3, #69	; 0x45
 80010ae:	ddf6      	ble.n	800109e <lcd_clear+0x12>
	}
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
    switch (row)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <lcd_put_cur+0x16>
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d005      	beq.n	80010d8 <lcd_put_cur+0x20>
 80010cc:	e009      	b.n	80010e2 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d4:	603b      	str	r3, [r7, #0]
            break;
 80010d6:	e004      	b.n	80010e2 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010de:	603b      	str	r3, [r7, #0]
            break;
 80010e0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff70 	bl	8000fcc <lcd_send_cmd>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <lcd_init>:


void lcd_init (void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80010f8:	2032      	movs	r0, #50	; 0x32
 80010fa:	f001 f8ed 	bl	80022d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010fe:	2030      	movs	r0, #48	; 0x30
 8001100:	f7ff ff64 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001104:	2005      	movs	r0, #5
 8001106:	f001 f8e7 	bl	80022d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800110a:	2030      	movs	r0, #48	; 0x30
 800110c:	f7ff ff5e 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001110:	2001      	movs	r0, #1
 8001112:	f001 f8e1 	bl	80022d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001116:	2030      	movs	r0, #48	; 0x30
 8001118:	f7ff ff58 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(10);
 800111c:	200a      	movs	r0, #10
 800111e:	f001 f8db 	bl	80022d8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001122:	2020      	movs	r0, #32
 8001124:	f7ff ff52 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(10);
 8001128:	200a      	movs	r0, #10
 800112a:	f001 f8d5 	bl	80022d8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800112e:	2028      	movs	r0, #40	; 0x28
 8001130:	f7ff ff4c 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 8001134:	2001      	movs	r0, #1
 8001136:	f001 f8cf 	bl	80022d8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800113a:	2008      	movs	r0, #8
 800113c:	f7ff ff46 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f001 f8c9 	bl	80022d8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff ff40 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f001 f8c3 	bl	80022d8 <HAL_Delay>
	HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f001 f8c0 	bl	80022d8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001158:	2006      	movs	r0, #6
 800115a:	f7ff ff37 	bl	8000fcc <lcd_send_cmd>
	HAL_Delay(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f001 f8ba 	bl	80022d8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001164:	200c      	movs	r0, #12
 8001166:	f7ff ff31 	bl	8000fcc <lcd_send_cmd>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}

0800116e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001176:	e006      	b.n	8001186 <lcd_send_string+0x18>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff53 	bl	800102c <lcd_send_data>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f4      	bne.n	8001178 <lcd_send_string+0xa>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0,Difference_2=0;
uint8_t Is_First_Captured = 0,Is_First_Captured_2 = 0;  // is the first value captured ?
float Distance  = 0,Distance_2  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7f1b      	ldrb	r3, [r3, #28]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	f040 8083 	bne.w	80012b0 <HAL_TIM_IC_CaptureCallback+0x118>
	{


		if (Is_First_Captured==0) // if the first value is not captured
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d11a      	bne.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80011b2:	2100      	movs	r1, #0
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f003 f8c5 	bl	8004344 <HAL_TIM_ReadCapturedValue>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4b85      	ldr	r3, [pc, #532]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80011be:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80011c0:	4b83      	ldr	r3, [pc, #524]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a1a      	ldr	r2, [r3, #32]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 020a 	bic.w	r2, r2, #10
 80011d4:	621a      	str	r2, [r3, #32]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6a1a      	ldr	r2, [r3, #32]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0202 	orr.w	r2, r2, #2
 80011e4:	621a      	str	r2, [r3, #32]
 80011e6:	e063      	b.n	80012b0 <HAL_TIM_IC_CaptureCallback+0x118>
		}

		else if (Is_First_Captured==1)   // if the first is already captured
 80011e8:	4b79      	ldr	r3, [pc, #484]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d15f      	bne.n	80012b0 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80011f0:	2100      	movs	r1, #0
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f003 f8a6 	bl	8004344 <HAL_TIM_ReadCapturedValue>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 80011fc:	601a      	str	r2, [r3, #0]


			if (IC_Val2 > IC_Val1)
 80011fe:	4b76      	ldr	r3, [pc, #472]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b74      	ldr	r3, [pc, #464]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d907      	bls.n	800121a <HAL_TIM_IC_CaptureCallback+0x82>
			{
				Difference = IC_Val2-IC_Val1;
 800120a:	4b73      	ldr	r3, [pc, #460]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b71      	ldr	r3, [pc, #452]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a71      	ldr	r2, [pc, #452]	; (80013dc <HAL_TIM_IC_CaptureCallback+0x244>)
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e00f      	b.n	800123a <HAL_TIM_IC_CaptureCallback+0xa2>
			}

			else if (IC_Val1 > IC_Val2)
 800121a:	4b6e      	ldr	r3, [pc, #440]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b6e      	ldr	r3, [pc, #440]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d909      	bls.n	800123a <HAL_TIM_IC_CaptureCallback+0xa2>
			{
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001226:	4b6c      	ldr	r3, [pc, #432]	; (80013d8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001234:	33ff      	adds	r3, #255	; 0xff
 8001236:	4a69      	ldr	r2, [pc, #420]	; (80013dc <HAL_TIM_IC_CaptureCallback+0x244>)
 8001238:	6013      	str	r3, [r2, #0]
			}


			Distance = (float)Difference * .034/2;
 800123a:	4b68      	ldr	r3, [pc, #416]	; (80013dc <HAL_TIM_IC_CaptureCallback+0x244>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001246:	ee17 0a90 	vmov	r0, s15
 800124a:	f7ff f985 	bl	8000558 <__aeabi_f2d>
 800124e:	a35e      	add	r3, pc, #376	; (adr r3, 80013c8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f9d8 	bl	8000608 <__aeabi_dmul>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	4618      	mov	r0, r3
 800125e:	4621      	mov	r1, r4
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001268:	f7ff faf8 	bl	800085c <__aeabi_ddiv>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	4618      	mov	r0, r3
 8001272:	4621      	mov	r1, r4
 8001274:	f7ff fca0 	bl	8000bb8 <__aeabi_d2f>
 8001278:	4602      	mov	r2, r0
 800127a:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800127c:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 800127e:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6a1a      	ldr	r2, [r3, #32]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 020a 	bic.w	r2, r2, #10
 8001292:	621a      	str	r2, [r3, #32]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6a12      	ldr	r2, [r2, #32]
 800129e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80012a0:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0202 	bic.w	r2, r2, #2
 80012ae:	60da      	str	r2, [r3, #12]





	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel4
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7f1b      	ldrb	r3, [r3, #28]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	f040 8083 	bne.w	80013c0 <HAL_TIM_IC_CaptureCallback+0x228>
		{

			if (Is_First_Captured_2==0) // if the first value is not captured
 80012ba:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d11a      	bne.n	80012f8 <HAL_TIM_IC_CaptureCallback+0x160>
			{
				IC_Val1_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 80012c2:	210c      	movs	r1, #12
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f003 f83d 	bl	8004344 <HAL_TIM_ReadCapturedValue>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x254>)
 80012ce:	601a      	str	r2, [r3, #0]
				Is_First_Captured_2 = 1;  // set the first captured as true
 80012d0:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6a1a      	ldr	r2, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80012e4:	621a      	str	r2, [r3, #32]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a1a      	ldr	r2, [r3, #32]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012f4:	621a      	str	r2, [r3, #32]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
			}
		}

}
 80012f6:	e063      	b.n	80013c0 <HAL_TIM_IC_CaptureCallback+0x228>
			else if (Is_First_Captured_2==1)   // if the first is already captured
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d15f      	bne.n	80013c0 <HAL_TIM_IC_CaptureCallback+0x228>
				IC_Val2_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8001300:	210c      	movs	r1, #12
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f003 f81e 	bl	8004344 <HAL_TIM_ReadCapturedValue>
 8001308:	4602      	mov	r2, r0
 800130a:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 800130c:	601a      	str	r2, [r3, #0]
				if (IC_Val2_2 > IC_Val1_2)
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x254>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d907      	bls.n	800132a <HAL_TIM_IC_CaptureCallback+0x192>
					Difference_2 = IC_Val2_2-IC_Val1_2;
 800131a:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x254>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	4a33      	ldr	r2, [pc, #204]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e00f      	b.n	800134a <HAL_TIM_IC_CaptureCallback+0x1b2>
				else if (IC_Val1_2 > IC_Val2_2)
 800132a:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x254>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d909      	bls.n	800134a <HAL_TIM_IC_CaptureCallback+0x1b2>
					Difference_2 = (0xffff - IC_Val1_2) + IC_Val2_2;
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <HAL_TIM_IC_CaptureCallback+0x254>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001344:	33ff      	adds	r3, #255	; 0xff
 8001346:	4a2b      	ldr	r2, [pc, #172]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001348:	6013      	str	r3, [r2, #0]
				Distance_2 = (float)Difference_2 * .034/2;
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001356:	ee17 0a90 	vmov	r0, s15
 800135a:	f7ff f8fd 	bl	8000558 <__aeabi_f2d>
 800135e:	a31a      	add	r3, pc, #104	; (adr r3, 80013c8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff f950 	bl	8000608 <__aeabi_dmul>
 8001368:	4603      	mov	r3, r0
 800136a:	460c      	mov	r4, r1
 800136c:	4618      	mov	r0, r3
 800136e:	4621      	mov	r1, r4
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001378:	f7ff fa70 	bl	800085c <__aeabi_ddiv>
 800137c:	4603      	mov	r3, r0
 800137e:	460c      	mov	r4, r1
 8001380:	4618      	mov	r0, r3
 8001382:	4621      	mov	r1, r4
 8001384:	f7ff fc18 	bl	8000bb8 <__aeabi_d2f>
 8001388:	4602      	mov	r2, r0
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0x260>)
 800138c:	601a      	str	r2, [r3, #0]
				Is_First_Captured_2 = 0; // set it back to false
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6a1a      	ldr	r2, [r3, #32]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80013a2:	621a      	str	r2, [r3, #32]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6a12      	ldr	r2, [r2, #32]
 80013ae:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0210 	bic.w	r2, r2, #16
 80013be:	60da      	str	r2, [r3, #12]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	b020c49c 	.word	0xb020c49c
 80013cc:	3fa16872 	.word	0x3fa16872
 80013d0:	20000214 	.word	0x20000214
 80013d4:	200001fc 	.word	0x200001fc
 80013d8:	20000204 	.word	0x20000204
 80013dc:	2000020c 	.word	0x2000020c
 80013e0:	20000218 	.word	0x20000218
 80013e4:	200002d8 	.word	0x200002d8
 80013e8:	20000215 	.word	0x20000215
 80013ec:	20000200 	.word	0x20000200
 80013f0:	20000208 	.word	0x20000208
 80013f4:	20000210 	.word	0x20000210
 80013f8:	2000021c 	.word	0x2000021c

080013fc <HCSR04_Read>:

void HCSR04_Read (void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <HCSR04_Read+0x60>)
 8001408:	f001 fa34 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001412:	4812      	ldr	r0, [pc, #72]	; (800145c <HCSR04_Read+0x60>)
 8001414:	f001 fa2e 	bl	8002874 <HAL_GPIO_WritePin>

	HAL_Delay(10);  // wait for 10 us
 8001418:	200a      	movs	r0, #10
 800141a:	f000 ff5d 	bl	80022d8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  // pull the TRIG pin low
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <HCSR04_Read+0x60>)
 8001426:	f001 fa25 	bl	8002874 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the TRIG pin low
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <HCSR04_Read+0x60>)
 8001432:	f001 fa1f 	bl	8002874 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HCSR04_Read+0x64>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HCSR04_Read+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0210 	orr.w	r2, r2, #16
 8001444:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HCSR04_Read+0x64>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HCSR04_Read+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0202 	orr.w	r2, r2, #2
 8001454:	60da      	str	r2, [r3, #12]
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40020000 	.word	0x40020000
 8001460:	200002d8 	.word	0x200002d8

08001464 <HX711_Value2>:


int HX711_Value2()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
    int buffer;
    buffer = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]

   if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11)==1) return buffer;
 800146e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001472:	4824      	ldr	r0, [pc, #144]	; (8001504 <HX711_Value2+0xa0>)
 8001474:	f001 f9e6 	bl	8002844 <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HX711_Value2+0x1e>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	e03c      	b.n	80014fc <HX711_Value2+0x98>



    for (uint8_t i = 0; i < 24; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	72fb      	strb	r3, [r7, #11]
 8001486:	e01c      	b.n	80014c2 <HX711_Value2+0x5e>
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800148e:	481d      	ldr	r0, [pc, #116]	; (8001504 <HX711_Value2+0xa0>)
 8001490:	f001 f9f0 	bl	8002874 <HAL_GPIO_WritePin>

        buffer = buffer << 1 ;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	60fb      	str	r3, [r7, #12]

        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11))
 800149a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149e:	4819      	ldr	r0, [pc, #100]	; (8001504 <HX711_Value2+0xa0>)
 80014a0:	f001 f9d0 	bl	8002844 <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <HX711_Value2+0x4c>
        {
            buffer ++;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
        }

        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <HX711_Value2+0xa0>)
 80014b8:	f001 f9dc 	bl	8002874 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 24; i++)
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	3301      	adds	r3, #1
 80014c0:	72fb      	strb	r3, [r7, #11]
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b17      	cmp	r3, #23
 80014c6:	d9df      	bls.n	8001488 <HX711_Value2+0x24>
    }

    for (int i = 0; i <64 ; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	e00e      	b.n	80014ec <HX711_Value2+0x88>
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <HX711_Value2+0xa0>)
 80014d6:	f001 f9cd 	bl	8002874 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <HX711_Value2+0xa0>)
 80014e2:	f001 f9c7 	bl	8002874 <HAL_GPIO_WritePin>
    for (int i = 0; i <64 ; i++)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3301      	adds	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b3f      	cmp	r3, #63	; 0x3f
 80014f0:	dded      	ble.n	80014ce <HX711_Value2+0x6a>
    }

    buffer = buffer ^ 0x800000;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 80014f8:	60fb      	str	r3, [r7, #12]

    return buffer;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40020800 	.word	0x40020800

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800150c:	b0aa      	sub	sp, #168	; 0xa8
 800150e:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	  HX711 hx11;
	  hx11.gpioSck = GPIOC; // HS711SCK_GPIO_Port;
 8001510:	4b95      	ldr	r3, [pc, #596]	; (8001768 <main+0x260>)
 8001512:	66bb      	str	r3, [r7, #104]	; 0x68
	  hx11.gpioData = GPIOC;
 8001514:	4b94      	ldr	r3, [pc, #592]	; (8001768 <main+0x260>)
 8001516:	66fb      	str	r3, [r7, #108]	; 0x6c
	  hx11.pinSck = GPIO_PIN_10;
 8001518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	  hx11.pinData = GPIO_PIN_11;
 8001520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001524:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  hx11.offset = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	677b      	str	r3, [r7, #116]	; 0x74
	  hx11.gain = 24;
 800152c:	2318      	movs	r3, #24
 800152e:	67bb      	str	r3, [r7, #120]	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001530:	f000 fe60 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001534:	f000 f9c4 	bl	80018c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001538:	f000 fb8c 	bl	8001c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800153c:	f000 fb60 	bl	8001c00 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001540:	f000 fa86 	bl	8001a50 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001544:	f000 fa24 	bl	8001990 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001548:	f000 fae4 	bl	8001b14 <MX_TIM2_Init>
  MX_SPI3_Init();
 800154c:	f000 fa4e 	bl	80019ec <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001550:	2100      	movs	r1, #0
 8001552:	4886      	ldr	r0, [pc, #536]	; (800176c <main+0x264>)
 8001554:	f002 fb6c 	bl	8003c30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8001558:	210c      	movs	r1, #12
 800155a:	4884      	ldr	r0, [pc, #528]	; (800176c <main+0x264>)
 800155c:	f002 fb68 	bl	8003c30 <HAL_TIM_IC_Start_IT>

  lcd_init();
 8001560:	f7ff fdc8 	bl	80010f4 <lcd_init>
  HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_1); //start the PMW
 8001564:	2100      	movs	r1, #0
 8001566:	4882      	ldr	r0, [pc, #520]	; (8001770 <main+0x268>)
 8001568:	f002 fb04 	bl	8003b74 <HAL_TIM_PWM_Start>
  htim2.Instance->CCR1 = 75;
 800156c:	4b80      	ldr	r3, [pc, #512]	; (8001770 <main+0x268>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	224b      	movs	r2, #75	; 0x4b
 8001572:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay (100);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f000 feaf 	bl	80022d8 <HAL_Delay>

  HX711_Init(hx11);
 800157a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001584:	f7ff fce8 	bl	8000f58 <HX711_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int count = 0,stateDoor = 0,mode = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  char str[50],str2[50];
  while (1)
  {
	  HCSR04_Read();
 800159a:	f7ff ff2f 	bl	80013fc <HCSR04_Read>
	  meres = HX711_Value2();
 800159e:	f7ff ff61 	bl	8001464 <HX711_Value2>
 80015a2:	4602      	mov	r2, r0
 80015a4:	4b73      	ldr	r3, [pc, #460]	; (8001774 <main+0x26c>)
 80015a6:	601a      	str	r2, [r3, #0]
	  //calibate 1  float weight = meres*(0.0025617)-21721 ; (9/23/2020)
	  //calibate 2  float weight = meres*(0.002378401)- 20252.24955;



	  float weight = meres*(0.005643482)- 47713.94889;
 80015a8:	4b72      	ldr	r3, [pc, #456]	; (8001774 <main+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffc1 	bl	8000534 <__aeabi_i2d>
 80015b2:	a369      	add	r3, pc, #420	; (adr r3, 8001758 <main+0x250>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff f826 	bl	8000608 <__aeabi_dmul>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	4618      	mov	r0, r3
 80015c2:	4621      	mov	r1, r4
 80015c4:	a366      	add	r3, pc, #408	; (adr r3, 8001760 <main+0x258>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe fe65 	bl	8000298 <__aeabi_dsub>
 80015ce:	4603      	mov	r3, r0
 80015d0:	460c      	mov	r4, r1
 80015d2:	4618      	mov	r0, r3
 80015d4:	4621      	mov	r1, r4
 80015d6:	f7ff faef 	bl	8000bb8 <__aeabi_d2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  if(weight < 0) weight = 0;
 80015e0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d503      	bpl.n	80015f6 <main+0xee>
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80015f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fa:	485b      	ldr	r0, [pc, #364]	; (8001768 <main+0x260>)
 80015fc:	f001 f922 	bl	8002844 <HAL_GPIO_ReadPin>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d11f      	bne.n	8001646 <main+0x13e>
	 			  // Magic, let's wait for a bit
	 			  HAL_Delay(10);
 8001606:	200a      	movs	r0, #10
 8001608:	f000 fe66 	bl	80022d8 <HAL_Delay>
	 			  // It is really still down
	 			  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 800160c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001610:	4855      	ldr	r0, [pc, #340]	; (8001768 <main+0x260>)
 8001612:	f001 f917 	bl	8002844 <HAL_GPIO_ReadPin>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d114      	bne.n	8001646 <main+0x13e>
	 				  // Wait while the button is still down
	 				  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0);
 800161c:	bf00      	nop
 800161e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001622:	4851      	ldr	r0, [pc, #324]	; (8001768 <main+0x260>)
 8001624:	f001 f90e 	bl	8002844 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f7      	beq.n	800161e <main+0x116>
	 				  HAL_Delay(10);
 800162e:	200a      	movs	r0, #10
 8001630:	f000 fe52 	bl	80022d8 <HAL_Delay>
	 				  // Button is hit
	 				  mode = !mode;
 8001634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	 			  }
	 		  }



	  sprintf(str,"|W| = %.2f g",weight);
 8001646:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800164a:	f7fe ff85 	bl	8000558 <__aeabi_f2d>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001656:	461a      	mov	r2, r3
 8001658:	4623      	mov	r3, r4
 800165a:	4947      	ldr	r1, [pc, #284]	; (8001778 <main+0x270>)
 800165c:	f004 fc84 	bl	8005f68 <siprintf>
	  float volume = (Distance_2/30.0)*100.0;
 8001660:	4b46      	ldr	r3, [pc, #280]	; (800177c <main+0x274>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff77 	bl	8000558 <__aeabi_f2d>
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b44      	ldr	r3, [pc, #272]	; (8001780 <main+0x278>)
 8001670:	f7ff f8f4 	bl	800085c <__aeabi_ddiv>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	4618      	mov	r0, r3
 800167a:	4621      	mov	r1, r4
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b40      	ldr	r3, [pc, #256]	; (8001784 <main+0x27c>)
 8001682:	f7fe ffc1 	bl	8000608 <__aeabi_dmul>
 8001686:	4603      	mov	r3, r0
 8001688:	460c      	mov	r4, r1
 800168a:	4618      	mov	r0, r3
 800168c:	4621      	mov	r1, r4
 800168e:	f7ff fa93 	bl	8000bb8 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	67fb      	str	r3, [r7, #124]	; 0x7c





		  if(mode) stateDoor = 1;
 8001696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <main+0x19e>
 800169e:	2301      	movs	r3, #1
 80016a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016a4:	e026      	b.n	80016f4 <main+0x1ec>
		  else if( Distance <= 15.0  && (weight<=500.0 && volume>20.0 )){
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <main+0x280>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80016b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	d815      	bhi.n	80016e6 <main+0x1de>
 80016ba:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80016be:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800178c <main+0x284>
 80016c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d80c      	bhi.n	80016e6 <main+0x1de>
 80016cc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80016d0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80016d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	dd03      	ble.n	80016e6 <main+0x1de>
			  stateDoor = 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80016e4:	e006      	b.n	80016f4 <main+0x1ec>
		  }
		  else if(!mode){
 80016e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <main+0x1ec>
			  stateDoor = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			  //count = -1;
		  }

		  if(count > 0) count++;
 80016f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	dd04      	ble.n	8001706 <main+0x1fe>
 80016fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001700:	3301      	adds	r3, #1
 8001702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  if(count == 10){
 8001706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800170a:	2b0a      	cmp	r3, #10
 800170c:	d102      	bne.n	8001714 <main+0x20c>

			  stateDoor = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  }

		  if(stateDoor){
 8001714:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00f      	beq.n	800173c <main+0x234>
			  //opened
			  sprintf(str2,"Door open ");
 800171c:	463b      	mov	r3, r7
 800171e:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <main+0x288>)
 8001720:	ca07      	ldmia	r2, {r0, r1, r2}
 8001722:	c303      	stmia	r3!, {r0, r1}
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	3302      	adds	r3, #2
 8001728:	0c12      	lsrs	r2, r2, #16
 800172a:	701a      	strb	r2, [r3, #0]
			  htim2.Instance->CCR1 = 25;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <main+0x268>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2219      	movs	r2, #25
 8001732:	635a      	str	r2, [r3, #52]	; 0x34
			  count = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800173a:	e03f      	b.n	80017bc <main+0x2b4>
		  }
		  else{
			  //closed
			  if(count < 0 ) sprintf(str2,"Door close");
 800173c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001740:	2b00      	cmp	r3, #0
 8001742:	da29      	bge.n	8001798 <main+0x290>
 8001744:	463b      	mov	r3, r7
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <main+0x28c>)
 8001748:	ca07      	ldmia	r2, {r0, r1, r2}
 800174a:	c303      	stmia	r3!, {r0, r1}
 800174c:	801a      	strh	r2, [r3, #0]
 800174e:	3302      	adds	r3, #2
 8001750:	0c12      	lsrs	r2, r2, #16
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	e02b      	b.n	80017ae <main+0x2a6>
 8001756:	bf00      	nop
 8001758:	aa02501a 	.word	0xaa02501a
 800175c:	3f771d9e 	.word	0x3f771d9e
 8001760:	5d4e8fb0 	.word	0x5d4e8fb0
 8001764:	40e74c3e 	.word	0x40e74c3e
 8001768:	40020800 	.word	0x40020800
 800176c:	200002d8 	.word	0x200002d8
 8001770:	20000318 	.word	0x20000318
 8001774:	200001f8 	.word	0x200001f8
 8001778:	08007740 	.word	0x08007740
 800177c:	2000021c 	.word	0x2000021c
 8001780:	403e0000 	.word	0x403e0000
 8001784:	40590000 	.word	0x40590000
 8001788:	20000218 	.word	0x20000218
 800178c:	43fa0000 	.word	0x43fa0000
 8001790:	08007750 	.word	0x08007750
 8001794:	0800775c 	.word	0x0800775c
			  else sprintf(str2,"|%%| = %.2f %%",volume);
 8001798:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800179a:	f7fe fedd 	bl	8000558 <__aeabi_f2d>
 800179e:	4603      	mov	r3, r0
 80017a0:	460c      	mov	r4, r1
 80017a2:	4638      	mov	r0, r7
 80017a4:	461a      	mov	r2, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	493c      	ldr	r1, [pc, #240]	; (800189c <main+0x394>)
 80017aa:	f004 fbdd 	bl	8005f68 <siprintf>
			  htim2.Instance->CCR1 = 75;
 80017ae:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <main+0x398>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	224b      	movs	r2, #75	; 0x4b
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34
			  count = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  }

		  if(!((weight<=500.0 && volume>20.0 ))) sprintf(str2,"Garbage Full");
 80017bc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80017c0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80018a4 <main+0x39c>
 80017c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	bf94      	ite	ls
 80017ce:	2301      	movls	r3, #1
 80017d0:	2300      	movhi	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d110      	bne.n	8001800 <main+0x2f8>
 80017de:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80017e2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80017e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f083 0301 	eor.w	r3, r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <main+0x306>
 8001800:	463b      	mov	r3, r7
 8001802:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <main+0x3a0>)
 8001804:	461c      	mov	r4, r3
 8001806:	4613      	mov	r3, r2
 8001808:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180a:	c407      	stmia	r4!, {r0, r1, r2}
 800180c:	7023      	strb	r3, [r4, #0]
		  	  lcd_put_cur(0,0);
 800180e:	2100      	movs	r1, #0
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fc51 	bl	80010b8 <lcd_put_cur>
		  	  lcd_send_string(str);
 8001816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fca7 	bl	800116e <lcd_send_string>
		  	  lcd_put_cur(1,0);
 8001820:	2100      	movs	r1, #0
 8001822:	2001      	movs	r0, #1
 8001824:	f7ff fc48 	bl	80010b8 <lcd_put_cur>
		  	  lcd_send_string(str2);
 8001828:	463b      	mov	r3, r7
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc9f 	bl	800116e <lcd_send_string>


	  		sprintf(str,"distance = %f,%f cm w = %f,m = %d\r\n",Distance,Distance_2,weight,meres);
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <main+0x3a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe8f 	bl	8000558 <__aeabi_f2d>
 800183a:	4680      	mov	r8, r0
 800183c:	4689      	mov	r9, r1
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <main+0x3a8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe88 	bl	8000558 <__aeabi_f2d>
 8001848:	4604      	mov	r4, r0
 800184a:	460d      	mov	r5, r1
 800184c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001850:	f7fe fe82 	bl	8000558 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <main+0x3ac>)
 800185a:	6809      	ldr	r1, [r1, #0]
 800185c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001860:	9104      	str	r1, [sp, #16]
 8001862:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001866:	e9cd 4500 	strd	r4, r5, [sp]
 800186a:	4642      	mov	r2, r8
 800186c:	464b      	mov	r3, r9
 800186e:	4912      	ldr	r1, [pc, #72]	; (80018b8 <main+0x3b0>)
 8001870:	f004 fb7a 	bl	8005f68 <siprintf>
	  	  	HAL_UART_Transmit(&huart2,str,strlen(str),1000);
 8001874:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fcb1 	bl	80001e0 <strlen>
 800187e:	4603      	mov	r3, r0
 8001880:	b29a      	uxth	r2, r3
 8001882:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <main+0x3b4>)
 800188c:	f003 fa7f 	bl	8004d8e <HAL_UART_Transmit>



	  	  	//
	  	  	HAL_Delay(200);
 8001890:	20c8      	movs	r0, #200	; 0xc8
 8001892:	f000 fd21 	bl	80022d8 <HAL_Delay>
	  	  lcd_clear();
 8001896:	f7ff fbf9 	bl	800108c <lcd_clear>
  {
 800189a:	e67e      	b.n	800159a <main+0x92>
 800189c:	08007768 	.word	0x08007768
 80018a0:	20000318 	.word	0x20000318
 80018a4:	43fa0000 	.word	0x43fa0000
 80018a8:	08007778 	.word	0x08007778
 80018ac:	20000218 	.word	0x20000218
 80018b0:	2000021c 	.word	0x2000021c
 80018b4:	200001f8 	.word	0x200001f8
 80018b8:	08007788 	.word	0x08007788
 80018bc:	20000358 	.word	0x20000358

080018c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b094      	sub	sp, #80	; 0x50
 80018c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c6:	f107 0320 	add.w	r3, r7, #32
 80018ca:	2230      	movs	r2, #48	; 0x30
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fee6 	bl	80056a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <SystemClock_Config+0xc8>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4a26      	ldr	r2, [pc, #152]	; (8001988 <SystemClock_Config+0xc8>)
 80018ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f2:	6413      	str	r3, [r2, #64]	; 0x40
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <SystemClock_Config+0xc8>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <SystemClock_Config+0xcc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a20      	ldr	r2, [pc, #128]	; (800198c <SystemClock_Config+0xcc>)
 800190a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	4b1e      	ldr	r3, [pc, #120]	; (800198c <SystemClock_Config+0xcc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800191c:	2301      	movs	r3, #1
 800191e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001920:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001926:	2302      	movs	r3, #2
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800192a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800192e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001930:	2304      	movs	r3, #4
 8001932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001934:	235a      	movs	r3, #90	; 0x5a
 8001936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001938:	2302      	movs	r3, #2
 800193a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800193c:	2304      	movs	r3, #4
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fbef 	bl	8003128 <HAL_RCC_OscConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001950:	f000 f9f2 	bl	8001d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001954:	230f      	movs	r3, #15
 8001956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001958:	2302      	movs	r3, #2
 800195a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001960:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	2102      	movs	r1, #2
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fe49 	bl	8003608 <HAL_RCC_ClockConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800197c:	f000 f9dc 	bl	8001d38 <Error_Handler>
  }
}
 8001980:	bf00      	nop
 8001982:	3750      	adds	r7, #80	; 0x50
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000

08001990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_I2C1_Init+0x50>)
 8001996:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <MX_I2C1_Init+0x54>)
 8001998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_I2C1_Init+0x50>)
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_I2C1_Init+0x58>)
 800199e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_I2C1_Init+0x50>)
 80019ce:	f000 ff6b 	bl	80028a8 <HAL_I2C_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019d8:	f000 f9ae 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000022c 	.word	0x2000022c
 80019e4:	40005400 	.word	0x40005400
 80019e8:	000186a0 	.word	0x000186a0

080019ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_SPI3_Init+0x5c>)
 80019f2:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <MX_SPI3_Init+0x60>)
 80019f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_SPI3_Init+0x5c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_SPI3_Init+0x5c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_SPI3_Init+0x5c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_SPI3_Init+0x5c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_SPI3_Init+0x5c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_SPI3_Init+0x5c>)
 8001a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <MX_SPI3_Init+0x5c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_SPI3_Init+0x5c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <MX_SPI3_Init+0x5c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_SPI3_Init+0x5c>)
 8001a30:	220a      	movs	r2, #10
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <MX_SPI3_Init+0x5c>)
 8001a36:	f001 ffd9 	bl	80039ec <HAL_SPI_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_SPI3_Init+0x58>
  {
    Error_Handler();
 8001a40:	f000 f97a 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000280 	.word	0x20000280
 8001a4c:	40003c00 	.word	0x40003c00

08001a50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a60:	463b      	mov	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001a6e:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <MX_TIM1_Init+0xc0>)
 8001a70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001a74:	2253      	movs	r2, #83	; 0x53
 8001a76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a98:	481c      	ldr	r0, [pc, #112]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001a9a:	f002 f89d 	bl	8003bd8 <HAL_TIM_IC_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001aa4:	f000 f948 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4815      	ldr	r0, [pc, #84]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001ab8:	f003 f89a 	bl	8004bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ac2:	f000 f939 	bl	8001d38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aca:	2301      	movs	r3, #1
 8001acc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ad6:	463b      	mov	r3, r7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4619      	mov	r1, r3
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001ade:	f002 fa17 	bl	8003f10 <HAL_TIM_IC_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001ae8:	f000 f926 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	220c      	movs	r2, #12
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_TIM1_Init+0xbc>)
 8001af4:	f002 fa0c 	bl	8003f10 <HAL_TIM_IC_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8001afe:	f000 f91b 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200002d8 	.word	0x200002d8
 8001b10:	40010000 	.word	0x40010000

08001b14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08e      	sub	sp, #56	; 0x38
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	f107 0320 	add.w	r3, r7, #32
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
 8001b40:	615a      	str	r2, [r3, #20]
 8001b42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001b4e:	f240 3283 	movw	r2, #899	; 0x383
 8001b52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001b5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b6e:	4823      	ldr	r0, [pc, #140]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001b70:	f001 ffa0 	bl	8003ab4 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b7a:	f000 f8dd 	bl	8001d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481c      	ldr	r0, [pc, #112]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001b8c:	f002 fb22 	bl	80041d4 <HAL_TIM_ConfigClockSource>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b96:	f000 f8cf 	bl	8001d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b9a:	4818      	ldr	r0, [pc, #96]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001b9c:	f001 ffb5 	bl	8003b0a <HAL_TIM_PWM_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ba6:	f000 f8c7 	bl	8001d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb2:	f107 0320 	add.w	r3, r7, #32
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4810      	ldr	r0, [pc, #64]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001bba:	f003 f819 	bl	8004bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001bc4:	f000 f8b8 	bl	8001d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc8:	2360      	movs	r3, #96	; 0x60
 8001bca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4807      	ldr	r0, [pc, #28]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001be0:	f002 fa32 	bl	8004048 <HAL_TIM_PWM_ConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001bea:	f000 f8a5 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <MX_TIM2_Init+0xe8>)
 8001bf0:	f000 f9d2 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 8001bf4:	bf00      	nop
 8001bf6:	3738      	adds	r7, #56	; 0x38
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000318 	.word	0x20000318

08001c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c26:	220c      	movs	r2, #12
 8001c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c38:	f003 f85c 	bl	8004cf4 <HAL_UART_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c42:	f000 f879 	bl	8001d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000358 	.word	0x20000358
 8001c50:	40004400 	.word	0x40004400

08001c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <MX_GPIO_Init+0xd4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f44f 5191 	mov.w	r1, #4640	; 0x1220
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <MX_GPIO_Init+0xd8>)
 8001ce2:	f000 fdc7 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MX_GPIO_Init+0xdc>)
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480e      	ldr	r0, [pc, #56]	; (8001d34 <MX_GPIO_Init+0xe0>)
 8001cfc:	f000 fc20 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|GPIO_PIN_12;
 8001d00:	f44f 5391 	mov.w	r3, #4640	; 0x1220
 8001d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_GPIO_Init+0xd8>)
 8001d1a:	f000 fc11 	bl	8002540 <HAL_GPIO_Init>

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	10210000 	.word	0x10210000
 8001d34:	40020800 	.word	0x40020800

08001d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_MspInit+0x4c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d86:	2007      	movs	r0, #7
 8001d88:	f000 fb98 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800

08001d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_I2C_MspInit+0x84>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12b      	bne.n	8001e12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd6:	23c0      	movs	r3, #192	; 0xc0
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dda:	2312      	movs	r3, #18
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001de6:	2304      	movs	r3, #4
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <HAL_I2C_MspInit+0x8c>)
 8001df2:	f000 fba5 	bl	8002540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_I2C_MspInit+0x88>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40005400 	.word	0x40005400
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020400 	.word	0x40020400

08001e28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	; (8001eac <HAL_SPI_MspInit+0x84>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d12c      	bne.n	8001ea4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a10      	ldr	r2, [pc, #64]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_SPI_MspInit+0x88>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e94:	2306      	movs	r3, #6
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <HAL_SPI_MspInit+0x8c>)
 8001ea0:	f000 fb4e 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40003c00 	.word	0x40003c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020800 	.word	0x40020800

08001eb8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_TIM_IC_MspInit+0x94>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d134      	bne.n	8001f44 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <HAL_TIM_IC_MspInit+0x98>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <HAL_TIM_IC_MspInit+0x98>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_TIM_IC_MspInit+0x98>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_TIM_IC_MspInit+0x98>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <HAL_TIM_IC_MspInit+0x98>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_TIM_IC_MspInit+0x98>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001f12:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4809      	ldr	r0, [pc, #36]	; (8001f54 <HAL_TIM_IC_MspInit+0x9c>)
 8001f30:	f000 fb06 	bl	8002540 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	201b      	movs	r0, #27
 8001f3a:	f000 faca 	bl	80024d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f3e:	201b      	movs	r0, #27
 8001f40:	f000 fae3 	bl	800250a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f44:	bf00      	nop
 8001f46:	3728      	adds	r7, #40	; 0x28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000

08001f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f68:	d10d      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_TIM_Base_MspInit+0x3c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_TIM_Base_MspInit+0x3c>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_TIM_Base_MspInit+0x3c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800

08001f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb8:	d11d      	bne.n	8001ff6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_TIM_MspPostInit+0x68>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_TIM_MspPostInit+0x68>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_TIM_MspPostInit+0x68>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <HAL_TIM_MspPostInit+0x6c>)
 8001ff2:	f000 faa5 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40020000 	.word	0x40020000

08002008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_UART_MspInit+0x84>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d12b      	bne.n	8002082 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_UART_MspInit+0x88>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_UART_MspInit+0x88>)
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_UART_MspInit+0x88>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_UART_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_UART_MspInit+0x88>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_UART_MspInit+0x88>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002062:	230c      	movs	r3, #12
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206e:	2303      	movs	r3, #3
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002072:	2307      	movs	r3, #7
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_UART_MspInit+0x8c>)
 800207e:	f000 fa5f 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3728      	adds	r7, #40	; 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40004400 	.word	0x40004400
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <MemManage_Handler+0x4>

080020b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <BusFault_Handler+0x4>

080020b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <UsageFault_Handler+0x4>

080020be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ec:	f000 f8d4 	bl	8002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <TIM1_CC_IRQHandler+0x10>)
 80020fa:	f001 fe01 	bl	8003d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200002d8 	.word	0x200002d8

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f003 fa88 	bl	800564c <__errno>
 800213c:	4602      	mov	r2, r0
 800213e:	230c      	movs	r3, #12
 8002140:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20020000 	.word	0x20020000
 8002168:	00000400 	.word	0x00000400
 800216c:	20000220 	.word	0x20000220
 8002170:	200003a0 	.word	0x200003a0

08002174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <SystemInit+0x28>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <SystemInit+0x28>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <SystemInit+0x28>)
 800218a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800218e:	609a      	str	r2, [r3, #8]
#endif
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021a6:	e003      	b.n	80021b0 <LoopCopyDataInit>

080021a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021ae:	3104      	adds	r1, #4

080021b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021b0:	480b      	ldr	r0, [pc, #44]	; (80021e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021b8:	d3f6      	bcc.n	80021a8 <CopyDataInit>
  ldr  r2, =_sbss
 80021ba:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021bc:	e002      	b.n	80021c4 <LoopFillZerobss>

080021be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021c0:	f842 3b04 	str.w	r3, [r2], #4

080021c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021c8:	d3f9      	bcc.n	80021be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021ca:	f7ff ffd3 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ce:	f003 fa43 	bl	8005658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d2:	f7ff f999 	bl	8001508 <main>
  bx  lr    
 80021d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021dc:	08007a30 	.word	0x08007a30
  ldr  r0, =_sdata
 80021e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021e4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80021e8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80021ec:	200003a0 	.word	0x200003a0

080021f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC_IRQHandler>
	...

080021f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_Init+0x40>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_Init+0x40>)
 800220a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800220e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_Init+0x40>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221c:	2003      	movs	r0, #3
 800221e:	f000 f94d 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002222:	2000      	movs	r0, #0
 8002224:	f000 f808 	bl	8002238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002228:	f7ff fd8e 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_InitTick+0x54>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_InitTick+0x58>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f965 	bl	8002526 <HAL_SYSTICK_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00e      	b.n	8002284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0f      	cmp	r3, #15
 800226a:	d80a      	bhi.n	8002282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f000 f92d 	bl	80024d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002278:	4a06      	ldr	r2, [pc, #24]	; (8002294 <HAL_InitTick+0x5c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000000 	.word	0x20000000
 8002290:	20000008 	.word	0x20000008
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x24>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <HAL_IncTick+0x24>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000398 	.word	0x20000398

080022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_GetTick+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000398 	.word	0x20000398

080022d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff ffee 	bl	80022c0 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_Delay+0x40>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022fe:	bf00      	nop
 8002300:	f7ff ffde 	bl	80022c0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000008 	.word	0x20000008

0800231c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002338:	4013      	ands	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234e:	4a04      	ldr	r2, [pc, #16]	; (8002360 <__NVIC_SetPriorityGrouping+0x44>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60d3      	str	r3, [r2, #12]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <__NVIC_GetPriorityGrouping+0x18>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 0307 	and.w	r3, r3, #7
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	2b00      	cmp	r3, #0
 8002390:	db0b      	blt.n	80023aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	4907      	ldr	r1, [pc, #28]	; (80023b8 <__NVIC_EnableIRQ+0x38>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2001      	movs	r0, #1
 80023a2:	fa00 f202 	lsl.w	r2, r0, r2
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	e000e100 	.word	0xe000e100

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002488:	d301      	bcc.n	800248e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <SysTick_Config+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	210f      	movs	r1, #15
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f7ff ff8e 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <SysTick_Config+0x40>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SysTick_Config+0x40>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010

080024bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff29 	bl	800231c <__NVIC_SetPriorityGrouping>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e4:	f7ff ff3e 	bl	8002364 <__NVIC_GetPriorityGrouping>
 80024e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f7ff ff8e 	bl	8002410 <NVIC_EncodePriority>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff5d 	bl	80023bc <__NVIC_SetPriority>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff31 	bl	8002380 <__NVIC_EnableIRQ>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ffa2 	bl	8002478 <SysTick_Config>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e159      	b.n	8002810 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8148 	bne.w	800280a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d00b      	beq.n	800259a <HAL_GPIO_Init+0x5a>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800258e:	2b11      	cmp	r3, #17
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b12      	cmp	r3, #18
 8002598:	d130      	bne.n	80025fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d0:	2201      	movs	r2, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0201 	and.w	r2, r3, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0xfc>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b12      	cmp	r3, #18
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a2 	beq.w	800280a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b56      	ldr	r3, [pc, #344]	; (8002824 <HAL_GPIO_Init+0x2e4>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a55      	ldr	r2, [pc, #340]	; (8002824 <HAL_GPIO_Init+0x2e4>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_GPIO_Init+0x2e4>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e2:	4a51      	ldr	r2, [pc, #324]	; (8002828 <HAL_GPIO_Init+0x2e8>)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_GPIO_Init+0x2ec>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x202>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_GPIO_Init+0x2f0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x1fe>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a46      	ldr	r2, [pc, #280]	; (8002834 <HAL_GPIO_Init+0x2f4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x1fa>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a45      	ldr	r2, [pc, #276]	; (8002838 <HAL_GPIO_Init+0x2f8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x1f6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a44      	ldr	r2, [pc, #272]	; (800283c <HAL_GPIO_Init+0x2fc>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x1f2>
 800272e:	2304      	movs	r3, #4
 8002730:	e008      	b.n	8002744 <HAL_GPIO_Init+0x204>
 8002732:	2307      	movs	r3, #7
 8002734:	e006      	b.n	8002744 <HAL_GPIO_Init+0x204>
 8002736:	2303      	movs	r3, #3
 8002738:	e004      	b.n	8002744 <HAL_GPIO_Init+0x204>
 800273a:	2302      	movs	r3, #2
 800273c:	e002      	b.n	8002744 <HAL_GPIO_Init+0x204>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_GPIO_Init+0x204>
 8002742:	2300      	movs	r3, #0
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	f002 0203 	and.w	r2, r2, #3
 800274a:	0092      	lsls	r2, r2, #2
 800274c:	4093      	lsls	r3, r2
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002754:	4934      	ldr	r1, [pc, #208]	; (8002828 <HAL_GPIO_Init+0x2e8>)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	3302      	adds	r3, #2
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_GPIO_Init+0x300>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002786:	4a2e      	ldr	r2, [pc, #184]	; (8002840 <HAL_GPIO_Init+0x300>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <HAL_GPIO_Init+0x300>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b0:	4a23      	ldr	r2, [pc, #140]	; (8002840 <HAL_GPIO_Init+0x300>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_GPIO_Init+0x300>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027da:	4a19      	ldr	r2, [pc, #100]	; (8002840 <HAL_GPIO_Init+0x300>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <HAL_GPIO_Init+0x300>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <HAL_GPIO_Init+0x300>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b0f      	cmp	r3, #15
 8002814:	f67f aea2 	bls.w	800255c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002818:	bf00      	nop
 800281a:	3724      	adds	r7, #36	; 0x24
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40023800 	.word	0x40023800
 8002828:	40013800 	.word	0x40013800
 800282c:	40020000 	.word	0x40020000
 8002830:	40020400 	.word	0x40020400
 8002834:	40020800 	.word	0x40020800
 8002838:	40020c00 	.word	0x40020c00
 800283c:	40021000 	.word	0x40021000
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002890:	e003      	b.n	800289a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	041a      	lsls	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	619a      	str	r2, [r3, #24]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e11f      	b.n	8002afa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fa62 	bl	8001d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	; 0x24
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800290a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800290c:	f001 f846 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8002910:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4a7b      	ldr	r2, [pc, #492]	; (8002b04 <HAL_I2C_Init+0x25c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d807      	bhi.n	800292c <HAL_I2C_Init+0x84>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a7a      	ldr	r2, [pc, #488]	; (8002b08 <HAL_I2C_Init+0x260>)
 8002920:	4293      	cmp	r3, r2
 8002922:	bf94      	ite	ls
 8002924:	2301      	movls	r3, #1
 8002926:	2300      	movhi	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	e006      	b.n	800293a <HAL_I2C_Init+0x92>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a77      	ldr	r2, [pc, #476]	; (8002b0c <HAL_I2C_Init+0x264>)
 8002930:	4293      	cmp	r3, r2
 8002932:	bf94      	ite	ls
 8002934:	2301      	movls	r3, #1
 8002936:	2300      	movhi	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0db      	b.n	8002afa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <HAL_I2C_Init+0x268>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0c9b      	lsrs	r3, r3, #18
 800294c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a64      	ldr	r2, [pc, #400]	; (8002b04 <HAL_I2C_Init+0x25c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d802      	bhi.n	800297c <HAL_I2C_Init+0xd4>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	3301      	adds	r3, #1
 800297a:	e009      	b.n	8002990 <HAL_I2C_Init+0xe8>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	4a63      	ldr	r2, [pc, #396]	; (8002b14 <HAL_I2C_Init+0x26c>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	099b      	lsrs	r3, r3, #6
 800298e:	3301      	adds	r3, #1
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	430b      	orrs	r3, r1
 8002996:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4956      	ldr	r1, [pc, #344]	; (8002b04 <HAL_I2C_Init+0x25c>)
 80029ac:	428b      	cmp	r3, r1
 80029ae:	d80d      	bhi.n	80029cc <HAL_I2C_Init+0x124>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e59      	subs	r1, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	bf38      	it	cc
 80029c8:	2304      	movcc	r3, #4
 80029ca:	e04f      	b.n	8002a6c <HAL_I2C_Init+0x1c4>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d111      	bne.n	80029f8 <HAL_I2C_Init+0x150>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1e58      	subs	r0, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	440b      	add	r3, r1
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e012      	b.n	8002a1e <HAL_I2C_Init+0x176>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1e58      	subs	r0, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	0099      	lsls	r1, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Init+0x17e>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e022      	b.n	8002a6c <HAL_I2C_Init+0x1c4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10e      	bne.n	8002a4c <HAL_I2C_Init+0x1a4>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1e58      	subs	r0, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	440b      	add	r3, r1
 8002a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a4a:	e00f      	b.n	8002a6c <HAL_I2C_Init+0x1c4>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1e58      	subs	r0, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	0099      	lsls	r1, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	6809      	ldr	r1, [r1, #0]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6911      	ldr	r1, [r2, #16]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	4311      	orrs	r1, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	000186a0 	.word	0x000186a0
 8002b08:	001e847f 	.word	0x001e847f
 8002b0c:	003d08ff 	.word	0x003d08ff
 8002b10:	431bde83 	.word	0x431bde83
 8002b14:	10624dd3 	.word	0x10624dd3

08002b18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	461a      	mov	r2, r3
 8002b24:	460b      	mov	r3, r1
 8002b26:	817b      	strh	r3, [r7, #10]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff fbc8 	bl	80022c0 <HAL_GetTick>
 8002b30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	f040 80e0 	bne.w	8002d00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2319      	movs	r3, #25
 8002b46:	2201      	movs	r2, #1
 8002b48:	4970      	ldr	r1, [pc, #448]	; (8002d0c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f964 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0d3      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_I2C_Master_Transmit+0x50>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e0cc      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x1ea>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d007      	beq.n	8002b8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2221      	movs	r2, #33	; 0x21
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	893a      	ldrh	r2, [r7, #8]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4a50      	ldr	r2, [pc, #320]	; (8002d10 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bd0:	8979      	ldrh	r1, [r7, #10]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6a3a      	ldr	r2, [r7, #32]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f89c 	bl	8002d14 <I2C_MasterRequestWrite>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e08d      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bfc:	e066      	b.n	8002ccc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	6a39      	ldr	r1, [r7, #32]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f9de 	bl	8002fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d107      	bne.n	8002c26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e06b      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	781a      	ldrb	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d11b      	bne.n	8002ca0 <HAL_I2C_Master_Transmit+0x188>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d017      	beq.n	8002ca0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	6a39      	ldr	r1, [r7, #32]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f9ce 	bl	8003046 <I2C_WaitOnBTFFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d107      	bne.n	8002cc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e01a      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d194      	bne.n	8002bfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	00100002 	.word	0x00100002
 8002d10:	ffff0000 	.word	0xffff0000

08002d14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d006      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d003      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e00b      	b.n	8002d68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	2b12      	cmp	r3, #18
 8002d56:	d107      	bne.n	8002d68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f84f 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8e:	d103      	bne.n	8002d98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e035      	b.n	8002e08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da4:	d108      	bne.n	8002db8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db4:	611a      	str	r2, [r3, #16]
 8002db6:	e01b      	b.n	8002df0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002db8:	897b      	ldrh	r3, [r7, #10]
 8002dba:	11db      	asrs	r3, r3, #7
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 0306 	and.w	r3, r3, #6
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f063 030f 	orn	r3, r3, #15
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <I2C_MasterRequestWrite+0xfc>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f875 	bl	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e010      	b.n	8002e08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4907      	ldr	r1, [pc, #28]	; (8002e14 <I2C_MasterRequestWrite+0x100>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f865 	bl	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	00010008 	.word	0x00010008
 8002e14:	00010002 	.word	0x00010002

08002e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	e025      	b.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d021      	beq.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7ff fa45 	bl	80022c0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d116      	bne.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e023      	b.n	8002ebe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10d      	bne.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	e00c      	b.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d0b6      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed4:	e051      	b.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee4:	d123      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002efe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0204 	orr.w	r2, r3, #4
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e046      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d021      	beq.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7ff f9c3 	bl	80022c0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e020      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10c      	bne.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	e00b      	b.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d18d      	bne.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd0:	e02d      	b.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f878 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e02d      	b.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d021      	beq.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7ff f969 	bl	80022c0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e007      	b.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003038:	2b80      	cmp	r3, #128	; 0x80
 800303a:	d1ca      	bne.n	8002fd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003052:	e02d      	b.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f837 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e02d      	b.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d021      	beq.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7ff f928 	bl	80022c0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d1ca      	bne.n	8003054 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	d11b      	bne.n	8003118 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e25b      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d075      	beq.n	8003232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003146:	4ba3      	ldr	r3, [pc, #652]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00c      	beq.n	800316c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4ba0      	ldr	r3, [pc, #640]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315a:	2b08      	cmp	r3, #8
 800315c:	d112      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b9d      	ldr	r3, [pc, #628]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316a:	d10b      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	4b99      	ldr	r3, [pc, #612]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05b      	beq.n	8003230 <HAL_RCC_OscConfig+0x108>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d157      	bne.n	8003230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e236      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x74>
 800318e:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a90      	ldr	r2, [pc, #576]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x98>
 80031a6:	4b8b      	ldr	r3, [pc, #556]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a8a      	ldr	r2, [pc, #552]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a87      	ldr	r2, [pc, #540]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 80031c0:	4b84      	ldr	r3, [pc, #528]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a83      	ldr	r2, [pc, #524]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7ff f86e 	bl	80022c0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7ff f86a 	bl	80022c0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1fb      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xc0>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7ff f85a 	bl	80022c0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7ff f856 	bl	80022c0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1e7      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0xe8>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d063      	beq.n	8003306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323e:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b62      	ldr	r3, [pc, #392]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003252:	2b08      	cmp	r3, #8
 8003254:	d11c      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	4b5c      	ldr	r3, [pc, #368]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d001      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e1bb      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327a:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4952      	ldr	r1, [pc, #328]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	e03a      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003298:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <HAL_RCC_OscConfig+0x2b0>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7ff f80f 	bl	80022c0 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a6:	f7ff f80b 	bl	80022c0 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e19c      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4940      	ldr	r1, [pc, #256]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
 80032d8:	e015      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032da:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <HAL_RCC_OscConfig+0x2b0>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe ffee 	bl	80022c0 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e8:	f7fe ffea 	bl	80022c0 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e17b      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d030      	beq.n	8003374 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331a:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_RCC_OscConfig+0x2b4>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe ffce 	bl	80022c0 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003328:	f7fe ffca 	bl	80022c0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e15b      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x200>
 8003346:	e015      	b.n	8003374 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCC_OscConfig+0x2b4>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7fe ffb7 	bl	80022c0 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003356:	f7fe ffb3 	bl	80022c0 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e144      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a0 	beq.w	80034c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_OscConfig+0x2b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d121      	bne.n	8003402 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_RCC_OscConfig+0x2b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <HAL_RCC_OscConfig+0x2b8>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ca:	f7fe ff79 	bl	80022c0 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	e011      	b.n	80033f6 <HAL_RCC_OscConfig+0x2ce>
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	42470000 	.word	0x42470000
 80033dc:	42470e80 	.word	0x42470e80
 80033e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e4:	f7fe ff6c 	bl	80022c0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0fd      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x4d4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d106      	bne.n	8003418 <HAL_RCC_OscConfig+0x2f0>
 800340a:	4b7d      	ldr	r3, [pc, #500]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a7c      	ldr	r2, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6713      	str	r3, [r2, #112]	; 0x70
 8003416:	e01c      	b.n	8003452 <HAL_RCC_OscConfig+0x32a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d10c      	bne.n	800343a <HAL_RCC_OscConfig+0x312>
 8003420:	4b77      	ldr	r3, [pc, #476]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a76      	ldr	r2, [pc, #472]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	4b74      	ldr	r3, [pc, #464]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a73      	ldr	r2, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
 8003438:	e00b      	b.n	8003452 <HAL_RCC_OscConfig+0x32a>
 800343a:	4b71      	ldr	r3, [pc, #452]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a70      	ldr	r2, [pc, #448]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	4b6e      	ldr	r3, [pc, #440]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a6d      	ldr	r2, [pc, #436]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d015      	beq.n	8003486 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7fe ff31 	bl	80022c0 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe ff2d 	bl	80022c0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0bc      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ee      	beq.n	8003462 <HAL_RCC_OscConfig+0x33a>
 8003484:	e014      	b.n	80034b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7fe ff1b 	bl	80022c0 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe ff17 	bl	80022c0 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0a6      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	4b56      	ldr	r3, [pc, #344]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ee      	bne.n	800348e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b6:	4b52      	ldr	r3, [pc, #328]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a51      	ldr	r2, [pc, #324]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8092 	beq.w	80035f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034cc:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d05c      	beq.n	8003592 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d141      	bne.n	8003564 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b48      	ldr	r3, [pc, #288]	; (8003604 <HAL_RCC_OscConfig+0x4dc>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe feeb 	bl	80022c0 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe fee7 	bl	80022c0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e078      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003500:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	019b      	lsls	r3, r3, #6
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	4933      	ldr	r1, [pc, #204]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCC_OscConfig+0x4dc>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fe fec0 	bl	80022c0 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003544:	f7fe febc 	bl	80022c0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e04d      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x41c>
 8003562:	e045      	b.n	80035f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x4dc>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe fea9 	bl	80022c0 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe fea5 	bl	80022c0 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e036      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003584:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x44a>
 8003590:	e02e      	b.n	80035f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e029      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_RCC_OscConfig+0x4d8>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d11c      	bne.n	80035ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d115      	bne.n	80035ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c6:	4013      	ands	r3, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d10d      	bne.n	80035ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d106      	bne.n	80035ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40007000 	.word	0x40007000
 8003600:	40023800 	.word	0x40023800
 8003604:	42470060 	.word	0x42470060

08003608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0cc      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b68      	ldr	r3, [pc, #416]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d90c      	bls.n	8003644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b65      	ldr	r3, [pc, #404]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0b8      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800365c:	4b59      	ldr	r3, [pc, #356]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003674:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800367e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003680:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	494d      	ldr	r1, [pc, #308]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d044      	beq.n	8003728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d119      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e07f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d003      	beq.n	80036c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e067      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	4934      	ldr	r1, [pc, #208]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f8:	f7fe fde2 	bl	80022c0 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fe fdde 	bl	80022c0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e04f      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003716:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 020c 	and.w	r2, r3, #12
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	429a      	cmp	r2, r3
 8003726:	d1eb      	bne.n	8003700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d20c      	bcs.n	8003750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 030f 	and.w	r3, r3, #15
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d001      	beq.n	8003750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e032      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4916      	ldr	r1, [pc, #88]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377a:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	490e      	ldr	r1, [pc, #56]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378e:	f000 f821 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8003792:	4601      	mov	r1, r0
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	5cd3      	ldrb	r3, [r2, r3]
 80037a2:	fa21 f303 	lsr.w	r3, r1, r3
 80037a6:	4a09      	ldr	r2, [pc, #36]	; (80037cc <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_ClockConfig+0x1c8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fd42 	bl	8002238 <HAL_InitTick>

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023c00 	.word	0x40023c00
 80037c4:	40023800 	.word	0x40023800
 80037c8:	080077ac 	.word	0x080077ac
 80037cc:	20000000 	.word	0x20000000
 80037d0:	20000004 	.word	0x20000004

080037d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	2300      	movs	r3, #0
 80037e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d007      	beq.n	8003806 <HAL_RCC_GetSysClockFreq+0x32>
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d008      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x38>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 80b4 	bne.w	8003968 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003800:	4b5e      	ldr	r3, [pc, #376]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003802:	60bb      	str	r3, [r7, #8]
       break;
 8003804:	e0b3      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003806:	4b5e      	ldr	r3, [pc, #376]	; (8003980 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003808:	60bb      	str	r3, [r7, #8]
      break;
 800380a:	e0b0      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800380c:	4b5a      	ldr	r3, [pc, #360]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003814:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d04a      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003822:	4b55      	ldr	r3, [pc, #340]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	099b      	lsrs	r3, r3, #6
 8003828:	f04f 0400 	mov.w	r4, #0
 800382c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	ea03 0501 	and.w	r5, r3, r1
 8003838:	ea04 0602 	and.w	r6, r4, r2
 800383c:	4629      	mov	r1, r5
 800383e:	4632      	mov	r2, r6
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	f04f 0400 	mov.w	r4, #0
 8003848:	0154      	lsls	r4, r2, #5
 800384a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800384e:	014b      	lsls	r3, r1, #5
 8003850:	4619      	mov	r1, r3
 8003852:	4622      	mov	r2, r4
 8003854:	1b49      	subs	r1, r1, r5
 8003856:	eb62 0206 	sbc.w	r2, r2, r6
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	0194      	lsls	r4, r2, #6
 8003864:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003868:	018b      	lsls	r3, r1, #6
 800386a:	1a5b      	subs	r3, r3, r1
 800386c:	eb64 0402 	sbc.w	r4, r4, r2
 8003870:	f04f 0100 	mov.w	r1, #0
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	00e2      	lsls	r2, r4, #3
 800387a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800387e:	00d9      	lsls	r1, r3, #3
 8003880:	460b      	mov	r3, r1
 8003882:	4614      	mov	r4, r2
 8003884:	195b      	adds	r3, r3, r5
 8003886:	eb44 0406 	adc.w	r4, r4, r6
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	0262      	lsls	r2, r4, #9
 8003894:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003898:	0259      	lsls	r1, r3, #9
 800389a:	460b      	mov	r3, r1
 800389c:	4614      	mov	r4, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	4621      	mov	r1, r4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f04f 0400 	mov.w	r4, #0
 80038a8:	461a      	mov	r2, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	f7fd f9d4 	bl	8000c58 <__aeabi_uldivmod>
 80038b0:	4603      	mov	r3, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e049      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b8:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	f04f 0400 	mov.w	r4, #0
 80038c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	ea03 0501 	and.w	r5, r3, r1
 80038ce:	ea04 0602 	and.w	r6, r4, r2
 80038d2:	4629      	mov	r1, r5
 80038d4:	4632      	mov	r2, r6
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f04f 0400 	mov.w	r4, #0
 80038de:	0154      	lsls	r4, r2, #5
 80038e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038e4:	014b      	lsls	r3, r1, #5
 80038e6:	4619      	mov	r1, r3
 80038e8:	4622      	mov	r2, r4
 80038ea:	1b49      	subs	r1, r1, r5
 80038ec:	eb62 0206 	sbc.w	r2, r2, r6
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	f04f 0400 	mov.w	r4, #0
 80038f8:	0194      	lsls	r4, r2, #6
 80038fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038fe:	018b      	lsls	r3, r1, #6
 8003900:	1a5b      	subs	r3, r3, r1
 8003902:	eb64 0402 	sbc.w	r4, r4, r2
 8003906:	f04f 0100 	mov.w	r1, #0
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	00e2      	lsls	r2, r4, #3
 8003910:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003914:	00d9      	lsls	r1, r3, #3
 8003916:	460b      	mov	r3, r1
 8003918:	4614      	mov	r4, r2
 800391a:	195b      	adds	r3, r3, r5
 800391c:	eb44 0406 	adc.w	r4, r4, r6
 8003920:	f04f 0100 	mov.w	r1, #0
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	02a2      	lsls	r2, r4, #10
 800392a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800392e:	0299      	lsls	r1, r3, #10
 8003930:	460b      	mov	r3, r1
 8003932:	4614      	mov	r4, r2
 8003934:	4618      	mov	r0, r3
 8003936:	4621      	mov	r1, r4
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f04f 0400 	mov.w	r4, #0
 800393e:	461a      	mov	r2, r3
 8003940:	4623      	mov	r3, r4
 8003942:	f7fd f989 	bl	8000c58 <__aeabi_uldivmod>
 8003946:	4603      	mov	r3, r0
 8003948:	460c      	mov	r4, r1
 800394a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	3301      	adds	r3, #1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	60bb      	str	r3, [r7, #8]
      break;
 8003966:	e002      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800396a:	60bb      	str	r3, [r7, #8]
      break;
 800396c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396e:	68bb      	ldr	r3, [r7, #8]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400
 8003980:	007a1200 	.word	0x007a1200

08003984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_RCC_GetHCLKFreq+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
}
 800398c:	4618      	mov	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000000 	.word	0x20000000

0800399c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a0:	f7ff fff0 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039a4:	4601      	mov	r1, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4a03      	ldr	r2, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b2:	5cd3      	ldrb	r3, [r2, r3]
 80039b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	080077bc 	.word	0x080077bc

080039c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c8:	f7ff ffdc 	bl	8003984 <HAL_RCC_GetHCLKFreq>
 80039cc:	4601      	mov	r1, r0
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0b5b      	lsrs	r3, r3, #13
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039da:	5cd3      	ldrb	r3, [r2, r3]
 80039dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	080077bc 	.word	0x080077bc

080039ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e056      	b.n	8003aac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fe fa05 	bl	8001e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a34:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	ea42 0103 	orr.w	r1, r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	f003 0104 	and.w	r1, r3, #4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e01d      	b.n	8003b02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fe fa3c 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f000 fc92 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e01d      	b.n	8003b58 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f815 	bl	8003b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f000 fc67 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2201      	movs	r2, #1
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 f80c 	bl	8004ba4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a10      	ldr	r2, [pc, #64]	; (8003bd4 <HAL_TIM_PWM_Start+0x60>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d107      	bne.n	8003ba6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b06      	cmp	r3, #6
 8003bb6:	d007      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40010000 	.word	0x40010000

08003bd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e01d      	b.n	8003c26 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe f95a 	bl	8001eb8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f000 fc00 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	d841      	bhi.n	8003cc4 <HAL_TIM_IC_Start_IT+0x94>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <HAL_TIM_IC_Start_IT+0x18>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003cc5 	.word	0x08003cc5
 8003c50:	08003cc5 	.word	0x08003cc5
 8003c54:	08003cc5 	.word	0x08003cc5
 8003c58:	08003c8f 	.word	0x08003c8f
 8003c5c:	08003cc5 	.word	0x08003cc5
 8003c60:	08003cc5 	.word	0x08003cc5
 8003c64:	08003cc5 	.word	0x08003cc5
 8003c68:	08003ca1 	.word	0x08003ca1
 8003c6c:	08003cc5 	.word	0x08003cc5
 8003c70:	08003cc5 	.word	0x08003cc5
 8003c74:	08003cc5 	.word	0x08003cc5
 8003c78:	08003cb3 	.word	0x08003cb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0202 	orr.w	r2, r2, #2
 8003c8a:	60da      	str	r2, [r3, #12]
      break;
 8003c8c:	e01b      	b.n	8003cc6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0204 	orr.w	r2, r2, #4
 8003c9c:	60da      	str	r2, [r3, #12]
      break;
 8003c9e:	e012      	b.n	8003cc6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0208 	orr.w	r2, r2, #8
 8003cae:	60da      	str	r2, [r3, #12]
      break;
 8003cb0:	e009      	b.n	8003cc6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0210 	orr.w	r2, r2, #16
 8003cc0:	60da      	str	r2, [r3, #12]
      break;
 8003cc2:	e000      	b.n	8003cc6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003cc4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	6839      	ldr	r1, [r7, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 ff68 	bl	8004ba4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d007      	beq.n	8003cf6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d122      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d11b      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0202 	mvn.w	r2, #2
 8003d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fa28 	bl	8001198 <HAL_TIM_IC_CaptureCallback>
 8003d48:	e005      	b.n	8003d56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fb48 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fb4f 	bl	80043f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0204 	mvn.w	r2, #4
 8003d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2202      	movs	r2, #2
 8003d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd f9fe 	bl	8001198 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fb1e 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fb25 	bl	80043f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0208 	mvn.w	r2, #8
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2204      	movs	r2, #4
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fd f9d4 	bl	8001198 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 faf4 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fafb 	bl	80043f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0210 	mvn.w	r2, #16
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd f9aa 	bl	8001198 <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 faca 	bl	80043e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fad1 	bl	80043f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d10e      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0201 	mvn.w	r2, #1
 8003e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 faa4 	bl	80043cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d10e      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9c:	2b80      	cmp	r3, #128	; 0x80
 8003e9e:	d107      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 ff18 	bl	8004ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b40      	cmp	r3, #64	; 0x40
 8003ebc:	d10e      	bne.n	8003edc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d107      	bne.n	8003edc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa96 	bl	8004408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d10e      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d107      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0220 	mvn.w	r2, #32
 8003f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fee2 	bl	8004ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e08a      	b.n	8004040 <HAL_TIM_IC_ConfigChannel+0x130>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2202      	movs	r2, #2
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6819      	ldr	r1, [r3, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f000 fc70 	bl	8004834 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 020c 	bic.w	r2, r2, #12
 8003f62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6999      	ldr	r1, [r3, #24]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	619a      	str	r2, [r3, #24]
 8003f76:	e05a      	b.n	800402e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f000 fce8 	bl	8004962 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fa0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6999      	ldr	r1, [r3, #24]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	021a      	lsls	r2, r3, #8
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	619a      	str	r2, [r3, #24]
 8003fb6:	e03a      	b.n	800402e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d11b      	bne.n	8003ff6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6819      	ldr	r1, [r3, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f000 fd35 	bl	8004a3c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 020c 	bic.w	r2, r2, #12
 8003fe0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69d9      	ldr	r1, [r3, #28]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	61da      	str	r2, [r3, #28]
 8003ff4:	e01b      	b.n	800402e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f000 fd55 	bl	8004ab4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004018:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69d9      	ldr	r1, [r3, #28]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	021a      	lsls	r2, r3, #8
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800405e:	2302      	movs	r3, #2
 8004060:	e0b4      	b.n	80041cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	f200 809f 	bhi.w	80041b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080041b9 	.word	0x080041b9
 8004088:	080041b9 	.word	0x080041b9
 800408c:	080041b9 	.word	0x080041b9
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080041b9 	.word	0x080041b9
 8004098:	080041b9 	.word	0x080041b9
 800409c:	080041b9 	.word	0x080041b9
 80040a0:	08004137 	.word	0x08004137
 80040a4:	080041b9 	.word	0x080041b9
 80040a8:	080041b9 	.word	0x080041b9
 80040ac:	080041b9 	.word	0x080041b9
 80040b0:	08004177 	.word	0x08004177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fa2e 	bl	800451c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0208 	orr.w	r2, r2, #8
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	619a      	str	r2, [r3, #24]
      break;
 80040f2:	e062      	b.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fa74 	bl	80045e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6999      	ldr	r1, [r3, #24]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	619a      	str	r2, [r3, #24]
      break;
 8004134:	e041      	b.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fabf 	bl	80046c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0208 	orr.w	r2, r2, #8
 8004150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0204 	bic.w	r2, r2, #4
 8004160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	61da      	str	r2, [r3, #28]
      break;
 8004174:	e021      	b.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68b9      	ldr	r1, [r7, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fb09 	bl	8004794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69d9      	ldr	r1, [r3, #28]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	021a      	lsls	r2, r3, #8
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	61da      	str	r2, [r3, #28]
      break;
 80041b6:	e000      	b.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80041b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_TIM_ConfigClockSource+0x18>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e0a6      	b.n	800433a <HAL_TIM_ConfigClockSource+0x166>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800420a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004212:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d067      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0x120>
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d80b      	bhi.n	8004240 <HAL_TIM_ConfigClockSource+0x6c>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d073      	beq.n	8004314 <HAL_TIM_ConfigClockSource+0x140>
 800422c:	2b10      	cmp	r3, #16
 800422e:	d802      	bhi.n	8004236 <HAL_TIM_ConfigClockSource+0x62>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d06f      	beq.n	8004314 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004234:	e078      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004236:	2b20      	cmp	r3, #32
 8004238:	d06c      	beq.n	8004314 <HAL_TIM_ConfigClockSource+0x140>
 800423a:	2b30      	cmp	r3, #48	; 0x30
 800423c:	d06a      	beq.n	8004314 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800423e:	e073      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004240:	2b70      	cmp	r3, #112	; 0x70
 8004242:	d00d      	beq.n	8004260 <HAL_TIM_ConfigClockSource+0x8c>
 8004244:	2b70      	cmp	r3, #112	; 0x70
 8004246:	d804      	bhi.n	8004252 <HAL_TIM_ConfigClockSource+0x7e>
 8004248:	2b50      	cmp	r3, #80	; 0x50
 800424a:	d033      	beq.n	80042b4 <HAL_TIM_ConfigClockSource+0xe0>
 800424c:	2b60      	cmp	r3, #96	; 0x60
 800424e:	d041      	beq.n	80042d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004250:	e06a      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	d066      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x152>
 8004258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800425c:	d017      	beq.n	800428e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800425e:	e063      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6899      	ldr	r1, [r3, #8]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f000 fc78 	bl	8004b64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004282:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	609a      	str	r2, [r3, #8]
      break;
 800428c:	e04c      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6899      	ldr	r1, [r3, #8]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f000 fc61 	bl	8004b64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042b0:	609a      	str	r2, [r3, #8]
      break;
 80042b2:	e039      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	461a      	mov	r2, r3
 80042c2:	f000 fb1f 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2150      	movs	r1, #80	; 0x50
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fc2e 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 80042d2:	e029      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	461a      	mov	r2, r3
 80042e2:	f000 fb7b 	bl	80049dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2160      	movs	r1, #96	; 0x60
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fc1e 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 80042f2:	e019      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	461a      	mov	r2, r3
 8004302:	f000 faff 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2140      	movs	r1, #64	; 0x40
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fc0e 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 8004312:	e009      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 fc05 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 8004324:	e000      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d831      	bhi.n	80043bc <HAL_TIM_ReadCapturedValue+0x78>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <HAL_TIM_ReadCapturedValue+0x1c>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004395 	.word	0x08004395
 8004364:	080043bd 	.word	0x080043bd
 8004368:	080043bd 	.word	0x080043bd
 800436c:	080043bd 	.word	0x080043bd
 8004370:	0800439f 	.word	0x0800439f
 8004374:	080043bd 	.word	0x080043bd
 8004378:	080043bd 	.word	0x080043bd
 800437c:	080043bd 	.word	0x080043bd
 8004380:	080043a9 	.word	0x080043a9
 8004384:	080043bd 	.word	0x080043bd
 8004388:	080043bd 	.word	0x080043bd
 800438c:	080043bd 	.word	0x080043bd
 8004390:	080043b3 	.word	0x080043b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	60fb      	str	r3, [r7, #12]

      break;
 800439c:	e00f      	b.n	80043be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	60fb      	str	r3, [r7, #12]

      break;
 80043a6:	e00a      	b.n	80043be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	60fb      	str	r3, [r7, #12]

      break;
 80043b0:	e005      	b.n	80043be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	60fb      	str	r3, [r7, #12]

      break;
 80043ba:	e000      	b.n	80043be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80043bc:	bf00      	nop
  }

  return tmpreg;
 80043be:	68fb      	ldr	r3, [r7, #12]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a34      	ldr	r2, [pc, #208]	; (8004500 <TIM_Base_SetConfig+0xe4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00f      	beq.n	8004454 <TIM_Base_SetConfig+0x38>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800443a:	d00b      	beq.n	8004454 <TIM_Base_SetConfig+0x38>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a31      	ldr	r2, [pc, #196]	; (8004504 <TIM_Base_SetConfig+0xe8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_Base_SetConfig+0x38>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a30      	ldr	r2, [pc, #192]	; (8004508 <TIM_Base_SetConfig+0xec>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0x38>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a2f      	ldr	r2, [pc, #188]	; (800450c <TIM_Base_SetConfig+0xf0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d108      	bne.n	8004466 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a25      	ldr	r2, [pc, #148]	; (8004500 <TIM_Base_SetConfig+0xe4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01b      	beq.n	80044a6 <TIM_Base_SetConfig+0x8a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d017      	beq.n	80044a6 <TIM_Base_SetConfig+0x8a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a22      	ldr	r2, [pc, #136]	; (8004504 <TIM_Base_SetConfig+0xe8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <TIM_Base_SetConfig+0x8a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a21      	ldr	r2, [pc, #132]	; (8004508 <TIM_Base_SetConfig+0xec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00f      	beq.n	80044a6 <TIM_Base_SetConfig+0x8a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a20      	ldr	r2, [pc, #128]	; (800450c <TIM_Base_SetConfig+0xf0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00b      	beq.n	80044a6 <TIM_Base_SetConfig+0x8a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <TIM_Base_SetConfig+0xf4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d007      	beq.n	80044a6 <TIM_Base_SetConfig+0x8a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <TIM_Base_SetConfig+0xf8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d003      	beq.n	80044a6 <TIM_Base_SetConfig+0x8a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <TIM_Base_SetConfig+0xfc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d108      	bne.n	80044b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <TIM_Base_SetConfig+0xe4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	615a      	str	r2, [r3, #20]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40010000 	.word	0x40010000
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800

0800451c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f023 0302 	bic.w	r3, r3, #2
 8004564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <TIM_OC1_SetConfig+0xc8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10c      	bne.n	8004592 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0308 	bic.w	r3, r3, #8
 800457e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 0304 	bic.w	r3, r3, #4
 8004590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <TIM_OC1_SetConfig+0xc8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d111      	bne.n	80045be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	621a      	str	r2, [r3, #32]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40010000 	.word	0x40010000

080045e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0210 	bic.w	r2, r3, #16
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0320 	bic.w	r3, r3, #32
 8004632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <TIM_OC2_SetConfig+0xd4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10d      	bne.n	8004664 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004662:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a15      	ldr	r2, [pc, #84]	; (80046bc <TIM_OC2_SetConfig+0xd4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d113      	bne.n	8004694 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800467a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40010000 	.word	0x40010000

080046c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1d      	ldr	r2, [pc, #116]	; (8004790 <TIM_OC3_SetConfig+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d10d      	bne.n	800473a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a14      	ldr	r2, [pc, #80]	; (8004790 <TIM_OC3_SetConfig+0xd0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d113      	bne.n	800476a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	621a      	str	r2, [r3, #32]
}
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40010000 	.word	0x40010000

08004794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	031b      	lsls	r3, r3, #12
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a10      	ldr	r2, [pc, #64]	; (8004830 <TIM_OC4_SetConfig+0x9c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d109      	bne.n	8004808 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	019b      	lsls	r3, r3, #6
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40010000 	.word	0x40010000

08004834 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <TIM_TI1_SetConfig+0xbc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <TIM_TI1_SetConfig+0x56>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d00f      	beq.n	800488a <TIM_TI1_SetConfig+0x56>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <TIM_TI1_SetConfig+0xc0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00b      	beq.n	800488a <TIM_TI1_SetConfig+0x56>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <TIM_TI1_SetConfig+0xc4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <TIM_TI1_SetConfig+0x56>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <TIM_TI1_SetConfig+0xc8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_TI1_SetConfig+0x56>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <TIM_TI1_SetConfig+0xcc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <TIM_TI1_SetConfig+0x5a>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <TIM_TI1_SetConfig+0x5c>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0303 	bic.w	r3, r3, #3
 800489a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e003      	b.n	80048ae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f023 030a 	bic.w	r3, r3, #10
 80048c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 030a 	and.w	r3, r3, #10
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800
 80048fc:	40000c00 	.word	0x40000c00
 8004900:	40014000 	.word	0x40014000

08004904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 030a 	bic.w	r3, r3, #10
 8004940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004962:	b480      	push	{r7}
 8004964:	b087      	sub	sp, #28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f023 0210 	bic.w	r2, r3, #16
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	031b      	lsls	r3, r3, #12
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f023 0210 	bic.w	r2, r3, #16
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	031b      	lsls	r3, r3, #12
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 0303 	bic.w	r3, r3, #3
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004af2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	031b      	lsls	r3, r3, #12
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	031b      	lsls	r3, r3, #12
 8004b0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f043 0307 	orr.w	r3, r3, #7
 8004b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	021a      	lsls	r2, r3, #8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1a      	ldr	r2, [r3, #32]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a1a      	ldr	r2, [r3, #32]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e050      	b.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d018      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c54:	d013      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00e      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d009      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d004      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d10c      	bne.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40014000 	.word	0x40014000

08004ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e03f      	b.n	8004d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fd f974 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2224      	movs	r2, #36	; 0x24
 8004d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f90b 	bl	8004f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b088      	sub	sp, #32
 8004d92:	af02      	add	r7, sp, #8
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	603b      	str	r3, [r7, #0]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	f040 8083 	bne.w	8004eb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_UART_Transmit+0x2e>
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e07b      	b.n	8004eb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Transmit+0x40>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e074      	b.n	8004eb8 <HAL_UART_Transmit+0x12a>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2221      	movs	r2, #33	; 0x21
 8004de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004de4:	f7fd fa6c 	bl	80022c0 <HAL_GetTick>
 8004de8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	88fa      	ldrh	r2, [r7, #6]
 8004dee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004dfe:	e042      	b.n	8004e86 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d122      	bne.n	8004e5e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2180      	movs	r1, #128	; 0x80
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f84c 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e042      	b.n	8004eb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e44:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3302      	adds	r3, #2
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	e017      	b.n	8004e86 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	e013      	b.n	8004e86 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2200      	movs	r2, #0
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f829 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e01f      	b.n	8004eb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	60ba      	str	r2, [r7, #8]
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1b7      	bne.n	8004e00 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2200      	movs	r2, #0
 8004e98:	2140      	movs	r1, #64	; 0x40
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f810 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e006      	b.n	8004eb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed0:	e02c      	b.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d028      	beq.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee0:	f7fd f9ee 	bl	80022c0 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d21d      	bcs.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004efe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e00f      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4013      	ands	r3, r2
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d0c3      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f96:	f023 030c 	bic.w	r3, r3, #12
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc2:	f040 818b 	bne.w	80052dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4ac1      	ldr	r2, [pc, #772]	; (80052d0 <UART_SetConfig+0x37c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d005      	beq.n	8004fdc <UART_SetConfig+0x88>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4abf      	ldr	r2, [pc, #764]	; (80052d4 <UART_SetConfig+0x380>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	f040 80bd 	bne.w	8005156 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe fcf2 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	f04f 0600 	mov.w	r6, #0
 8004fea:	46a8      	mov	r8, r5
 8004fec:	46b1      	mov	r9, r6
 8004fee:	eb18 0308 	adds.w	r3, r8, r8
 8004ff2:	eb49 0409 	adc.w	r4, r9, r9
 8004ff6:	4698      	mov	r8, r3
 8004ff8:	46a1      	mov	r9, r4
 8004ffa:	eb18 0805 	adds.w	r8, r8, r5
 8004ffe:	eb49 0906 	adc.w	r9, r9, r6
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800500e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005012:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005016:	4688      	mov	r8, r1
 8005018:	4691      	mov	r9, r2
 800501a:	eb18 0005 	adds.w	r0, r8, r5
 800501e:	eb49 0106 	adc.w	r1, r9, r6
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	461d      	mov	r5, r3
 8005028:	f04f 0600 	mov.w	r6, #0
 800502c:	196b      	adds	r3, r5, r5
 800502e:	eb46 0406 	adc.w	r4, r6, r6
 8005032:	461a      	mov	r2, r3
 8005034:	4623      	mov	r3, r4
 8005036:	f7fb fe0f 	bl	8000c58 <__aeabi_uldivmod>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	461a      	mov	r2, r3
 8005040:	4ba5      	ldr	r3, [pc, #660]	; (80052d8 <UART_SetConfig+0x384>)
 8005042:	fba3 2302 	umull	r2, r3, r3, r2
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	461d      	mov	r5, r3
 8005050:	f04f 0600 	mov.w	r6, #0
 8005054:	46a9      	mov	r9, r5
 8005056:	46b2      	mov	sl, r6
 8005058:	eb19 0309 	adds.w	r3, r9, r9
 800505c:	eb4a 040a 	adc.w	r4, sl, sl
 8005060:	4699      	mov	r9, r3
 8005062:	46a2      	mov	sl, r4
 8005064:	eb19 0905 	adds.w	r9, r9, r5
 8005068:	eb4a 0a06 	adc.w	sl, sl, r6
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005078:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800507c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005080:	4689      	mov	r9, r1
 8005082:	4692      	mov	sl, r2
 8005084:	eb19 0005 	adds.w	r0, r9, r5
 8005088:	eb4a 0106 	adc.w	r1, sl, r6
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	461d      	mov	r5, r3
 8005092:	f04f 0600 	mov.w	r6, #0
 8005096:	196b      	adds	r3, r5, r5
 8005098:	eb46 0406 	adc.w	r4, r6, r6
 800509c:	461a      	mov	r2, r3
 800509e:	4623      	mov	r3, r4
 80050a0:	f7fb fdda 	bl	8000c58 <__aeabi_uldivmod>
 80050a4:	4603      	mov	r3, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	461a      	mov	r2, r3
 80050aa:	4b8b      	ldr	r3, [pc, #556]	; (80052d8 <UART_SetConfig+0x384>)
 80050ac:	fba3 1302 	umull	r1, r3, r3, r2
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	2164      	movs	r1, #100	; 0x64
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	3332      	adds	r3, #50	; 0x32
 80050be:	4a86      	ldr	r2, [pc, #536]	; (80052d8 <UART_SetConfig+0x384>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050cc:	4498      	add	r8, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	461d      	mov	r5, r3
 80050d2:	f04f 0600 	mov.w	r6, #0
 80050d6:	46a9      	mov	r9, r5
 80050d8:	46b2      	mov	sl, r6
 80050da:	eb19 0309 	adds.w	r3, r9, r9
 80050de:	eb4a 040a 	adc.w	r4, sl, sl
 80050e2:	4699      	mov	r9, r3
 80050e4:	46a2      	mov	sl, r4
 80050e6:	eb19 0905 	adds.w	r9, r9, r5
 80050ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005102:	4689      	mov	r9, r1
 8005104:	4692      	mov	sl, r2
 8005106:	eb19 0005 	adds.w	r0, r9, r5
 800510a:	eb4a 0106 	adc.w	r1, sl, r6
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	461d      	mov	r5, r3
 8005114:	f04f 0600 	mov.w	r6, #0
 8005118:	196b      	adds	r3, r5, r5
 800511a:	eb46 0406 	adc.w	r4, r6, r6
 800511e:	461a      	mov	r2, r3
 8005120:	4623      	mov	r3, r4
 8005122:	f7fb fd99 	bl	8000c58 <__aeabi_uldivmod>
 8005126:	4603      	mov	r3, r0
 8005128:	460c      	mov	r4, r1
 800512a:	461a      	mov	r2, r3
 800512c:	4b6a      	ldr	r3, [pc, #424]	; (80052d8 <UART_SetConfig+0x384>)
 800512e:	fba3 1302 	umull	r1, r3, r3, r2
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2164      	movs	r1, #100	; 0x64
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	3332      	adds	r3, #50	; 0x32
 8005140:	4a65      	ldr	r2, [pc, #404]	; (80052d8 <UART_SetConfig+0x384>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f003 0207 	and.w	r2, r3, #7
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4442      	add	r2, r8
 8005152:	609a      	str	r2, [r3, #8]
 8005154:	e26f      	b.n	8005636 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005156:	f7fe fc21 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 800515a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	461d      	mov	r5, r3
 8005160:	f04f 0600 	mov.w	r6, #0
 8005164:	46a8      	mov	r8, r5
 8005166:	46b1      	mov	r9, r6
 8005168:	eb18 0308 	adds.w	r3, r8, r8
 800516c:	eb49 0409 	adc.w	r4, r9, r9
 8005170:	4698      	mov	r8, r3
 8005172:	46a1      	mov	r9, r4
 8005174:	eb18 0805 	adds.w	r8, r8, r5
 8005178:	eb49 0906 	adc.w	r9, r9, r6
 800517c:	f04f 0100 	mov.w	r1, #0
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005188:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800518c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005190:	4688      	mov	r8, r1
 8005192:	4691      	mov	r9, r2
 8005194:	eb18 0005 	adds.w	r0, r8, r5
 8005198:	eb49 0106 	adc.w	r1, r9, r6
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	461d      	mov	r5, r3
 80051a2:	f04f 0600 	mov.w	r6, #0
 80051a6:	196b      	adds	r3, r5, r5
 80051a8:	eb46 0406 	adc.w	r4, r6, r6
 80051ac:	461a      	mov	r2, r3
 80051ae:	4623      	mov	r3, r4
 80051b0:	f7fb fd52 	bl	8000c58 <__aeabi_uldivmod>
 80051b4:	4603      	mov	r3, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b47      	ldr	r3, [pc, #284]	; (80052d8 <UART_SetConfig+0x384>)
 80051bc:	fba3 2302 	umull	r2, r3, r3, r2
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	461d      	mov	r5, r3
 80051ca:	f04f 0600 	mov.w	r6, #0
 80051ce:	46a9      	mov	r9, r5
 80051d0:	46b2      	mov	sl, r6
 80051d2:	eb19 0309 	adds.w	r3, r9, r9
 80051d6:	eb4a 040a 	adc.w	r4, sl, sl
 80051da:	4699      	mov	r9, r3
 80051dc:	46a2      	mov	sl, r4
 80051de:	eb19 0905 	adds.w	r9, r9, r5
 80051e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80051e6:	f04f 0100 	mov.w	r1, #0
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051fa:	4689      	mov	r9, r1
 80051fc:	4692      	mov	sl, r2
 80051fe:	eb19 0005 	adds.w	r0, r9, r5
 8005202:	eb4a 0106 	adc.w	r1, sl, r6
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	461d      	mov	r5, r3
 800520c:	f04f 0600 	mov.w	r6, #0
 8005210:	196b      	adds	r3, r5, r5
 8005212:	eb46 0406 	adc.w	r4, r6, r6
 8005216:	461a      	mov	r2, r3
 8005218:	4623      	mov	r3, r4
 800521a:	f7fb fd1d 	bl	8000c58 <__aeabi_uldivmod>
 800521e:	4603      	mov	r3, r0
 8005220:	460c      	mov	r4, r1
 8005222:	461a      	mov	r2, r3
 8005224:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <UART_SetConfig+0x384>)
 8005226:	fba3 1302 	umull	r1, r3, r3, r2
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2164      	movs	r1, #100	; 0x64
 800522e:	fb01 f303 	mul.w	r3, r1, r3
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	3332      	adds	r3, #50	; 0x32
 8005238:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <UART_SetConfig+0x384>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005246:	4498      	add	r8, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	461d      	mov	r5, r3
 800524c:	f04f 0600 	mov.w	r6, #0
 8005250:	46a9      	mov	r9, r5
 8005252:	46b2      	mov	sl, r6
 8005254:	eb19 0309 	adds.w	r3, r9, r9
 8005258:	eb4a 040a 	adc.w	r4, sl, sl
 800525c:	4699      	mov	r9, r3
 800525e:	46a2      	mov	sl, r4
 8005260:	eb19 0905 	adds.w	r9, r9, r5
 8005264:	eb4a 0a06 	adc.w	sl, sl, r6
 8005268:	f04f 0100 	mov.w	r1, #0
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005274:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005278:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800527c:	4689      	mov	r9, r1
 800527e:	4692      	mov	sl, r2
 8005280:	eb19 0005 	adds.w	r0, r9, r5
 8005284:	eb4a 0106 	adc.w	r1, sl, r6
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	461d      	mov	r5, r3
 800528e:	f04f 0600 	mov.w	r6, #0
 8005292:	196b      	adds	r3, r5, r5
 8005294:	eb46 0406 	adc.w	r4, r6, r6
 8005298:	461a      	mov	r2, r3
 800529a:	4623      	mov	r3, r4
 800529c:	f7fb fcdc 	bl	8000c58 <__aeabi_uldivmod>
 80052a0:	4603      	mov	r3, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	461a      	mov	r2, r3
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <UART_SetConfig+0x384>)
 80052a8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	2164      	movs	r1, #100	; 0x64
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	3332      	adds	r3, #50	; 0x32
 80052ba:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <UART_SetConfig+0x384>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f003 0207 	and.w	r2, r3, #7
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4442      	add	r2, r8
 80052cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80052ce:	e1b2      	b.n	8005636 <UART_SetConfig+0x6e2>
 80052d0:	40011000 	.word	0x40011000
 80052d4:	40011400 	.word	0x40011400
 80052d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4ad7      	ldr	r2, [pc, #860]	; (8005640 <UART_SetConfig+0x6ec>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d005      	beq.n	80052f2 <UART_SetConfig+0x39e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4ad6      	ldr	r2, [pc, #856]	; (8005644 <UART_SetConfig+0x6f0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	f040 80d1 	bne.w	8005494 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80052f2:	f7fe fb67 	bl	80039c4 <HAL_RCC_GetPCLK2Freq>
 80052f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	469a      	mov	sl, r3
 80052fc:	f04f 0b00 	mov.w	fp, #0
 8005300:	46d0      	mov	r8, sl
 8005302:	46d9      	mov	r9, fp
 8005304:	eb18 0308 	adds.w	r3, r8, r8
 8005308:	eb49 0409 	adc.w	r4, r9, r9
 800530c:	4698      	mov	r8, r3
 800530e:	46a1      	mov	r9, r4
 8005310:	eb18 080a 	adds.w	r8, r8, sl
 8005314:	eb49 090b 	adc.w	r9, r9, fp
 8005318:	f04f 0100 	mov.w	r1, #0
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005324:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005328:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800532c:	4688      	mov	r8, r1
 800532e:	4691      	mov	r9, r2
 8005330:	eb1a 0508 	adds.w	r5, sl, r8
 8005334:	eb4b 0609 	adc.w	r6, fp, r9
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4619      	mov	r1, r3
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	0094      	lsls	r4, r2, #2
 800534c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005350:	008b      	lsls	r3, r1, #2
 8005352:	461a      	mov	r2, r3
 8005354:	4623      	mov	r3, r4
 8005356:	4628      	mov	r0, r5
 8005358:	4631      	mov	r1, r6
 800535a:	f7fb fc7d 	bl	8000c58 <__aeabi_uldivmod>
 800535e:	4603      	mov	r3, r0
 8005360:	460c      	mov	r4, r1
 8005362:	461a      	mov	r2, r3
 8005364:	4bb8      	ldr	r3, [pc, #736]	; (8005648 <UART_SetConfig+0x6f4>)
 8005366:	fba3 2302 	umull	r2, r3, r3, r2
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	469b      	mov	fp, r3
 8005374:	f04f 0c00 	mov.w	ip, #0
 8005378:	46d9      	mov	r9, fp
 800537a:	46e2      	mov	sl, ip
 800537c:	eb19 0309 	adds.w	r3, r9, r9
 8005380:	eb4a 040a 	adc.w	r4, sl, sl
 8005384:	4699      	mov	r9, r3
 8005386:	46a2      	mov	sl, r4
 8005388:	eb19 090b 	adds.w	r9, r9, fp
 800538c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005390:	f04f 0100 	mov.w	r1, #0
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800539c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053a4:	4689      	mov	r9, r1
 80053a6:	4692      	mov	sl, r2
 80053a8:	eb1b 0509 	adds.w	r5, fp, r9
 80053ac:	eb4c 060a 	adc.w	r6, ip, sl
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4619      	mov	r1, r3
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	f04f 0400 	mov.w	r4, #0
 80053c2:	0094      	lsls	r4, r2, #2
 80053c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053c8:	008b      	lsls	r3, r1, #2
 80053ca:	461a      	mov	r2, r3
 80053cc:	4623      	mov	r3, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	4631      	mov	r1, r6
 80053d2:	f7fb fc41 	bl	8000c58 <__aeabi_uldivmod>
 80053d6:	4603      	mov	r3, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	461a      	mov	r2, r3
 80053dc:	4b9a      	ldr	r3, [pc, #616]	; (8005648 <UART_SetConfig+0x6f4>)
 80053de:	fba3 1302 	umull	r1, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2164      	movs	r1, #100	; 0x64
 80053e6:	fb01 f303 	mul.w	r3, r1, r3
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	3332      	adds	r3, #50	; 0x32
 80053f0:	4a95      	ldr	r2, [pc, #596]	; (8005648 <UART_SetConfig+0x6f4>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053fc:	4498      	add	r8, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	469b      	mov	fp, r3
 8005402:	f04f 0c00 	mov.w	ip, #0
 8005406:	46d9      	mov	r9, fp
 8005408:	46e2      	mov	sl, ip
 800540a:	eb19 0309 	adds.w	r3, r9, r9
 800540e:	eb4a 040a 	adc.w	r4, sl, sl
 8005412:	4699      	mov	r9, r3
 8005414:	46a2      	mov	sl, r4
 8005416:	eb19 090b 	adds.w	r9, r9, fp
 800541a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800541e:	f04f 0100 	mov.w	r1, #0
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800542a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800542e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005432:	4689      	mov	r9, r1
 8005434:	4692      	mov	sl, r2
 8005436:	eb1b 0509 	adds.w	r5, fp, r9
 800543a:	eb4c 060a 	adc.w	r6, ip, sl
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4619      	mov	r1, r3
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	f04f 0400 	mov.w	r4, #0
 8005450:	0094      	lsls	r4, r2, #2
 8005452:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005456:	008b      	lsls	r3, r1, #2
 8005458:	461a      	mov	r2, r3
 800545a:	4623      	mov	r3, r4
 800545c:	4628      	mov	r0, r5
 800545e:	4631      	mov	r1, r6
 8005460:	f7fb fbfa 	bl	8000c58 <__aeabi_uldivmod>
 8005464:	4603      	mov	r3, r0
 8005466:	460c      	mov	r4, r1
 8005468:	461a      	mov	r2, r3
 800546a:	4b77      	ldr	r3, [pc, #476]	; (8005648 <UART_SetConfig+0x6f4>)
 800546c:	fba3 1302 	umull	r1, r3, r3, r2
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	2164      	movs	r1, #100	; 0x64
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	3332      	adds	r3, #50	; 0x32
 800547e:	4a72      	ldr	r2, [pc, #456]	; (8005648 <UART_SetConfig+0x6f4>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	f003 020f 	and.w	r2, r3, #15
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4442      	add	r2, r8
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	e0d0      	b.n	8005636 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005494:	f7fe fa82 	bl	800399c <HAL_RCC_GetPCLK1Freq>
 8005498:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	469a      	mov	sl, r3
 800549e:	f04f 0b00 	mov.w	fp, #0
 80054a2:	46d0      	mov	r8, sl
 80054a4:	46d9      	mov	r9, fp
 80054a6:	eb18 0308 	adds.w	r3, r8, r8
 80054aa:	eb49 0409 	adc.w	r4, r9, r9
 80054ae:	4698      	mov	r8, r3
 80054b0:	46a1      	mov	r9, r4
 80054b2:	eb18 080a 	adds.w	r8, r8, sl
 80054b6:	eb49 090b 	adc.w	r9, r9, fp
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054ce:	4688      	mov	r8, r1
 80054d0:	4691      	mov	r9, r2
 80054d2:	eb1a 0508 	adds.w	r5, sl, r8
 80054d6:	eb4b 0609 	adc.w	r6, fp, r9
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4619      	mov	r1, r3
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	f04f 0400 	mov.w	r4, #0
 80054ec:	0094      	lsls	r4, r2, #2
 80054ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054f2:	008b      	lsls	r3, r1, #2
 80054f4:	461a      	mov	r2, r3
 80054f6:	4623      	mov	r3, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	4631      	mov	r1, r6
 80054fc:	f7fb fbac 	bl	8000c58 <__aeabi_uldivmod>
 8005500:	4603      	mov	r3, r0
 8005502:	460c      	mov	r4, r1
 8005504:	461a      	mov	r2, r3
 8005506:	4b50      	ldr	r3, [pc, #320]	; (8005648 <UART_SetConfig+0x6f4>)
 8005508:	fba3 2302 	umull	r2, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	469b      	mov	fp, r3
 8005516:	f04f 0c00 	mov.w	ip, #0
 800551a:	46d9      	mov	r9, fp
 800551c:	46e2      	mov	sl, ip
 800551e:	eb19 0309 	adds.w	r3, r9, r9
 8005522:	eb4a 040a 	adc.w	r4, sl, sl
 8005526:	4699      	mov	r9, r3
 8005528:	46a2      	mov	sl, r4
 800552a:	eb19 090b 	adds.w	r9, r9, fp
 800552e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005532:	f04f 0100 	mov.w	r1, #0
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800553e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005542:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005546:	4689      	mov	r9, r1
 8005548:	4692      	mov	sl, r2
 800554a:	eb1b 0509 	adds.w	r5, fp, r9
 800554e:	eb4c 060a 	adc.w	r6, ip, sl
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4619      	mov	r1, r3
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	f04f 0400 	mov.w	r4, #0
 8005564:	0094      	lsls	r4, r2, #2
 8005566:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800556a:	008b      	lsls	r3, r1, #2
 800556c:	461a      	mov	r2, r3
 800556e:	4623      	mov	r3, r4
 8005570:	4628      	mov	r0, r5
 8005572:	4631      	mov	r1, r6
 8005574:	f7fb fb70 	bl	8000c58 <__aeabi_uldivmod>
 8005578:	4603      	mov	r3, r0
 800557a:	460c      	mov	r4, r1
 800557c:	461a      	mov	r2, r3
 800557e:	4b32      	ldr	r3, [pc, #200]	; (8005648 <UART_SetConfig+0x6f4>)
 8005580:	fba3 1302 	umull	r1, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	2164      	movs	r1, #100	; 0x64
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	3332      	adds	r3, #50	; 0x32
 8005592:	4a2d      	ldr	r2, [pc, #180]	; (8005648 <UART_SetConfig+0x6f4>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800559e:	4498      	add	r8, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	469b      	mov	fp, r3
 80055a4:	f04f 0c00 	mov.w	ip, #0
 80055a8:	46d9      	mov	r9, fp
 80055aa:	46e2      	mov	sl, ip
 80055ac:	eb19 0309 	adds.w	r3, r9, r9
 80055b0:	eb4a 040a 	adc.w	r4, sl, sl
 80055b4:	4699      	mov	r9, r3
 80055b6:	46a2      	mov	sl, r4
 80055b8:	eb19 090b 	adds.w	r9, r9, fp
 80055bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055d4:	4689      	mov	r9, r1
 80055d6:	4692      	mov	sl, r2
 80055d8:	eb1b 0509 	adds.w	r5, fp, r9
 80055dc:	eb4c 060a 	adc.w	r6, ip, sl
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4619      	mov	r1, r3
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	f04f 0400 	mov.w	r4, #0
 80055f2:	0094      	lsls	r4, r2, #2
 80055f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055f8:	008b      	lsls	r3, r1, #2
 80055fa:	461a      	mov	r2, r3
 80055fc:	4623      	mov	r3, r4
 80055fe:	4628      	mov	r0, r5
 8005600:	4631      	mov	r1, r6
 8005602:	f7fb fb29 	bl	8000c58 <__aeabi_uldivmod>
 8005606:	4603      	mov	r3, r0
 8005608:	460c      	mov	r4, r1
 800560a:	461a      	mov	r2, r3
 800560c:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <UART_SetConfig+0x6f4>)
 800560e:	fba3 1302 	umull	r1, r3, r3, r2
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2164      	movs	r1, #100	; 0x64
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	3332      	adds	r3, #50	; 0x32
 8005620:	4a09      	ldr	r2, [pc, #36]	; (8005648 <UART_SetConfig+0x6f4>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	f003 020f 	and.w	r2, r3, #15
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4442      	add	r2, r8
 8005632:	609a      	str	r2, [r3, #8]
}
 8005634:	e7ff      	b.n	8005636 <UART_SetConfig+0x6e2>
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005640:	40011000 	.word	0x40011000
 8005644:	40011400 	.word	0x40011400
 8005648:	51eb851f 	.word	0x51eb851f

0800564c <__errno>:
 800564c:	4b01      	ldr	r3, [pc, #4]	; (8005654 <__errno+0x8>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	2000000c 	.word	0x2000000c

08005658 <__libc_init_array>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	4e0d      	ldr	r6, [pc, #52]	; (8005690 <__libc_init_array+0x38>)
 800565c:	4c0d      	ldr	r4, [pc, #52]	; (8005694 <__libc_init_array+0x3c>)
 800565e:	1ba4      	subs	r4, r4, r6
 8005660:	10a4      	asrs	r4, r4, #2
 8005662:	2500      	movs	r5, #0
 8005664:	42a5      	cmp	r5, r4
 8005666:	d109      	bne.n	800567c <__libc_init_array+0x24>
 8005668:	4e0b      	ldr	r6, [pc, #44]	; (8005698 <__libc_init_array+0x40>)
 800566a:	4c0c      	ldr	r4, [pc, #48]	; (800569c <__libc_init_array+0x44>)
 800566c:	f002 f85c 	bl	8007728 <_init>
 8005670:	1ba4      	subs	r4, r4, r6
 8005672:	10a4      	asrs	r4, r4, #2
 8005674:	2500      	movs	r5, #0
 8005676:	42a5      	cmp	r5, r4
 8005678:	d105      	bne.n	8005686 <__libc_init_array+0x2e>
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005680:	4798      	blx	r3
 8005682:	3501      	adds	r5, #1
 8005684:	e7ee      	b.n	8005664 <__libc_init_array+0xc>
 8005686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800568a:	4798      	blx	r3
 800568c:	3501      	adds	r5, #1
 800568e:	e7f2      	b.n	8005676 <__libc_init_array+0x1e>
 8005690:	08007a28 	.word	0x08007a28
 8005694:	08007a28 	.word	0x08007a28
 8005698:	08007a28 	.word	0x08007a28
 800569c:	08007a2c 	.word	0x08007a2c

080056a0 <memset>:
 80056a0:	4402      	add	r2, r0
 80056a2:	4603      	mov	r3, r0
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d100      	bne.n	80056aa <memset+0xa>
 80056a8:	4770      	bx	lr
 80056aa:	f803 1b01 	strb.w	r1, [r3], #1
 80056ae:	e7f9      	b.n	80056a4 <memset+0x4>

080056b0 <__cvt>:
 80056b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	ec55 4b10 	vmov	r4, r5, d0
 80056b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80056ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056be:	2d00      	cmp	r5, #0
 80056c0:	460e      	mov	r6, r1
 80056c2:	4691      	mov	r9, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	bfb8      	it	lt
 80056c8:	4622      	movlt	r2, r4
 80056ca:	462b      	mov	r3, r5
 80056cc:	f027 0720 	bic.w	r7, r7, #32
 80056d0:	bfbb      	ittet	lt
 80056d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056d6:	461d      	movlt	r5, r3
 80056d8:	2300      	movge	r3, #0
 80056da:	232d      	movlt	r3, #45	; 0x2d
 80056dc:	bfb8      	it	lt
 80056de:	4614      	movlt	r4, r2
 80056e0:	2f46      	cmp	r7, #70	; 0x46
 80056e2:	700b      	strb	r3, [r1, #0]
 80056e4:	d004      	beq.n	80056f0 <__cvt+0x40>
 80056e6:	2f45      	cmp	r7, #69	; 0x45
 80056e8:	d100      	bne.n	80056ec <__cvt+0x3c>
 80056ea:	3601      	adds	r6, #1
 80056ec:	2102      	movs	r1, #2
 80056ee:	e000      	b.n	80056f2 <__cvt+0x42>
 80056f0:	2103      	movs	r1, #3
 80056f2:	ab03      	add	r3, sp, #12
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	ab02      	add	r3, sp, #8
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4632      	mov	r2, r6
 80056fc:	4653      	mov	r3, sl
 80056fe:	ec45 4b10 	vmov	d0, r4, r5
 8005702:	f000 fcdd 	bl	80060c0 <_dtoa_r>
 8005706:	2f47      	cmp	r7, #71	; 0x47
 8005708:	4680      	mov	r8, r0
 800570a:	d102      	bne.n	8005712 <__cvt+0x62>
 800570c:	f019 0f01 	tst.w	r9, #1
 8005710:	d026      	beq.n	8005760 <__cvt+0xb0>
 8005712:	2f46      	cmp	r7, #70	; 0x46
 8005714:	eb08 0906 	add.w	r9, r8, r6
 8005718:	d111      	bne.n	800573e <__cvt+0x8e>
 800571a:	f898 3000 	ldrb.w	r3, [r8]
 800571e:	2b30      	cmp	r3, #48	; 0x30
 8005720:	d10a      	bne.n	8005738 <__cvt+0x88>
 8005722:	2200      	movs	r2, #0
 8005724:	2300      	movs	r3, #0
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fb f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800572e:	b918      	cbnz	r0, 8005738 <__cvt+0x88>
 8005730:	f1c6 0601 	rsb	r6, r6, #1
 8005734:	f8ca 6000 	str.w	r6, [sl]
 8005738:	f8da 3000 	ldr.w	r3, [sl]
 800573c:	4499      	add	r9, r3
 800573e:	2200      	movs	r2, #0
 8005740:	2300      	movs	r3, #0
 8005742:	4620      	mov	r0, r4
 8005744:	4629      	mov	r1, r5
 8005746:	f7fb f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800574a:	b938      	cbnz	r0, 800575c <__cvt+0xac>
 800574c:	2230      	movs	r2, #48	; 0x30
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	454b      	cmp	r3, r9
 8005752:	d205      	bcs.n	8005760 <__cvt+0xb0>
 8005754:	1c59      	adds	r1, r3, #1
 8005756:	9103      	str	r1, [sp, #12]
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e7f8      	b.n	800574e <__cvt+0x9e>
 800575c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005764:	eba3 0308 	sub.w	r3, r3, r8
 8005768:	4640      	mov	r0, r8
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	b004      	add	sp, #16
 800576e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005772 <__exponent>:
 8005772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005774:	2900      	cmp	r1, #0
 8005776:	4604      	mov	r4, r0
 8005778:	bfba      	itte	lt
 800577a:	4249      	neglt	r1, r1
 800577c:	232d      	movlt	r3, #45	; 0x2d
 800577e:	232b      	movge	r3, #43	; 0x2b
 8005780:	2909      	cmp	r1, #9
 8005782:	f804 2b02 	strb.w	r2, [r4], #2
 8005786:	7043      	strb	r3, [r0, #1]
 8005788:	dd20      	ble.n	80057cc <__exponent+0x5a>
 800578a:	f10d 0307 	add.w	r3, sp, #7
 800578e:	461f      	mov	r7, r3
 8005790:	260a      	movs	r6, #10
 8005792:	fb91 f5f6 	sdiv	r5, r1, r6
 8005796:	fb06 1115 	mls	r1, r6, r5, r1
 800579a:	3130      	adds	r1, #48	; 0x30
 800579c:	2d09      	cmp	r5, #9
 800579e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057a2:	f103 32ff 	add.w	r2, r3, #4294967295
 80057a6:	4629      	mov	r1, r5
 80057a8:	dc09      	bgt.n	80057be <__exponent+0x4c>
 80057aa:	3130      	adds	r1, #48	; 0x30
 80057ac:	3b02      	subs	r3, #2
 80057ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057b2:	42bb      	cmp	r3, r7
 80057b4:	4622      	mov	r2, r4
 80057b6:	d304      	bcc.n	80057c2 <__exponent+0x50>
 80057b8:	1a10      	subs	r0, r2, r0
 80057ba:	b003      	add	sp, #12
 80057bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057be:	4613      	mov	r3, r2
 80057c0:	e7e7      	b.n	8005792 <__exponent+0x20>
 80057c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057c6:	f804 2b01 	strb.w	r2, [r4], #1
 80057ca:	e7f2      	b.n	80057b2 <__exponent+0x40>
 80057cc:	2330      	movs	r3, #48	; 0x30
 80057ce:	4419      	add	r1, r3
 80057d0:	7083      	strb	r3, [r0, #2]
 80057d2:	1d02      	adds	r2, r0, #4
 80057d4:	70c1      	strb	r1, [r0, #3]
 80057d6:	e7ef      	b.n	80057b8 <__exponent+0x46>

080057d8 <_printf_float>:
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	b08d      	sub	sp, #52	; 0x34
 80057de:	460c      	mov	r4, r1
 80057e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80057e4:	4616      	mov	r6, r2
 80057e6:	461f      	mov	r7, r3
 80057e8:	4605      	mov	r5, r0
 80057ea:	f001 fa21 	bl	8006c30 <_localeconv_r>
 80057ee:	6803      	ldr	r3, [r0, #0]
 80057f0:	9304      	str	r3, [sp, #16]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fa fcf4 	bl	80001e0 <strlen>
 80057f8:	2300      	movs	r3, #0
 80057fa:	930a      	str	r3, [sp, #40]	; 0x28
 80057fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005800:	9005      	str	r0, [sp, #20]
 8005802:	3307      	adds	r3, #7
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	f103 0208 	add.w	r2, r3, #8
 800580c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005810:	f8d4 b000 	ldr.w	fp, [r4]
 8005814:	f8c8 2000 	str.w	r2, [r8]
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005820:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005824:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005828:	9307      	str	r3, [sp, #28]
 800582a:	f8cd 8018 	str.w	r8, [sp, #24]
 800582e:	f04f 32ff 	mov.w	r2, #4294967295
 8005832:	4ba7      	ldr	r3, [pc, #668]	; (8005ad0 <_printf_float+0x2f8>)
 8005834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005838:	f7fb f980 	bl	8000b3c <__aeabi_dcmpun>
 800583c:	bb70      	cbnz	r0, 800589c <_printf_float+0xc4>
 800583e:	f04f 32ff 	mov.w	r2, #4294967295
 8005842:	4ba3      	ldr	r3, [pc, #652]	; (8005ad0 <_printf_float+0x2f8>)
 8005844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005848:	f7fb f95a 	bl	8000b00 <__aeabi_dcmple>
 800584c:	bb30      	cbnz	r0, 800589c <_printf_float+0xc4>
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	4640      	mov	r0, r8
 8005854:	4649      	mov	r1, r9
 8005856:	f7fb f949 	bl	8000aec <__aeabi_dcmplt>
 800585a:	b110      	cbz	r0, 8005862 <_printf_float+0x8a>
 800585c:	232d      	movs	r3, #45	; 0x2d
 800585e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005862:	4a9c      	ldr	r2, [pc, #624]	; (8005ad4 <_printf_float+0x2fc>)
 8005864:	4b9c      	ldr	r3, [pc, #624]	; (8005ad8 <_printf_float+0x300>)
 8005866:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800586a:	bf8c      	ite	hi
 800586c:	4690      	movhi	r8, r2
 800586e:	4698      	movls	r8, r3
 8005870:	2303      	movs	r3, #3
 8005872:	f02b 0204 	bic.w	r2, fp, #4
 8005876:	6123      	str	r3, [r4, #16]
 8005878:	6022      	str	r2, [r4, #0]
 800587a:	f04f 0900 	mov.w	r9, #0
 800587e:	9700      	str	r7, [sp, #0]
 8005880:	4633      	mov	r3, r6
 8005882:	aa0b      	add	r2, sp, #44	; 0x2c
 8005884:	4621      	mov	r1, r4
 8005886:	4628      	mov	r0, r5
 8005888:	f000 f9e6 	bl	8005c58 <_printf_common>
 800588c:	3001      	adds	r0, #1
 800588e:	f040 808d 	bne.w	80059ac <_printf_float+0x1d4>
 8005892:	f04f 30ff 	mov.w	r0, #4294967295
 8005896:	b00d      	add	sp, #52	; 0x34
 8005898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	f7fb f94a 	bl	8000b3c <__aeabi_dcmpun>
 80058a8:	b110      	cbz	r0, 80058b0 <_printf_float+0xd8>
 80058aa:	4a8c      	ldr	r2, [pc, #560]	; (8005adc <_printf_float+0x304>)
 80058ac:	4b8c      	ldr	r3, [pc, #560]	; (8005ae0 <_printf_float+0x308>)
 80058ae:	e7da      	b.n	8005866 <_printf_float+0x8e>
 80058b0:	6861      	ldr	r1, [r4, #4]
 80058b2:	1c4b      	adds	r3, r1, #1
 80058b4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80058b8:	a80a      	add	r0, sp, #40	; 0x28
 80058ba:	d13e      	bne.n	800593a <_printf_float+0x162>
 80058bc:	2306      	movs	r3, #6
 80058be:	6063      	str	r3, [r4, #4]
 80058c0:	2300      	movs	r3, #0
 80058c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80058c6:	ab09      	add	r3, sp, #36	; 0x24
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	ec49 8b10 	vmov	d0, r8, r9
 80058ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058d2:	6022      	str	r2, [r4, #0]
 80058d4:	f8cd a004 	str.w	sl, [sp, #4]
 80058d8:	6861      	ldr	r1, [r4, #4]
 80058da:	4628      	mov	r0, r5
 80058dc:	f7ff fee8 	bl	80056b0 <__cvt>
 80058e0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80058e4:	2b47      	cmp	r3, #71	; 0x47
 80058e6:	4680      	mov	r8, r0
 80058e8:	d109      	bne.n	80058fe <_printf_float+0x126>
 80058ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ec:	1cd8      	adds	r0, r3, #3
 80058ee:	db02      	blt.n	80058f6 <_printf_float+0x11e>
 80058f0:	6862      	ldr	r2, [r4, #4]
 80058f2:	4293      	cmp	r3, r2
 80058f4:	dd47      	ble.n	8005986 <_printf_float+0x1ae>
 80058f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80058fa:	fa5f fa8a 	uxtb.w	sl, sl
 80058fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005902:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005904:	d824      	bhi.n	8005950 <_printf_float+0x178>
 8005906:	3901      	subs	r1, #1
 8005908:	4652      	mov	r2, sl
 800590a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800590e:	9109      	str	r1, [sp, #36]	; 0x24
 8005910:	f7ff ff2f 	bl	8005772 <__exponent>
 8005914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005916:	1813      	adds	r3, r2, r0
 8005918:	2a01      	cmp	r2, #1
 800591a:	4681      	mov	r9, r0
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	dc02      	bgt.n	8005926 <_printf_float+0x14e>
 8005920:	6822      	ldr	r2, [r4, #0]
 8005922:	07d1      	lsls	r1, r2, #31
 8005924:	d501      	bpl.n	800592a <_printf_float+0x152>
 8005926:	3301      	adds	r3, #1
 8005928:	6123      	str	r3, [r4, #16]
 800592a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0a5      	beq.n	800587e <_printf_float+0xa6>
 8005932:	232d      	movs	r3, #45	; 0x2d
 8005934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005938:	e7a1      	b.n	800587e <_printf_float+0xa6>
 800593a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800593e:	f000 8177 	beq.w	8005c30 <_printf_float+0x458>
 8005942:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005946:	d1bb      	bne.n	80058c0 <_printf_float+0xe8>
 8005948:	2900      	cmp	r1, #0
 800594a:	d1b9      	bne.n	80058c0 <_printf_float+0xe8>
 800594c:	2301      	movs	r3, #1
 800594e:	e7b6      	b.n	80058be <_printf_float+0xe6>
 8005950:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005954:	d119      	bne.n	800598a <_printf_float+0x1b2>
 8005956:	2900      	cmp	r1, #0
 8005958:	6863      	ldr	r3, [r4, #4]
 800595a:	dd0c      	ble.n	8005976 <_printf_float+0x19e>
 800595c:	6121      	str	r1, [r4, #16]
 800595e:	b913      	cbnz	r3, 8005966 <_printf_float+0x18e>
 8005960:	6822      	ldr	r2, [r4, #0]
 8005962:	07d2      	lsls	r2, r2, #31
 8005964:	d502      	bpl.n	800596c <_printf_float+0x194>
 8005966:	3301      	adds	r3, #1
 8005968:	440b      	add	r3, r1
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005970:	f04f 0900 	mov.w	r9, #0
 8005974:	e7d9      	b.n	800592a <_printf_float+0x152>
 8005976:	b913      	cbnz	r3, 800597e <_printf_float+0x1a6>
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	07d0      	lsls	r0, r2, #31
 800597c:	d501      	bpl.n	8005982 <_printf_float+0x1aa>
 800597e:	3302      	adds	r3, #2
 8005980:	e7f3      	b.n	800596a <_printf_float+0x192>
 8005982:	2301      	movs	r3, #1
 8005984:	e7f1      	b.n	800596a <_printf_float+0x192>
 8005986:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800598a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800598e:	4293      	cmp	r3, r2
 8005990:	db05      	blt.n	800599e <_printf_float+0x1c6>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	6123      	str	r3, [r4, #16]
 8005996:	07d1      	lsls	r1, r2, #31
 8005998:	d5e8      	bpl.n	800596c <_printf_float+0x194>
 800599a:	3301      	adds	r3, #1
 800599c:	e7e5      	b.n	800596a <_printf_float+0x192>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfd4      	ite	le
 80059a2:	f1c3 0302 	rsble	r3, r3, #2
 80059a6:	2301      	movgt	r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	e7de      	b.n	800596a <_printf_float+0x192>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	055a      	lsls	r2, r3, #21
 80059b0:	d407      	bmi.n	80059c2 <_printf_float+0x1ea>
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	4642      	mov	r2, r8
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	d12b      	bne.n	8005a18 <_printf_float+0x240>
 80059c0:	e767      	b.n	8005892 <_printf_float+0xba>
 80059c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80059c6:	f240 80dc 	bls.w	8005b82 <_printf_float+0x3aa>
 80059ca:	2200      	movs	r2, #0
 80059cc:	2300      	movs	r3, #0
 80059ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059d2:	f7fb f881 	bl	8000ad8 <__aeabi_dcmpeq>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d033      	beq.n	8005a42 <_printf_float+0x26a>
 80059da:	2301      	movs	r3, #1
 80059dc:	4a41      	ldr	r2, [pc, #260]	; (8005ae4 <_printf_float+0x30c>)
 80059de:	4631      	mov	r1, r6
 80059e0:	4628      	mov	r0, r5
 80059e2:	47b8      	blx	r7
 80059e4:	3001      	adds	r0, #1
 80059e6:	f43f af54 	beq.w	8005892 <_printf_float+0xba>
 80059ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059ee:	429a      	cmp	r2, r3
 80059f0:	db02      	blt.n	80059f8 <_printf_float+0x220>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	07d8      	lsls	r0, r3, #31
 80059f6:	d50f      	bpl.n	8005a18 <_printf_float+0x240>
 80059f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f af45 	beq.w	8005892 <_printf_float+0xba>
 8005a08:	f04f 0800 	mov.w	r8, #0
 8005a0c:	f104 091a 	add.w	r9, r4, #26
 8005a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a12:	3b01      	subs	r3, #1
 8005a14:	4543      	cmp	r3, r8
 8005a16:	dc09      	bgt.n	8005a2c <_printf_float+0x254>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	079b      	lsls	r3, r3, #30
 8005a1c:	f100 8103 	bmi.w	8005c26 <_printf_float+0x44e>
 8005a20:	68e0      	ldr	r0, [r4, #12]
 8005a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a24:	4298      	cmp	r0, r3
 8005a26:	bfb8      	it	lt
 8005a28:	4618      	movlt	r0, r3
 8005a2a:	e734      	b.n	8005896 <_printf_float+0xbe>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	464a      	mov	r2, r9
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af2b 	beq.w	8005892 <_printf_float+0xba>
 8005a3c:	f108 0801 	add.w	r8, r8, #1
 8005a40:	e7e6      	b.n	8005a10 <_printf_float+0x238>
 8005a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc2b      	bgt.n	8005aa0 <_printf_float+0x2c8>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <_printf_float+0x30c>)
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f af1d 	beq.w	8005892 <_printf_float+0xba>
 8005a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5a:	b923      	cbnz	r3, 8005a66 <_printf_float+0x28e>
 8005a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5e:	b913      	cbnz	r3, 8005a66 <_printf_float+0x28e>
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d5d8      	bpl.n	8005a18 <_printf_float+0x240>
 8005a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b8      	blx	r7
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f af0e 	beq.w	8005892 <_printf_float+0xba>
 8005a76:	f04f 0900 	mov.w	r9, #0
 8005a7a:	f104 0a1a 	add.w	sl, r4, #26
 8005a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a80:	425b      	negs	r3, r3
 8005a82:	454b      	cmp	r3, r9
 8005a84:	dc01      	bgt.n	8005a8a <_printf_float+0x2b2>
 8005a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a88:	e794      	b.n	80059b4 <_printf_float+0x1dc>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4628      	mov	r0, r5
 8005a92:	47b8      	blx	r7
 8005a94:	3001      	adds	r0, #1
 8005a96:	f43f aefc 	beq.w	8005892 <_printf_float+0xba>
 8005a9a:	f109 0901 	add.w	r9, r9, #1
 8005a9e:	e7ee      	b.n	8005a7e <_printf_float+0x2a6>
 8005aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	bfa8      	it	ge
 8005aa8:	461a      	movge	r2, r3
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	4691      	mov	r9, r2
 8005aae:	dd07      	ble.n	8005ac0 <_printf_float+0x2e8>
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	4631      	mov	r1, r6
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f aee9 	beq.w	8005892 <_printf_float+0xba>
 8005ac0:	f104 031a 	add.w	r3, r4, #26
 8005ac4:	f04f 0b00 	mov.w	fp, #0
 8005ac8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005acc:	9306      	str	r3, [sp, #24]
 8005ace:	e015      	b.n	8005afc <_printf_float+0x324>
 8005ad0:	7fefffff 	.word	0x7fefffff
 8005ad4:	080077c8 	.word	0x080077c8
 8005ad8:	080077c4 	.word	0x080077c4
 8005adc:	080077d0 	.word	0x080077d0
 8005ae0:	080077cc 	.word	0x080077cc
 8005ae4:	080077d4 	.word	0x080077d4
 8005ae8:	2301      	movs	r3, #1
 8005aea:	9a06      	ldr	r2, [sp, #24]
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f aecd 	beq.w	8005892 <_printf_float+0xba>
 8005af8:	f10b 0b01 	add.w	fp, fp, #1
 8005afc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b00:	ebaa 0309 	sub.w	r3, sl, r9
 8005b04:	455b      	cmp	r3, fp
 8005b06:	dcef      	bgt.n	8005ae8 <_printf_float+0x310>
 8005b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	44d0      	add	r8, sl
 8005b10:	db15      	blt.n	8005b3e <_printf_float+0x366>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	07da      	lsls	r2, r3, #31
 8005b16:	d412      	bmi.n	8005b3e <_printf_float+0x366>
 8005b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b1c:	eba3 020a 	sub.w	r2, r3, sl
 8005b20:	eba3 0a01 	sub.w	sl, r3, r1
 8005b24:	4592      	cmp	sl, r2
 8005b26:	bfa8      	it	ge
 8005b28:	4692      	movge	sl, r2
 8005b2a:	f1ba 0f00 	cmp.w	sl, #0
 8005b2e:	dc0e      	bgt.n	8005b4e <_printf_float+0x376>
 8005b30:	f04f 0800 	mov.w	r8, #0
 8005b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b38:	f104 091a 	add.w	r9, r4, #26
 8005b3c:	e019      	b.n	8005b72 <_printf_float+0x39a>
 8005b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d1e5      	bne.n	8005b18 <_printf_float+0x340>
 8005b4c:	e6a1      	b.n	8005892 <_printf_float+0xba>
 8005b4e:	4653      	mov	r3, sl
 8005b50:	4642      	mov	r2, r8
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d1e9      	bne.n	8005b30 <_printf_float+0x358>
 8005b5c:	e699      	b.n	8005892 <_printf_float+0xba>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	464a      	mov	r2, r9
 8005b62:	4631      	mov	r1, r6
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b8      	blx	r7
 8005b68:	3001      	adds	r0, #1
 8005b6a:	f43f ae92 	beq.w	8005892 <_printf_float+0xba>
 8005b6e:	f108 0801 	add.w	r8, r8, #1
 8005b72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	eba3 030a 	sub.w	r3, r3, sl
 8005b7c:	4543      	cmp	r3, r8
 8005b7e:	dcee      	bgt.n	8005b5e <_printf_float+0x386>
 8005b80:	e74a      	b.n	8005a18 <_printf_float+0x240>
 8005b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b84:	2a01      	cmp	r2, #1
 8005b86:	dc01      	bgt.n	8005b8c <_printf_float+0x3b4>
 8005b88:	07db      	lsls	r3, r3, #31
 8005b8a:	d53a      	bpl.n	8005c02 <_printf_float+0x42a>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4642      	mov	r2, r8
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	f43f ae7b 	beq.w	8005892 <_printf_float+0xba>
 8005b9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ba0:	4631      	mov	r1, r6
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f108 0801 	add.w	r8, r8, #1
 8005bac:	f43f ae71 	beq.w	8005892 <_printf_float+0xba>
 8005bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f103 3aff 	add.w	sl, r3, #4294967295
 8005bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f7fa ff8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bc2:	b9c8      	cbnz	r0, 8005bf8 <_printf_float+0x420>
 8005bc4:	4653      	mov	r3, sl
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d10e      	bne.n	8005bf0 <_printf_float+0x418>
 8005bd2:	e65e      	b.n	8005892 <_printf_float+0xba>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f ae57 	beq.w	8005892 <_printf_float+0xba>
 8005be4:	f108 0801 	add.w	r8, r8, #1
 8005be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bea:	3b01      	subs	r3, #1
 8005bec:	4543      	cmp	r3, r8
 8005bee:	dcf1      	bgt.n	8005bd4 <_printf_float+0x3fc>
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bf6:	e6de      	b.n	80059b6 <_printf_float+0x1de>
 8005bf8:	f04f 0800 	mov.w	r8, #0
 8005bfc:	f104 0a1a 	add.w	sl, r4, #26
 8005c00:	e7f2      	b.n	8005be8 <_printf_float+0x410>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e7df      	b.n	8005bc6 <_printf_float+0x3ee>
 8005c06:	2301      	movs	r3, #1
 8005c08:	464a      	mov	r2, r9
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f ae3e 	beq.w	8005892 <_printf_float+0xba>
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	68e3      	ldr	r3, [r4, #12]
 8005c1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c1e:	1a9b      	subs	r3, r3, r2
 8005c20:	4543      	cmp	r3, r8
 8005c22:	dcf0      	bgt.n	8005c06 <_printf_float+0x42e>
 8005c24:	e6fc      	b.n	8005a20 <_printf_float+0x248>
 8005c26:	f04f 0800 	mov.w	r8, #0
 8005c2a:	f104 0919 	add.w	r9, r4, #25
 8005c2e:	e7f4      	b.n	8005c1a <_printf_float+0x442>
 8005c30:	2900      	cmp	r1, #0
 8005c32:	f43f ae8b 	beq.w	800594c <_printf_float+0x174>
 8005c36:	2300      	movs	r3, #0
 8005c38:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005c3c:	ab09      	add	r3, sp, #36	; 0x24
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	ec49 8b10 	vmov	d0, r8, r9
 8005c44:	6022      	str	r2, [r4, #0]
 8005c46:	f8cd a004 	str.w	sl, [sp, #4]
 8005c4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f7ff fd2e 	bl	80056b0 <__cvt>
 8005c54:	4680      	mov	r8, r0
 8005c56:	e648      	b.n	80058ea <_printf_float+0x112>

08005c58 <_printf_common>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	4691      	mov	r9, r2
 8005c5e:	461f      	mov	r7, r3
 8005c60:	688a      	ldr	r2, [r1, #8]
 8005c62:	690b      	ldr	r3, [r1, #16]
 8005c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	bfb8      	it	lt
 8005c6c:	4613      	movlt	r3, r2
 8005c6e:	f8c9 3000 	str.w	r3, [r9]
 8005c72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c76:	4606      	mov	r6, r0
 8005c78:	460c      	mov	r4, r1
 8005c7a:	b112      	cbz	r2, 8005c82 <_printf_common+0x2a>
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f8c9 3000 	str.w	r3, [r9]
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	0699      	lsls	r1, r3, #26
 8005c86:	bf42      	ittt	mi
 8005c88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c8c:	3302      	addmi	r3, #2
 8005c8e:	f8c9 3000 	strmi.w	r3, [r9]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	f015 0506 	ands.w	r5, r5, #6
 8005c98:	d107      	bne.n	8005caa <_printf_common+0x52>
 8005c9a:	f104 0a19 	add.w	sl, r4, #25
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	42ab      	cmp	r3, r5
 8005ca8:	dc28      	bgt.n	8005cfc <_printf_common+0xa4>
 8005caa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	3300      	adds	r3, #0
 8005cb2:	bf18      	it	ne
 8005cb4:	2301      	movne	r3, #1
 8005cb6:	0692      	lsls	r2, r2, #26
 8005cb8:	d42d      	bmi.n	8005d16 <_printf_common+0xbe>
 8005cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cbe:	4639      	mov	r1, r7
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	47c0      	blx	r8
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d020      	beq.n	8005d0a <_printf_common+0xb2>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	68e5      	ldr	r5, [r4, #12]
 8005ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8005cd0:	f003 0306 	and.w	r3, r3, #6
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	bf08      	it	eq
 8005cd8:	1aad      	subeq	r5, r5, r2
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	6922      	ldr	r2, [r4, #16]
 8005cde:	bf0c      	ite	eq
 8005ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce4:	2500      	movne	r5, #0
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	bfc4      	itt	gt
 8005cea:	1a9b      	subgt	r3, r3, r2
 8005cec:	18ed      	addgt	r5, r5, r3
 8005cee:	f04f 0900 	mov.w	r9, #0
 8005cf2:	341a      	adds	r4, #26
 8005cf4:	454d      	cmp	r5, r9
 8005cf6:	d11a      	bne.n	8005d2e <_printf_common+0xd6>
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e008      	b.n	8005d0e <_printf_common+0xb6>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	4652      	mov	r2, sl
 8005d00:	4639      	mov	r1, r7
 8005d02:	4630      	mov	r0, r6
 8005d04:	47c0      	blx	r8
 8005d06:	3001      	adds	r0, #1
 8005d08:	d103      	bne.n	8005d12 <_printf_common+0xba>
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d12:	3501      	adds	r5, #1
 8005d14:	e7c3      	b.n	8005c9e <_printf_common+0x46>
 8005d16:	18e1      	adds	r1, r4, r3
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	2030      	movs	r0, #48	; 0x30
 8005d1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d20:	4422      	add	r2, r4
 8005d22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	e7c5      	b.n	8005cba <_printf_common+0x62>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4622      	mov	r2, r4
 8005d32:	4639      	mov	r1, r7
 8005d34:	4630      	mov	r0, r6
 8005d36:	47c0      	blx	r8
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d0e6      	beq.n	8005d0a <_printf_common+0xb2>
 8005d3c:	f109 0901 	add.w	r9, r9, #1
 8005d40:	e7d8      	b.n	8005cf4 <_printf_common+0x9c>
	...

08005d44 <_printf_i>:
 8005d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	7e09      	ldrb	r1, [r1, #24]
 8005d50:	b085      	sub	sp, #20
 8005d52:	296e      	cmp	r1, #110	; 0x6e
 8005d54:	4617      	mov	r7, r2
 8005d56:	4606      	mov	r6, r0
 8005d58:	4698      	mov	r8, r3
 8005d5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d5c:	f000 80b3 	beq.w	8005ec6 <_printf_i+0x182>
 8005d60:	d822      	bhi.n	8005da8 <_printf_i+0x64>
 8005d62:	2963      	cmp	r1, #99	; 0x63
 8005d64:	d036      	beq.n	8005dd4 <_printf_i+0x90>
 8005d66:	d80a      	bhi.n	8005d7e <_printf_i+0x3a>
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	f000 80b9 	beq.w	8005ee0 <_printf_i+0x19c>
 8005d6e:	2958      	cmp	r1, #88	; 0x58
 8005d70:	f000 8083 	beq.w	8005e7a <_printf_i+0x136>
 8005d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d7c:	e032      	b.n	8005de4 <_printf_i+0xa0>
 8005d7e:	2964      	cmp	r1, #100	; 0x64
 8005d80:	d001      	beq.n	8005d86 <_printf_i+0x42>
 8005d82:	2969      	cmp	r1, #105	; 0x69
 8005d84:	d1f6      	bne.n	8005d74 <_printf_i+0x30>
 8005d86:	6820      	ldr	r0, [r4, #0]
 8005d88:	6813      	ldr	r3, [r2, #0]
 8005d8a:	0605      	lsls	r5, r0, #24
 8005d8c:	f103 0104 	add.w	r1, r3, #4
 8005d90:	d52a      	bpl.n	8005de8 <_printf_i+0xa4>
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6011      	str	r1, [r2, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	da03      	bge.n	8005da2 <_printf_i+0x5e>
 8005d9a:	222d      	movs	r2, #45	; 0x2d
 8005d9c:	425b      	negs	r3, r3
 8005d9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005da2:	486f      	ldr	r0, [pc, #444]	; (8005f60 <_printf_i+0x21c>)
 8005da4:	220a      	movs	r2, #10
 8005da6:	e039      	b.n	8005e1c <_printf_i+0xd8>
 8005da8:	2973      	cmp	r1, #115	; 0x73
 8005daa:	f000 809d 	beq.w	8005ee8 <_printf_i+0x1a4>
 8005dae:	d808      	bhi.n	8005dc2 <_printf_i+0x7e>
 8005db0:	296f      	cmp	r1, #111	; 0x6f
 8005db2:	d020      	beq.n	8005df6 <_printf_i+0xb2>
 8005db4:	2970      	cmp	r1, #112	; 0x70
 8005db6:	d1dd      	bne.n	8005d74 <_printf_i+0x30>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	f043 0320 	orr.w	r3, r3, #32
 8005dbe:	6023      	str	r3, [r4, #0]
 8005dc0:	e003      	b.n	8005dca <_printf_i+0x86>
 8005dc2:	2975      	cmp	r1, #117	; 0x75
 8005dc4:	d017      	beq.n	8005df6 <_printf_i+0xb2>
 8005dc6:	2978      	cmp	r1, #120	; 0x78
 8005dc8:	d1d4      	bne.n	8005d74 <_printf_i+0x30>
 8005dca:	2378      	movs	r3, #120	; 0x78
 8005dcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dd0:	4864      	ldr	r0, [pc, #400]	; (8005f64 <_printf_i+0x220>)
 8005dd2:	e055      	b.n	8005e80 <_printf_i+0x13c>
 8005dd4:	6813      	ldr	r3, [r2, #0]
 8005dd6:	1d19      	adds	r1, r3, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6011      	str	r1, [r2, #0]
 8005ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005de4:	2301      	movs	r3, #1
 8005de6:	e08c      	b.n	8005f02 <_printf_i+0x1be>
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6011      	str	r1, [r2, #0]
 8005dec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005df0:	bf18      	it	ne
 8005df2:	b21b      	sxthne	r3, r3
 8005df4:	e7cf      	b.n	8005d96 <_printf_i+0x52>
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	1d18      	adds	r0, r3, #4
 8005dfc:	6010      	str	r0, [r2, #0]
 8005dfe:	0628      	lsls	r0, r5, #24
 8005e00:	d501      	bpl.n	8005e06 <_printf_i+0xc2>
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	e002      	b.n	8005e0c <_printf_i+0xc8>
 8005e06:	0668      	lsls	r0, r5, #25
 8005e08:	d5fb      	bpl.n	8005e02 <_printf_i+0xbe>
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	4854      	ldr	r0, [pc, #336]	; (8005f60 <_printf_i+0x21c>)
 8005e0e:	296f      	cmp	r1, #111	; 0x6f
 8005e10:	bf14      	ite	ne
 8005e12:	220a      	movne	r2, #10
 8005e14:	2208      	moveq	r2, #8
 8005e16:	2100      	movs	r1, #0
 8005e18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e1c:	6865      	ldr	r5, [r4, #4]
 8005e1e:	60a5      	str	r5, [r4, #8]
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	f2c0 8095 	blt.w	8005f50 <_printf_i+0x20c>
 8005e26:	6821      	ldr	r1, [r4, #0]
 8005e28:	f021 0104 	bic.w	r1, r1, #4
 8005e2c:	6021      	str	r1, [r4, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d13d      	bne.n	8005eae <_printf_i+0x16a>
 8005e32:	2d00      	cmp	r5, #0
 8005e34:	f040 808e 	bne.w	8005f54 <_printf_i+0x210>
 8005e38:	4665      	mov	r5, ip
 8005e3a:	2a08      	cmp	r2, #8
 8005e3c:	d10b      	bne.n	8005e56 <_printf_i+0x112>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	07db      	lsls	r3, r3, #31
 8005e42:	d508      	bpl.n	8005e56 <_printf_i+0x112>
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	bfde      	ittt	le
 8005e4c:	2330      	movle	r3, #48	; 0x30
 8005e4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e56:	ebac 0305 	sub.w	r3, ip, r5
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	f8cd 8000 	str.w	r8, [sp]
 8005e60:	463b      	mov	r3, r7
 8005e62:	aa03      	add	r2, sp, #12
 8005e64:	4621      	mov	r1, r4
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7ff fef6 	bl	8005c58 <_printf_common>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d14d      	bne.n	8005f0c <_printf_i+0x1c8>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	b005      	add	sp, #20
 8005e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e7a:	4839      	ldr	r0, [pc, #228]	; (8005f60 <_printf_i+0x21c>)
 8005e7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e80:	6813      	ldr	r3, [r2, #0]
 8005e82:	6821      	ldr	r1, [r4, #0]
 8005e84:	1d1d      	adds	r5, r3, #4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6015      	str	r5, [r2, #0]
 8005e8a:	060a      	lsls	r2, r1, #24
 8005e8c:	d50b      	bpl.n	8005ea6 <_printf_i+0x162>
 8005e8e:	07ca      	lsls	r2, r1, #31
 8005e90:	bf44      	itt	mi
 8005e92:	f041 0120 	orrmi.w	r1, r1, #32
 8005e96:	6021      	strmi	r1, [r4, #0]
 8005e98:	b91b      	cbnz	r3, 8005ea2 <_printf_i+0x15e>
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	f022 0220 	bic.w	r2, r2, #32
 8005ea0:	6022      	str	r2, [r4, #0]
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	e7b7      	b.n	8005e16 <_printf_i+0xd2>
 8005ea6:	064d      	lsls	r5, r1, #25
 8005ea8:	bf48      	it	mi
 8005eaa:	b29b      	uxthmi	r3, r3
 8005eac:	e7ef      	b.n	8005e8e <_printf_i+0x14a>
 8005eae:	4665      	mov	r5, ip
 8005eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eb4:	fb02 3311 	mls	r3, r2, r1, r3
 8005eb8:	5cc3      	ldrb	r3, [r0, r3]
 8005eba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	2900      	cmp	r1, #0
 8005ec2:	d1f5      	bne.n	8005eb0 <_printf_i+0x16c>
 8005ec4:	e7b9      	b.n	8005e3a <_printf_i+0xf6>
 8005ec6:	6813      	ldr	r3, [r2, #0]
 8005ec8:	6825      	ldr	r5, [r4, #0]
 8005eca:	6961      	ldr	r1, [r4, #20]
 8005ecc:	1d18      	adds	r0, r3, #4
 8005ece:	6010      	str	r0, [r2, #0]
 8005ed0:	0628      	lsls	r0, r5, #24
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	d501      	bpl.n	8005eda <_printf_i+0x196>
 8005ed6:	6019      	str	r1, [r3, #0]
 8005ed8:	e002      	b.n	8005ee0 <_printf_i+0x19c>
 8005eda:	066a      	lsls	r2, r5, #25
 8005edc:	d5fb      	bpl.n	8005ed6 <_printf_i+0x192>
 8005ede:	8019      	strh	r1, [r3, #0]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6123      	str	r3, [r4, #16]
 8005ee4:	4665      	mov	r5, ip
 8005ee6:	e7b9      	b.n	8005e5c <_printf_i+0x118>
 8005ee8:	6813      	ldr	r3, [r2, #0]
 8005eea:	1d19      	adds	r1, r3, #4
 8005eec:	6011      	str	r1, [r2, #0]
 8005eee:	681d      	ldr	r5, [r3, #0]
 8005ef0:	6862      	ldr	r2, [r4, #4]
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f7fa f97b 	bl	80001f0 <memchr>
 8005efa:	b108      	cbz	r0, 8005f00 <_printf_i+0x1bc>
 8005efc:	1b40      	subs	r0, r0, r5
 8005efe:	6060      	str	r0, [r4, #4]
 8005f00:	6863      	ldr	r3, [r4, #4]
 8005f02:	6123      	str	r3, [r4, #16]
 8005f04:	2300      	movs	r3, #0
 8005f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f0a:	e7a7      	b.n	8005e5c <_printf_i+0x118>
 8005f0c:	6923      	ldr	r3, [r4, #16]
 8005f0e:	462a      	mov	r2, r5
 8005f10:	4639      	mov	r1, r7
 8005f12:	4630      	mov	r0, r6
 8005f14:	47c0      	blx	r8
 8005f16:	3001      	adds	r0, #1
 8005f18:	d0aa      	beq.n	8005e70 <_printf_i+0x12c>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	079b      	lsls	r3, r3, #30
 8005f1e:	d413      	bmi.n	8005f48 <_printf_i+0x204>
 8005f20:	68e0      	ldr	r0, [r4, #12]
 8005f22:	9b03      	ldr	r3, [sp, #12]
 8005f24:	4298      	cmp	r0, r3
 8005f26:	bfb8      	it	lt
 8005f28:	4618      	movlt	r0, r3
 8005f2a:	e7a3      	b.n	8005e74 <_printf_i+0x130>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	464a      	mov	r2, r9
 8005f30:	4639      	mov	r1, r7
 8005f32:	4630      	mov	r0, r6
 8005f34:	47c0      	blx	r8
 8005f36:	3001      	adds	r0, #1
 8005f38:	d09a      	beq.n	8005e70 <_printf_i+0x12c>
 8005f3a:	3501      	adds	r5, #1
 8005f3c:	68e3      	ldr	r3, [r4, #12]
 8005f3e:	9a03      	ldr	r2, [sp, #12]
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	42ab      	cmp	r3, r5
 8005f44:	dcf2      	bgt.n	8005f2c <_printf_i+0x1e8>
 8005f46:	e7eb      	b.n	8005f20 <_printf_i+0x1dc>
 8005f48:	2500      	movs	r5, #0
 8005f4a:	f104 0919 	add.w	r9, r4, #25
 8005f4e:	e7f5      	b.n	8005f3c <_printf_i+0x1f8>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1ac      	bne.n	8005eae <_printf_i+0x16a>
 8005f54:	7803      	ldrb	r3, [r0, #0]
 8005f56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f5e:	e76c      	b.n	8005e3a <_printf_i+0xf6>
 8005f60:	080077d6 	.word	0x080077d6
 8005f64:	080077e7 	.word	0x080077e7

08005f68 <siprintf>:
 8005f68:	b40e      	push	{r1, r2, r3}
 8005f6a:	b500      	push	{lr}
 8005f6c:	b09c      	sub	sp, #112	; 0x70
 8005f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f70:	9002      	str	r0, [sp, #8]
 8005f72:	9006      	str	r0, [sp, #24]
 8005f74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f78:	4809      	ldr	r0, [pc, #36]	; (8005fa0 <siprintf+0x38>)
 8005f7a:	9107      	str	r1, [sp, #28]
 8005f7c:	9104      	str	r1, [sp, #16]
 8005f7e:	4909      	ldr	r1, [pc, #36]	; (8005fa4 <siprintf+0x3c>)
 8005f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f84:	9105      	str	r1, [sp, #20]
 8005f86:	6800      	ldr	r0, [r0, #0]
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	a902      	add	r1, sp, #8
 8005f8c:	f001 fa5c 	bl	8007448 <_svfiprintf_r>
 8005f90:	9b02      	ldr	r3, [sp, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	b01c      	add	sp, #112	; 0x70
 8005f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f9c:	b003      	add	sp, #12
 8005f9e:	4770      	bx	lr
 8005fa0:	2000000c 	.word	0x2000000c
 8005fa4:	ffff0208 	.word	0xffff0208

08005fa8 <quorem>:
 8005fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	6903      	ldr	r3, [r0, #16]
 8005fae:	690c      	ldr	r4, [r1, #16]
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	f2c0 8082 	blt.w	80060bc <quorem+0x114>
 8005fb8:	3c01      	subs	r4, #1
 8005fba:	f101 0714 	add.w	r7, r1, #20
 8005fbe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005fc2:	f100 0614 	add.w	r6, r0, #20
 8005fc6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005fca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005fce:	eb06 030c 	add.w	r3, r6, ip
 8005fd2:	3501      	adds	r5, #1
 8005fd4:	eb07 090c 	add.w	r9, r7, ip
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	fbb0 f5f5 	udiv	r5, r0, r5
 8005fde:	b395      	cbz	r5, 8006046 <quorem+0x9e>
 8005fe0:	f04f 0a00 	mov.w	sl, #0
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	46b6      	mov	lr, r6
 8005fe8:	46d3      	mov	fp, sl
 8005fea:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fee:	b293      	uxth	r3, r2
 8005ff0:	fb05 a303 	mla	r3, r5, r3, sl
 8005ff4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	ebab 0303 	sub.w	r3, fp, r3
 8005ffe:	0c12      	lsrs	r2, r2, #16
 8006000:	f8de b000 	ldr.w	fp, [lr]
 8006004:	fb05 a202 	mla	r2, r5, r2, sl
 8006008:	fa13 f38b 	uxtah	r3, r3, fp
 800600c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006010:	fa1f fb82 	uxth.w	fp, r2
 8006014:	f8de 2000 	ldr.w	r2, [lr]
 8006018:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800601c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006020:	b29b      	uxth	r3, r3
 8006022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006026:	4581      	cmp	r9, r0
 8006028:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800602c:	f84e 3b04 	str.w	r3, [lr], #4
 8006030:	d2db      	bcs.n	8005fea <quorem+0x42>
 8006032:	f856 300c 	ldr.w	r3, [r6, ip]
 8006036:	b933      	cbnz	r3, 8006046 <quorem+0x9e>
 8006038:	9b01      	ldr	r3, [sp, #4]
 800603a:	3b04      	subs	r3, #4
 800603c:	429e      	cmp	r6, r3
 800603e:	461a      	mov	r2, r3
 8006040:	d330      	bcc.n	80060a4 <quorem+0xfc>
 8006042:	f8c8 4010 	str.w	r4, [r8, #16]
 8006046:	4640      	mov	r0, r8
 8006048:	f001 f828 	bl	800709c <__mcmp>
 800604c:	2800      	cmp	r0, #0
 800604e:	db25      	blt.n	800609c <quorem+0xf4>
 8006050:	3501      	adds	r5, #1
 8006052:	4630      	mov	r0, r6
 8006054:	f04f 0c00 	mov.w	ip, #0
 8006058:	f857 2b04 	ldr.w	r2, [r7], #4
 800605c:	f8d0 e000 	ldr.w	lr, [r0]
 8006060:	b293      	uxth	r3, r2
 8006062:	ebac 0303 	sub.w	r3, ip, r3
 8006066:	0c12      	lsrs	r2, r2, #16
 8006068:	fa13 f38e 	uxtah	r3, r3, lr
 800606c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006074:	b29b      	uxth	r3, r3
 8006076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800607a:	45b9      	cmp	r9, r7
 800607c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006080:	f840 3b04 	str.w	r3, [r0], #4
 8006084:	d2e8      	bcs.n	8006058 <quorem+0xb0>
 8006086:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800608a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800608e:	b92a      	cbnz	r2, 800609c <quorem+0xf4>
 8006090:	3b04      	subs	r3, #4
 8006092:	429e      	cmp	r6, r3
 8006094:	461a      	mov	r2, r3
 8006096:	d30b      	bcc.n	80060b0 <quorem+0x108>
 8006098:	f8c8 4010 	str.w	r4, [r8, #16]
 800609c:	4628      	mov	r0, r5
 800609e:	b003      	add	sp, #12
 80060a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	3b04      	subs	r3, #4
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d1ca      	bne.n	8006042 <quorem+0x9a>
 80060ac:	3c01      	subs	r4, #1
 80060ae:	e7c5      	b.n	800603c <quorem+0x94>
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	3b04      	subs	r3, #4
 80060b4:	2a00      	cmp	r2, #0
 80060b6:	d1ef      	bne.n	8006098 <quorem+0xf0>
 80060b8:	3c01      	subs	r4, #1
 80060ba:	e7ea      	b.n	8006092 <quorem+0xea>
 80060bc:	2000      	movs	r0, #0
 80060be:	e7ee      	b.n	800609e <quorem+0xf6>

080060c0 <_dtoa_r>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	ec57 6b10 	vmov	r6, r7, d0
 80060c8:	b097      	sub	sp, #92	; 0x5c
 80060ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060cc:	9106      	str	r1, [sp, #24]
 80060ce:	4604      	mov	r4, r0
 80060d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80060d2:	9312      	str	r3, [sp, #72]	; 0x48
 80060d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80060d8:	e9cd 6700 	strd	r6, r7, [sp]
 80060dc:	b93d      	cbnz	r5, 80060ee <_dtoa_r+0x2e>
 80060de:	2010      	movs	r0, #16
 80060e0:	f000 fdb4 	bl	8006c4c <malloc>
 80060e4:	6260      	str	r0, [r4, #36]	; 0x24
 80060e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060ea:	6005      	str	r5, [r0, #0]
 80060ec:	60c5      	str	r5, [r0, #12]
 80060ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060f0:	6819      	ldr	r1, [r3, #0]
 80060f2:	b151      	cbz	r1, 800610a <_dtoa_r+0x4a>
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	604a      	str	r2, [r1, #4]
 80060f8:	2301      	movs	r3, #1
 80060fa:	4093      	lsls	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
 80060fe:	4620      	mov	r0, r4
 8006100:	f000 fdeb 	bl	8006cda <_Bfree>
 8006104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	1e3b      	subs	r3, r7, #0
 800610c:	bfbb      	ittet	lt
 800610e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006112:	9301      	strlt	r3, [sp, #4]
 8006114:	2300      	movge	r3, #0
 8006116:	2201      	movlt	r2, #1
 8006118:	bfac      	ite	ge
 800611a:	f8c8 3000 	strge.w	r3, [r8]
 800611e:	f8c8 2000 	strlt.w	r2, [r8]
 8006122:	4baf      	ldr	r3, [pc, #700]	; (80063e0 <_dtoa_r+0x320>)
 8006124:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006128:	ea33 0308 	bics.w	r3, r3, r8
 800612c:	d114      	bne.n	8006158 <_dtoa_r+0x98>
 800612e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006130:	f242 730f 	movw	r3, #9999	; 0x270f
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	9b00      	ldr	r3, [sp, #0]
 8006138:	b923      	cbnz	r3, 8006144 <_dtoa_r+0x84>
 800613a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800613e:	2800      	cmp	r0, #0
 8006140:	f000 8542 	beq.w	8006bc8 <_dtoa_r+0xb08>
 8006144:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006146:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80063f4 <_dtoa_r+0x334>
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 8544 	beq.w	8006bd8 <_dtoa_r+0xb18>
 8006150:	f10b 0303 	add.w	r3, fp, #3
 8006154:	f000 bd3e 	b.w	8006bd4 <_dtoa_r+0xb14>
 8006158:	e9dd 6700 	ldrd	r6, r7, [sp]
 800615c:	2200      	movs	r2, #0
 800615e:	2300      	movs	r3, #0
 8006160:	4630      	mov	r0, r6
 8006162:	4639      	mov	r1, r7
 8006164:	f7fa fcb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006168:	4681      	mov	r9, r0
 800616a:	b168      	cbz	r0, 8006188 <_dtoa_r+0xc8>
 800616c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800616e:	2301      	movs	r3, #1
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8524 	beq.w	8006bc2 <_dtoa_r+0xb02>
 800617a:	4b9a      	ldr	r3, [pc, #616]	; (80063e4 <_dtoa_r+0x324>)
 800617c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800617e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	f000 bd28 	b.w	8006bd8 <_dtoa_r+0xb18>
 8006188:	aa14      	add	r2, sp, #80	; 0x50
 800618a:	a915      	add	r1, sp, #84	; 0x54
 800618c:	ec47 6b10 	vmov	d0, r6, r7
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fffa 	bl	800718a <__d2b>
 8006196:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800619a:	9004      	str	r0, [sp, #16]
 800619c:	2d00      	cmp	r5, #0
 800619e:	d07c      	beq.n	800629a <_dtoa_r+0x1da>
 80061a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80061a8:	46b2      	mov	sl, r6
 80061aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80061ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80061b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80061b6:	2200      	movs	r2, #0
 80061b8:	4b8b      	ldr	r3, [pc, #556]	; (80063e8 <_dtoa_r+0x328>)
 80061ba:	4650      	mov	r0, sl
 80061bc:	4659      	mov	r1, fp
 80061be:	f7fa f86b 	bl	8000298 <__aeabi_dsub>
 80061c2:	a381      	add	r3, pc, #516	; (adr r3, 80063c8 <_dtoa_r+0x308>)
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f7fa fa1e 	bl	8000608 <__aeabi_dmul>
 80061cc:	a380      	add	r3, pc, #512	; (adr r3, 80063d0 <_dtoa_r+0x310>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f7fa f863 	bl	800029c <__adddf3>
 80061d6:	4606      	mov	r6, r0
 80061d8:	4628      	mov	r0, r5
 80061da:	460f      	mov	r7, r1
 80061dc:	f7fa f9aa 	bl	8000534 <__aeabi_i2d>
 80061e0:	a37d      	add	r3, pc, #500	; (adr r3, 80063d8 <_dtoa_r+0x318>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f7fa fa0f 	bl	8000608 <__aeabi_dmul>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4630      	mov	r0, r6
 80061f0:	4639      	mov	r1, r7
 80061f2:	f7fa f853 	bl	800029c <__adddf3>
 80061f6:	4606      	mov	r6, r0
 80061f8:	460f      	mov	r7, r1
 80061fa:	f7fa fcb5 	bl	8000b68 <__aeabi_d2iz>
 80061fe:	2200      	movs	r2, #0
 8006200:	4682      	mov	sl, r0
 8006202:	2300      	movs	r3, #0
 8006204:	4630      	mov	r0, r6
 8006206:	4639      	mov	r1, r7
 8006208:	f7fa fc70 	bl	8000aec <__aeabi_dcmplt>
 800620c:	b148      	cbz	r0, 8006222 <_dtoa_r+0x162>
 800620e:	4650      	mov	r0, sl
 8006210:	f7fa f990 	bl	8000534 <__aeabi_i2d>
 8006214:	4632      	mov	r2, r6
 8006216:	463b      	mov	r3, r7
 8006218:	f7fa fc5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800621c:	b908      	cbnz	r0, 8006222 <_dtoa_r+0x162>
 800621e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006222:	f1ba 0f16 	cmp.w	sl, #22
 8006226:	d859      	bhi.n	80062dc <_dtoa_r+0x21c>
 8006228:	4970      	ldr	r1, [pc, #448]	; (80063ec <_dtoa_r+0x32c>)
 800622a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800622e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006232:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006236:	f7fa fc77 	bl	8000b28 <__aeabi_dcmpgt>
 800623a:	2800      	cmp	r0, #0
 800623c:	d050      	beq.n	80062e0 <_dtoa_r+0x220>
 800623e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006242:	2300      	movs	r3, #0
 8006244:	930f      	str	r3, [sp, #60]	; 0x3c
 8006246:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006248:	1b5d      	subs	r5, r3, r5
 800624a:	f1b5 0801 	subs.w	r8, r5, #1
 800624e:	bf49      	itett	mi
 8006250:	f1c5 0301 	rsbmi	r3, r5, #1
 8006254:	2300      	movpl	r3, #0
 8006256:	9305      	strmi	r3, [sp, #20]
 8006258:	f04f 0800 	movmi.w	r8, #0
 800625c:	bf58      	it	pl
 800625e:	9305      	strpl	r3, [sp, #20]
 8006260:	f1ba 0f00 	cmp.w	sl, #0
 8006264:	db3e      	blt.n	80062e4 <_dtoa_r+0x224>
 8006266:	2300      	movs	r3, #0
 8006268:	44d0      	add	r8, sl
 800626a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800626e:	9307      	str	r3, [sp, #28]
 8006270:	9b06      	ldr	r3, [sp, #24]
 8006272:	2b09      	cmp	r3, #9
 8006274:	f200 8090 	bhi.w	8006398 <_dtoa_r+0x2d8>
 8006278:	2b05      	cmp	r3, #5
 800627a:	bfc4      	itt	gt
 800627c:	3b04      	subgt	r3, #4
 800627e:	9306      	strgt	r3, [sp, #24]
 8006280:	9b06      	ldr	r3, [sp, #24]
 8006282:	f1a3 0302 	sub.w	r3, r3, #2
 8006286:	bfcc      	ite	gt
 8006288:	2500      	movgt	r5, #0
 800628a:	2501      	movle	r5, #1
 800628c:	2b03      	cmp	r3, #3
 800628e:	f200 808f 	bhi.w	80063b0 <_dtoa_r+0x2f0>
 8006292:	e8df f003 	tbb	[pc, r3]
 8006296:	7f7d      	.short	0x7f7d
 8006298:	7131      	.short	0x7131
 800629a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800629e:	441d      	add	r5, r3
 80062a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80062a4:	2820      	cmp	r0, #32
 80062a6:	dd13      	ble.n	80062d0 <_dtoa_r+0x210>
 80062a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80062ac:	9b00      	ldr	r3, [sp, #0]
 80062ae:	fa08 f800 	lsl.w	r8, r8, r0
 80062b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80062b6:	fa23 f000 	lsr.w	r0, r3, r0
 80062ba:	ea48 0000 	orr.w	r0, r8, r0
 80062be:	f7fa f929 	bl	8000514 <__aeabi_ui2d>
 80062c2:	2301      	movs	r3, #1
 80062c4:	4682      	mov	sl, r0
 80062c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80062ca:	3d01      	subs	r5, #1
 80062cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80062ce:	e772      	b.n	80061b6 <_dtoa_r+0xf6>
 80062d0:	9b00      	ldr	r3, [sp, #0]
 80062d2:	f1c0 0020 	rsb	r0, r0, #32
 80062d6:	fa03 f000 	lsl.w	r0, r3, r0
 80062da:	e7f0      	b.n	80062be <_dtoa_r+0x1fe>
 80062dc:	2301      	movs	r3, #1
 80062de:	e7b1      	b.n	8006244 <_dtoa_r+0x184>
 80062e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80062e2:	e7b0      	b.n	8006246 <_dtoa_r+0x186>
 80062e4:	9b05      	ldr	r3, [sp, #20]
 80062e6:	eba3 030a 	sub.w	r3, r3, sl
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	f1ca 0300 	rsb	r3, sl, #0
 80062f0:	9307      	str	r3, [sp, #28]
 80062f2:	2300      	movs	r3, #0
 80062f4:	930e      	str	r3, [sp, #56]	; 0x38
 80062f6:	e7bb      	b.n	8006270 <_dtoa_r+0x1b0>
 80062f8:	2301      	movs	r3, #1
 80062fa:	930a      	str	r3, [sp, #40]	; 0x28
 80062fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	dd59      	ble.n	80063b6 <_dtoa_r+0x2f6>
 8006302:	9302      	str	r3, [sp, #8]
 8006304:	4699      	mov	r9, r3
 8006306:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006308:	2200      	movs	r2, #0
 800630a:	6072      	str	r2, [r6, #4]
 800630c:	2204      	movs	r2, #4
 800630e:	f102 0014 	add.w	r0, r2, #20
 8006312:	4298      	cmp	r0, r3
 8006314:	6871      	ldr	r1, [r6, #4]
 8006316:	d953      	bls.n	80063c0 <_dtoa_r+0x300>
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fcaa 	bl	8006c72 <_Balloc>
 800631e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006320:	6030      	str	r0, [r6, #0]
 8006322:	f1b9 0f0e 	cmp.w	r9, #14
 8006326:	f8d3 b000 	ldr.w	fp, [r3]
 800632a:	f200 80e6 	bhi.w	80064fa <_dtoa_r+0x43a>
 800632e:	2d00      	cmp	r5, #0
 8006330:	f000 80e3 	beq.w	80064fa <_dtoa_r+0x43a>
 8006334:	ed9d 7b00 	vldr	d7, [sp]
 8006338:	f1ba 0f00 	cmp.w	sl, #0
 800633c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006340:	dd74      	ble.n	800642c <_dtoa_r+0x36c>
 8006342:	4a2a      	ldr	r2, [pc, #168]	; (80063ec <_dtoa_r+0x32c>)
 8006344:	f00a 030f 	and.w	r3, sl, #15
 8006348:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800634c:	ed93 7b00 	vldr	d7, [r3]
 8006350:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006354:	06f0      	lsls	r0, r6, #27
 8006356:	ed8d 7b08 	vstr	d7, [sp, #32]
 800635a:	d565      	bpl.n	8006428 <_dtoa_r+0x368>
 800635c:	4b24      	ldr	r3, [pc, #144]	; (80063f0 <_dtoa_r+0x330>)
 800635e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006362:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006366:	f7fa fa79 	bl	800085c <__aeabi_ddiv>
 800636a:	e9cd 0100 	strd	r0, r1, [sp]
 800636e:	f006 060f 	and.w	r6, r6, #15
 8006372:	2503      	movs	r5, #3
 8006374:	4f1e      	ldr	r7, [pc, #120]	; (80063f0 <_dtoa_r+0x330>)
 8006376:	e04c      	b.n	8006412 <_dtoa_r+0x352>
 8006378:	2301      	movs	r3, #1
 800637a:	930a      	str	r3, [sp, #40]	; 0x28
 800637c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800637e:	4453      	add	r3, sl
 8006380:	f103 0901 	add.w	r9, r3, #1
 8006384:	9302      	str	r3, [sp, #8]
 8006386:	464b      	mov	r3, r9
 8006388:	2b01      	cmp	r3, #1
 800638a:	bfb8      	it	lt
 800638c:	2301      	movlt	r3, #1
 800638e:	e7ba      	b.n	8006306 <_dtoa_r+0x246>
 8006390:	2300      	movs	r3, #0
 8006392:	e7b2      	b.n	80062fa <_dtoa_r+0x23a>
 8006394:	2300      	movs	r3, #0
 8006396:	e7f0      	b.n	800637a <_dtoa_r+0x2ba>
 8006398:	2501      	movs	r5, #1
 800639a:	2300      	movs	r3, #0
 800639c:	9306      	str	r3, [sp, #24]
 800639e:	950a      	str	r5, [sp, #40]	; 0x28
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	9302      	str	r3, [sp, #8]
 80063a6:	4699      	mov	r9, r3
 80063a8:	2200      	movs	r2, #0
 80063aa:	2312      	movs	r3, #18
 80063ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80063ae:	e7aa      	b.n	8006306 <_dtoa_r+0x246>
 80063b0:	2301      	movs	r3, #1
 80063b2:	930a      	str	r3, [sp, #40]	; 0x28
 80063b4:	e7f4      	b.n	80063a0 <_dtoa_r+0x2e0>
 80063b6:	2301      	movs	r3, #1
 80063b8:	9302      	str	r3, [sp, #8]
 80063ba:	4699      	mov	r9, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	e7f5      	b.n	80063ac <_dtoa_r+0x2ec>
 80063c0:	3101      	adds	r1, #1
 80063c2:	6071      	str	r1, [r6, #4]
 80063c4:	0052      	lsls	r2, r2, #1
 80063c6:	e7a2      	b.n	800630e <_dtoa_r+0x24e>
 80063c8:	636f4361 	.word	0x636f4361
 80063cc:	3fd287a7 	.word	0x3fd287a7
 80063d0:	8b60c8b3 	.word	0x8b60c8b3
 80063d4:	3fc68a28 	.word	0x3fc68a28
 80063d8:	509f79fb 	.word	0x509f79fb
 80063dc:	3fd34413 	.word	0x3fd34413
 80063e0:	7ff00000 	.word	0x7ff00000
 80063e4:	080077d5 	.word	0x080077d5
 80063e8:	3ff80000 	.word	0x3ff80000
 80063ec:	08007830 	.word	0x08007830
 80063f0:	08007808 	.word	0x08007808
 80063f4:	08007801 	.word	0x08007801
 80063f8:	07f1      	lsls	r1, r6, #31
 80063fa:	d508      	bpl.n	800640e <_dtoa_r+0x34e>
 80063fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006404:	f7fa f900 	bl	8000608 <__aeabi_dmul>
 8006408:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800640c:	3501      	adds	r5, #1
 800640e:	1076      	asrs	r6, r6, #1
 8006410:	3708      	adds	r7, #8
 8006412:	2e00      	cmp	r6, #0
 8006414:	d1f0      	bne.n	80063f8 <_dtoa_r+0x338>
 8006416:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800641a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800641e:	f7fa fa1d 	bl	800085c <__aeabi_ddiv>
 8006422:	e9cd 0100 	strd	r0, r1, [sp]
 8006426:	e01a      	b.n	800645e <_dtoa_r+0x39e>
 8006428:	2502      	movs	r5, #2
 800642a:	e7a3      	b.n	8006374 <_dtoa_r+0x2b4>
 800642c:	f000 80a0 	beq.w	8006570 <_dtoa_r+0x4b0>
 8006430:	f1ca 0600 	rsb	r6, sl, #0
 8006434:	4b9f      	ldr	r3, [pc, #636]	; (80066b4 <_dtoa_r+0x5f4>)
 8006436:	4fa0      	ldr	r7, [pc, #640]	; (80066b8 <_dtoa_r+0x5f8>)
 8006438:	f006 020f 	and.w	r2, r6, #15
 800643c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006448:	f7fa f8de 	bl	8000608 <__aeabi_dmul>
 800644c:	e9cd 0100 	strd	r0, r1, [sp]
 8006450:	1136      	asrs	r6, r6, #4
 8006452:	2300      	movs	r3, #0
 8006454:	2502      	movs	r5, #2
 8006456:	2e00      	cmp	r6, #0
 8006458:	d17f      	bne.n	800655a <_dtoa_r+0x49a>
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e1      	bne.n	8006422 <_dtoa_r+0x362>
 800645e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8087 	beq.w	8006574 <_dtoa_r+0x4b4>
 8006466:	e9dd 6700 	ldrd	r6, r7, [sp]
 800646a:	2200      	movs	r2, #0
 800646c:	4b93      	ldr	r3, [pc, #588]	; (80066bc <_dtoa_r+0x5fc>)
 800646e:	4630      	mov	r0, r6
 8006470:	4639      	mov	r1, r7
 8006472:	f7fa fb3b 	bl	8000aec <__aeabi_dcmplt>
 8006476:	2800      	cmp	r0, #0
 8006478:	d07c      	beq.n	8006574 <_dtoa_r+0x4b4>
 800647a:	f1b9 0f00 	cmp.w	r9, #0
 800647e:	d079      	beq.n	8006574 <_dtoa_r+0x4b4>
 8006480:	9b02      	ldr	r3, [sp, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	dd35      	ble.n	80064f2 <_dtoa_r+0x432>
 8006486:	f10a 33ff 	add.w	r3, sl, #4294967295
 800648a:	9308      	str	r3, [sp, #32]
 800648c:	4639      	mov	r1, r7
 800648e:	2200      	movs	r2, #0
 8006490:	4b8b      	ldr	r3, [pc, #556]	; (80066c0 <_dtoa_r+0x600>)
 8006492:	4630      	mov	r0, r6
 8006494:	f7fa f8b8 	bl	8000608 <__aeabi_dmul>
 8006498:	e9cd 0100 	strd	r0, r1, [sp]
 800649c:	9f02      	ldr	r7, [sp, #8]
 800649e:	3501      	adds	r5, #1
 80064a0:	4628      	mov	r0, r5
 80064a2:	f7fa f847 	bl	8000534 <__aeabi_i2d>
 80064a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064aa:	f7fa f8ad 	bl	8000608 <__aeabi_dmul>
 80064ae:	2200      	movs	r2, #0
 80064b0:	4b84      	ldr	r3, [pc, #528]	; (80066c4 <_dtoa_r+0x604>)
 80064b2:	f7f9 fef3 	bl	800029c <__adddf3>
 80064b6:	4605      	mov	r5, r0
 80064b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80064bc:	2f00      	cmp	r7, #0
 80064be:	d15d      	bne.n	800657c <_dtoa_r+0x4bc>
 80064c0:	2200      	movs	r2, #0
 80064c2:	4b81      	ldr	r3, [pc, #516]	; (80066c8 <_dtoa_r+0x608>)
 80064c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064c8:	f7f9 fee6 	bl	8000298 <__aeabi_dsub>
 80064cc:	462a      	mov	r2, r5
 80064ce:	4633      	mov	r3, r6
 80064d0:	e9cd 0100 	strd	r0, r1, [sp]
 80064d4:	f7fa fb28 	bl	8000b28 <__aeabi_dcmpgt>
 80064d8:	2800      	cmp	r0, #0
 80064da:	f040 8288 	bne.w	80069ee <_dtoa_r+0x92e>
 80064de:	462a      	mov	r2, r5
 80064e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80064e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064e8:	f7fa fb00 	bl	8000aec <__aeabi_dcmplt>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f040 827c 	bne.w	80069ea <_dtoa_r+0x92a>
 80064f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064f6:	e9cd 2300 	strd	r2, r3, [sp]
 80064fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f2c0 8150 	blt.w	80067a2 <_dtoa_r+0x6e2>
 8006502:	f1ba 0f0e 	cmp.w	sl, #14
 8006506:	f300 814c 	bgt.w	80067a2 <_dtoa_r+0x6e2>
 800650a:	4b6a      	ldr	r3, [pc, #424]	; (80066b4 <_dtoa_r+0x5f4>)
 800650c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006510:	ed93 7b00 	vldr	d7, [r3]
 8006514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006516:	2b00      	cmp	r3, #0
 8006518:	ed8d 7b02 	vstr	d7, [sp, #8]
 800651c:	f280 80d8 	bge.w	80066d0 <_dtoa_r+0x610>
 8006520:	f1b9 0f00 	cmp.w	r9, #0
 8006524:	f300 80d4 	bgt.w	80066d0 <_dtoa_r+0x610>
 8006528:	f040 825e 	bne.w	80069e8 <_dtoa_r+0x928>
 800652c:	2200      	movs	r2, #0
 800652e:	4b66      	ldr	r3, [pc, #408]	; (80066c8 <_dtoa_r+0x608>)
 8006530:	ec51 0b17 	vmov	r0, r1, d7
 8006534:	f7fa f868 	bl	8000608 <__aeabi_dmul>
 8006538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800653c:	f7fa faea 	bl	8000b14 <__aeabi_dcmpge>
 8006540:	464f      	mov	r7, r9
 8006542:	464e      	mov	r6, r9
 8006544:	2800      	cmp	r0, #0
 8006546:	f040 8234 	bne.w	80069b2 <_dtoa_r+0x8f2>
 800654a:	2331      	movs	r3, #49	; 0x31
 800654c:	f10b 0501 	add.w	r5, fp, #1
 8006550:	f88b 3000 	strb.w	r3, [fp]
 8006554:	f10a 0a01 	add.w	sl, sl, #1
 8006558:	e22f      	b.n	80069ba <_dtoa_r+0x8fa>
 800655a:	07f2      	lsls	r2, r6, #31
 800655c:	d505      	bpl.n	800656a <_dtoa_r+0x4aa>
 800655e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006562:	f7fa f851 	bl	8000608 <__aeabi_dmul>
 8006566:	3501      	adds	r5, #1
 8006568:	2301      	movs	r3, #1
 800656a:	1076      	asrs	r6, r6, #1
 800656c:	3708      	adds	r7, #8
 800656e:	e772      	b.n	8006456 <_dtoa_r+0x396>
 8006570:	2502      	movs	r5, #2
 8006572:	e774      	b.n	800645e <_dtoa_r+0x39e>
 8006574:	f8cd a020 	str.w	sl, [sp, #32]
 8006578:	464f      	mov	r7, r9
 800657a:	e791      	b.n	80064a0 <_dtoa_r+0x3e0>
 800657c:	4b4d      	ldr	r3, [pc, #308]	; (80066b4 <_dtoa_r+0x5f4>)
 800657e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006582:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	d047      	beq.n	800661c <_dtoa_r+0x55c>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	2000      	movs	r0, #0
 8006592:	494e      	ldr	r1, [pc, #312]	; (80066cc <_dtoa_r+0x60c>)
 8006594:	f7fa f962 	bl	800085c <__aeabi_ddiv>
 8006598:	462a      	mov	r2, r5
 800659a:	4633      	mov	r3, r6
 800659c:	f7f9 fe7c 	bl	8000298 <__aeabi_dsub>
 80065a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065a4:	465d      	mov	r5, fp
 80065a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065aa:	f7fa fadd 	bl	8000b68 <__aeabi_d2iz>
 80065ae:	4606      	mov	r6, r0
 80065b0:	f7f9 ffc0 	bl	8000534 <__aeabi_i2d>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065bc:	f7f9 fe6c 	bl	8000298 <__aeabi_dsub>
 80065c0:	3630      	adds	r6, #48	; 0x30
 80065c2:	f805 6b01 	strb.w	r6, [r5], #1
 80065c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065ca:	e9cd 0100 	strd	r0, r1, [sp]
 80065ce:	f7fa fa8d 	bl	8000aec <__aeabi_dcmplt>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d163      	bne.n	800669e <_dtoa_r+0x5de>
 80065d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065da:	2000      	movs	r0, #0
 80065dc:	4937      	ldr	r1, [pc, #220]	; (80066bc <_dtoa_r+0x5fc>)
 80065de:	f7f9 fe5b 	bl	8000298 <__aeabi_dsub>
 80065e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065e6:	f7fa fa81 	bl	8000aec <__aeabi_dcmplt>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f040 80b7 	bne.w	800675e <_dtoa_r+0x69e>
 80065f0:	eba5 030b 	sub.w	r3, r5, fp
 80065f4:	429f      	cmp	r7, r3
 80065f6:	f77f af7c 	ble.w	80064f2 <_dtoa_r+0x432>
 80065fa:	2200      	movs	r2, #0
 80065fc:	4b30      	ldr	r3, [pc, #192]	; (80066c0 <_dtoa_r+0x600>)
 80065fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006602:	f7fa f801 	bl	8000608 <__aeabi_dmul>
 8006606:	2200      	movs	r2, #0
 8006608:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800660c:	4b2c      	ldr	r3, [pc, #176]	; (80066c0 <_dtoa_r+0x600>)
 800660e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006612:	f7f9 fff9 	bl	8000608 <__aeabi_dmul>
 8006616:	e9cd 0100 	strd	r0, r1, [sp]
 800661a:	e7c4      	b.n	80065a6 <_dtoa_r+0x4e6>
 800661c:	462a      	mov	r2, r5
 800661e:	4633      	mov	r3, r6
 8006620:	f7f9 fff2 	bl	8000608 <__aeabi_dmul>
 8006624:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006628:	eb0b 0507 	add.w	r5, fp, r7
 800662c:	465e      	mov	r6, fp
 800662e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006632:	f7fa fa99 	bl	8000b68 <__aeabi_d2iz>
 8006636:	4607      	mov	r7, r0
 8006638:	f7f9 ff7c 	bl	8000534 <__aeabi_i2d>
 800663c:	3730      	adds	r7, #48	; 0x30
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006646:	f7f9 fe27 	bl	8000298 <__aeabi_dsub>
 800664a:	f806 7b01 	strb.w	r7, [r6], #1
 800664e:	42ae      	cmp	r6, r5
 8006650:	e9cd 0100 	strd	r0, r1, [sp]
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	d126      	bne.n	80066a8 <_dtoa_r+0x5e8>
 800665a:	4b1c      	ldr	r3, [pc, #112]	; (80066cc <_dtoa_r+0x60c>)
 800665c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006660:	f7f9 fe1c 	bl	800029c <__adddf3>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800666c:	f7fa fa5c 	bl	8000b28 <__aeabi_dcmpgt>
 8006670:	2800      	cmp	r0, #0
 8006672:	d174      	bne.n	800675e <_dtoa_r+0x69e>
 8006674:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006678:	2000      	movs	r0, #0
 800667a:	4914      	ldr	r1, [pc, #80]	; (80066cc <_dtoa_r+0x60c>)
 800667c:	f7f9 fe0c 	bl	8000298 <__aeabi_dsub>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006688:	f7fa fa30 	bl	8000aec <__aeabi_dcmplt>
 800668c:	2800      	cmp	r0, #0
 800668e:	f43f af30 	beq.w	80064f2 <_dtoa_r+0x432>
 8006692:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006696:	2b30      	cmp	r3, #48	; 0x30
 8006698:	f105 32ff 	add.w	r2, r5, #4294967295
 800669c:	d002      	beq.n	80066a4 <_dtoa_r+0x5e4>
 800669e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066a2:	e04a      	b.n	800673a <_dtoa_r+0x67a>
 80066a4:	4615      	mov	r5, r2
 80066a6:	e7f4      	b.n	8006692 <_dtoa_r+0x5d2>
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <_dtoa_r+0x600>)
 80066aa:	f7f9 ffad 	bl	8000608 <__aeabi_dmul>
 80066ae:	e9cd 0100 	strd	r0, r1, [sp]
 80066b2:	e7bc      	b.n	800662e <_dtoa_r+0x56e>
 80066b4:	08007830 	.word	0x08007830
 80066b8:	08007808 	.word	0x08007808
 80066bc:	3ff00000 	.word	0x3ff00000
 80066c0:	40240000 	.word	0x40240000
 80066c4:	401c0000 	.word	0x401c0000
 80066c8:	40140000 	.word	0x40140000
 80066cc:	3fe00000 	.word	0x3fe00000
 80066d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066d4:	465d      	mov	r5, fp
 80066d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066da:	4630      	mov	r0, r6
 80066dc:	4639      	mov	r1, r7
 80066de:	f7fa f8bd 	bl	800085c <__aeabi_ddiv>
 80066e2:	f7fa fa41 	bl	8000b68 <__aeabi_d2iz>
 80066e6:	4680      	mov	r8, r0
 80066e8:	f7f9 ff24 	bl	8000534 <__aeabi_i2d>
 80066ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f0:	f7f9 ff8a 	bl	8000608 <__aeabi_dmul>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006700:	f7f9 fdca 	bl	8000298 <__aeabi_dsub>
 8006704:	f805 6b01 	strb.w	r6, [r5], #1
 8006708:	eba5 060b 	sub.w	r6, r5, fp
 800670c:	45b1      	cmp	r9, r6
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	d139      	bne.n	8006788 <_dtoa_r+0x6c8>
 8006714:	f7f9 fdc2 	bl	800029c <__adddf3>
 8006718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800671c:	4606      	mov	r6, r0
 800671e:	460f      	mov	r7, r1
 8006720:	f7fa fa02 	bl	8000b28 <__aeabi_dcmpgt>
 8006724:	b9c8      	cbnz	r0, 800675a <_dtoa_r+0x69a>
 8006726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7fa f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006732:	b110      	cbz	r0, 800673a <_dtoa_r+0x67a>
 8006734:	f018 0f01 	tst.w	r8, #1
 8006738:	d10f      	bne.n	800675a <_dtoa_r+0x69a>
 800673a:	9904      	ldr	r1, [sp, #16]
 800673c:	4620      	mov	r0, r4
 800673e:	f000 facc 	bl	8006cda <_Bfree>
 8006742:	2300      	movs	r3, #0
 8006744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006746:	702b      	strb	r3, [r5, #0]
 8006748:	f10a 0301 	add.w	r3, sl, #1
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8241 	beq.w	8006bd8 <_dtoa_r+0xb18>
 8006756:	601d      	str	r5, [r3, #0]
 8006758:	e23e      	b.n	8006bd8 <_dtoa_r+0xb18>
 800675a:	f8cd a020 	str.w	sl, [sp, #32]
 800675e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006762:	2a39      	cmp	r2, #57	; 0x39
 8006764:	f105 33ff 	add.w	r3, r5, #4294967295
 8006768:	d108      	bne.n	800677c <_dtoa_r+0x6bc>
 800676a:	459b      	cmp	fp, r3
 800676c:	d10a      	bne.n	8006784 <_dtoa_r+0x6c4>
 800676e:	9b08      	ldr	r3, [sp, #32]
 8006770:	3301      	adds	r3, #1
 8006772:	9308      	str	r3, [sp, #32]
 8006774:	2330      	movs	r3, #48	; 0x30
 8006776:	f88b 3000 	strb.w	r3, [fp]
 800677a:	465b      	mov	r3, fp
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	3201      	adds	r2, #1
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	e78c      	b.n	800669e <_dtoa_r+0x5de>
 8006784:	461d      	mov	r5, r3
 8006786:	e7ea      	b.n	800675e <_dtoa_r+0x69e>
 8006788:	2200      	movs	r2, #0
 800678a:	4b9b      	ldr	r3, [pc, #620]	; (80069f8 <_dtoa_r+0x938>)
 800678c:	f7f9 ff3c 	bl	8000608 <__aeabi_dmul>
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	4606      	mov	r6, r0
 8006796:	460f      	mov	r7, r1
 8006798:	f7fa f99e 	bl	8000ad8 <__aeabi_dcmpeq>
 800679c:	2800      	cmp	r0, #0
 800679e:	d09a      	beq.n	80066d6 <_dtoa_r+0x616>
 80067a0:	e7cb      	b.n	800673a <_dtoa_r+0x67a>
 80067a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	f000 808b 	beq.w	80068c0 <_dtoa_r+0x800>
 80067aa:	9a06      	ldr	r2, [sp, #24]
 80067ac:	2a01      	cmp	r2, #1
 80067ae:	dc6e      	bgt.n	800688e <_dtoa_r+0x7ce>
 80067b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	d067      	beq.n	8006886 <_dtoa_r+0x7c6>
 80067b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067ba:	9f07      	ldr	r7, [sp, #28]
 80067bc:	9d05      	ldr	r5, [sp, #20]
 80067be:	9a05      	ldr	r2, [sp, #20]
 80067c0:	2101      	movs	r1, #1
 80067c2:	441a      	add	r2, r3
 80067c4:	4620      	mov	r0, r4
 80067c6:	9205      	str	r2, [sp, #20]
 80067c8:	4498      	add	r8, r3
 80067ca:	f000 fb26 	bl	8006e1a <__i2b>
 80067ce:	4606      	mov	r6, r0
 80067d0:	2d00      	cmp	r5, #0
 80067d2:	dd0c      	ble.n	80067ee <_dtoa_r+0x72e>
 80067d4:	f1b8 0f00 	cmp.w	r8, #0
 80067d8:	dd09      	ble.n	80067ee <_dtoa_r+0x72e>
 80067da:	4545      	cmp	r5, r8
 80067dc:	9a05      	ldr	r2, [sp, #20]
 80067de:	462b      	mov	r3, r5
 80067e0:	bfa8      	it	ge
 80067e2:	4643      	movge	r3, r8
 80067e4:	1ad2      	subs	r2, r2, r3
 80067e6:	9205      	str	r2, [sp, #20]
 80067e8:	1aed      	subs	r5, r5, r3
 80067ea:	eba8 0803 	sub.w	r8, r8, r3
 80067ee:	9b07      	ldr	r3, [sp, #28]
 80067f0:	b1eb      	cbz	r3, 800682e <_dtoa_r+0x76e>
 80067f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d067      	beq.n	80068c8 <_dtoa_r+0x808>
 80067f8:	b18f      	cbz	r7, 800681e <_dtoa_r+0x75e>
 80067fa:	4631      	mov	r1, r6
 80067fc:	463a      	mov	r2, r7
 80067fe:	4620      	mov	r0, r4
 8006800:	f000 fbaa 	bl	8006f58 <__pow5mult>
 8006804:	9a04      	ldr	r2, [sp, #16]
 8006806:	4601      	mov	r1, r0
 8006808:	4606      	mov	r6, r0
 800680a:	4620      	mov	r0, r4
 800680c:	f000 fb0e 	bl	8006e2c <__multiply>
 8006810:	9904      	ldr	r1, [sp, #16]
 8006812:	9008      	str	r0, [sp, #32]
 8006814:	4620      	mov	r0, r4
 8006816:	f000 fa60 	bl	8006cda <_Bfree>
 800681a:	9b08      	ldr	r3, [sp, #32]
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	9b07      	ldr	r3, [sp, #28]
 8006820:	1bda      	subs	r2, r3, r7
 8006822:	d004      	beq.n	800682e <_dtoa_r+0x76e>
 8006824:	9904      	ldr	r1, [sp, #16]
 8006826:	4620      	mov	r0, r4
 8006828:	f000 fb96 	bl	8006f58 <__pow5mult>
 800682c:	9004      	str	r0, [sp, #16]
 800682e:	2101      	movs	r1, #1
 8006830:	4620      	mov	r0, r4
 8006832:	f000 faf2 	bl	8006e1a <__i2b>
 8006836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006838:	4607      	mov	r7, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 81d0 	beq.w	8006be0 <_dtoa_r+0xb20>
 8006840:	461a      	mov	r2, r3
 8006842:	4601      	mov	r1, r0
 8006844:	4620      	mov	r0, r4
 8006846:	f000 fb87 	bl	8006f58 <__pow5mult>
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	2b01      	cmp	r3, #1
 800684e:	4607      	mov	r7, r0
 8006850:	dc40      	bgt.n	80068d4 <_dtoa_r+0x814>
 8006852:	9b00      	ldr	r3, [sp, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d139      	bne.n	80068cc <_dtoa_r+0x80c>
 8006858:	9b01      	ldr	r3, [sp, #4]
 800685a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800685e:	2b00      	cmp	r3, #0
 8006860:	d136      	bne.n	80068d0 <_dtoa_r+0x810>
 8006862:	9b01      	ldr	r3, [sp, #4]
 8006864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006868:	0d1b      	lsrs	r3, r3, #20
 800686a:	051b      	lsls	r3, r3, #20
 800686c:	b12b      	cbz	r3, 800687a <_dtoa_r+0x7ba>
 800686e:	9b05      	ldr	r3, [sp, #20]
 8006870:	3301      	adds	r3, #1
 8006872:	9305      	str	r3, [sp, #20]
 8006874:	f108 0801 	add.w	r8, r8, #1
 8006878:	2301      	movs	r3, #1
 800687a:	9307      	str	r3, [sp, #28]
 800687c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800687e:	2b00      	cmp	r3, #0
 8006880:	d12a      	bne.n	80068d8 <_dtoa_r+0x818>
 8006882:	2001      	movs	r0, #1
 8006884:	e030      	b.n	80068e8 <_dtoa_r+0x828>
 8006886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006888:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800688c:	e795      	b.n	80067ba <_dtoa_r+0x6fa>
 800688e:	9b07      	ldr	r3, [sp, #28]
 8006890:	f109 37ff 	add.w	r7, r9, #4294967295
 8006894:	42bb      	cmp	r3, r7
 8006896:	bfbf      	itttt	lt
 8006898:	9b07      	ldrlt	r3, [sp, #28]
 800689a:	9707      	strlt	r7, [sp, #28]
 800689c:	1afa      	sublt	r2, r7, r3
 800689e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80068a0:	bfbb      	ittet	lt
 80068a2:	189b      	addlt	r3, r3, r2
 80068a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80068a6:	1bdf      	subge	r7, r3, r7
 80068a8:	2700      	movlt	r7, #0
 80068aa:	f1b9 0f00 	cmp.w	r9, #0
 80068ae:	bfb5      	itete	lt
 80068b0:	9b05      	ldrlt	r3, [sp, #20]
 80068b2:	9d05      	ldrge	r5, [sp, #20]
 80068b4:	eba3 0509 	sublt.w	r5, r3, r9
 80068b8:	464b      	movge	r3, r9
 80068ba:	bfb8      	it	lt
 80068bc:	2300      	movlt	r3, #0
 80068be:	e77e      	b.n	80067be <_dtoa_r+0x6fe>
 80068c0:	9f07      	ldr	r7, [sp, #28]
 80068c2:	9d05      	ldr	r5, [sp, #20]
 80068c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80068c6:	e783      	b.n	80067d0 <_dtoa_r+0x710>
 80068c8:	9a07      	ldr	r2, [sp, #28]
 80068ca:	e7ab      	b.n	8006824 <_dtoa_r+0x764>
 80068cc:	2300      	movs	r3, #0
 80068ce:	e7d4      	b.n	800687a <_dtoa_r+0x7ba>
 80068d0:	9b00      	ldr	r3, [sp, #0]
 80068d2:	e7d2      	b.n	800687a <_dtoa_r+0x7ba>
 80068d4:	2300      	movs	r3, #0
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80068de:	6918      	ldr	r0, [r3, #16]
 80068e0:	f000 fa4d 	bl	8006d7e <__hi0bits>
 80068e4:	f1c0 0020 	rsb	r0, r0, #32
 80068e8:	4440      	add	r0, r8
 80068ea:	f010 001f 	ands.w	r0, r0, #31
 80068ee:	d047      	beq.n	8006980 <_dtoa_r+0x8c0>
 80068f0:	f1c0 0320 	rsb	r3, r0, #32
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	dd3b      	ble.n	8006970 <_dtoa_r+0x8b0>
 80068f8:	9b05      	ldr	r3, [sp, #20]
 80068fa:	f1c0 001c 	rsb	r0, r0, #28
 80068fe:	4403      	add	r3, r0
 8006900:	9305      	str	r3, [sp, #20]
 8006902:	4405      	add	r5, r0
 8006904:	4480      	add	r8, r0
 8006906:	9b05      	ldr	r3, [sp, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	dd05      	ble.n	8006918 <_dtoa_r+0x858>
 800690c:	461a      	mov	r2, r3
 800690e:	9904      	ldr	r1, [sp, #16]
 8006910:	4620      	mov	r0, r4
 8006912:	f000 fb6f 	bl	8006ff4 <__lshift>
 8006916:	9004      	str	r0, [sp, #16]
 8006918:	f1b8 0f00 	cmp.w	r8, #0
 800691c:	dd05      	ble.n	800692a <_dtoa_r+0x86a>
 800691e:	4639      	mov	r1, r7
 8006920:	4642      	mov	r2, r8
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fb66 	bl	8006ff4 <__lshift>
 8006928:	4607      	mov	r7, r0
 800692a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800692c:	b353      	cbz	r3, 8006984 <_dtoa_r+0x8c4>
 800692e:	4639      	mov	r1, r7
 8006930:	9804      	ldr	r0, [sp, #16]
 8006932:	f000 fbb3 	bl	800709c <__mcmp>
 8006936:	2800      	cmp	r0, #0
 8006938:	da24      	bge.n	8006984 <_dtoa_r+0x8c4>
 800693a:	2300      	movs	r3, #0
 800693c:	220a      	movs	r2, #10
 800693e:	9904      	ldr	r1, [sp, #16]
 8006940:	4620      	mov	r0, r4
 8006942:	f000 f9e1 	bl	8006d08 <__multadd>
 8006946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006948:	9004      	str	r0, [sp, #16]
 800694a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 814d 	beq.w	8006bee <_dtoa_r+0xb2e>
 8006954:	2300      	movs	r3, #0
 8006956:	4631      	mov	r1, r6
 8006958:	220a      	movs	r2, #10
 800695a:	4620      	mov	r0, r4
 800695c:	f000 f9d4 	bl	8006d08 <__multadd>
 8006960:	9b02      	ldr	r3, [sp, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	4606      	mov	r6, r0
 8006966:	dc4f      	bgt.n	8006a08 <_dtoa_r+0x948>
 8006968:	9b06      	ldr	r3, [sp, #24]
 800696a:	2b02      	cmp	r3, #2
 800696c:	dd4c      	ble.n	8006a08 <_dtoa_r+0x948>
 800696e:	e011      	b.n	8006994 <_dtoa_r+0x8d4>
 8006970:	d0c9      	beq.n	8006906 <_dtoa_r+0x846>
 8006972:	9a05      	ldr	r2, [sp, #20]
 8006974:	331c      	adds	r3, #28
 8006976:	441a      	add	r2, r3
 8006978:	9205      	str	r2, [sp, #20]
 800697a:	441d      	add	r5, r3
 800697c:	4498      	add	r8, r3
 800697e:	e7c2      	b.n	8006906 <_dtoa_r+0x846>
 8006980:	4603      	mov	r3, r0
 8006982:	e7f6      	b.n	8006972 <_dtoa_r+0x8b2>
 8006984:	f1b9 0f00 	cmp.w	r9, #0
 8006988:	dc38      	bgt.n	80069fc <_dtoa_r+0x93c>
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	2b02      	cmp	r3, #2
 800698e:	dd35      	ble.n	80069fc <_dtoa_r+0x93c>
 8006990:	f8cd 9008 	str.w	r9, [sp, #8]
 8006994:	9b02      	ldr	r3, [sp, #8]
 8006996:	b963      	cbnz	r3, 80069b2 <_dtoa_r+0x8f2>
 8006998:	4639      	mov	r1, r7
 800699a:	2205      	movs	r2, #5
 800699c:	4620      	mov	r0, r4
 800699e:	f000 f9b3 	bl	8006d08 <__multadd>
 80069a2:	4601      	mov	r1, r0
 80069a4:	4607      	mov	r7, r0
 80069a6:	9804      	ldr	r0, [sp, #16]
 80069a8:	f000 fb78 	bl	800709c <__mcmp>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	f73f adcc 	bgt.w	800654a <_dtoa_r+0x48a>
 80069b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b4:	465d      	mov	r5, fp
 80069b6:	ea6f 0a03 	mvn.w	sl, r3
 80069ba:	f04f 0900 	mov.w	r9, #0
 80069be:	4639      	mov	r1, r7
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 f98a 	bl	8006cda <_Bfree>
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	f43f aeb7 	beq.w	800673a <_dtoa_r+0x67a>
 80069cc:	f1b9 0f00 	cmp.w	r9, #0
 80069d0:	d005      	beq.n	80069de <_dtoa_r+0x91e>
 80069d2:	45b1      	cmp	r9, r6
 80069d4:	d003      	beq.n	80069de <_dtoa_r+0x91e>
 80069d6:	4649      	mov	r1, r9
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 f97e 	bl	8006cda <_Bfree>
 80069de:	4631      	mov	r1, r6
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 f97a 	bl	8006cda <_Bfree>
 80069e6:	e6a8      	b.n	800673a <_dtoa_r+0x67a>
 80069e8:	2700      	movs	r7, #0
 80069ea:	463e      	mov	r6, r7
 80069ec:	e7e1      	b.n	80069b2 <_dtoa_r+0x8f2>
 80069ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80069f2:	463e      	mov	r6, r7
 80069f4:	e5a9      	b.n	800654a <_dtoa_r+0x48a>
 80069f6:	bf00      	nop
 80069f8:	40240000 	.word	0x40240000
 80069fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 80fa 	beq.w	8006bfc <_dtoa_r+0xb3c>
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	dd05      	ble.n	8006a18 <_dtoa_r+0x958>
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	462a      	mov	r2, r5
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 faef 	bl	8006ff4 <__lshift>
 8006a16:	4606      	mov	r6, r0
 8006a18:	9b07      	ldr	r3, [sp, #28]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d04c      	beq.n	8006ab8 <_dtoa_r+0x9f8>
 8006a1e:	6871      	ldr	r1, [r6, #4]
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 f926 	bl	8006c72 <_Balloc>
 8006a26:	6932      	ldr	r2, [r6, #16]
 8006a28:	3202      	adds	r2, #2
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	0092      	lsls	r2, r2, #2
 8006a2e:	f106 010c 	add.w	r1, r6, #12
 8006a32:	300c      	adds	r0, #12
 8006a34:	f000 f912 	bl	8006c5c <memcpy>
 8006a38:	2201      	movs	r2, #1
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 fad9 	bl	8006ff4 <__lshift>
 8006a42:	9b00      	ldr	r3, [sp, #0]
 8006a44:	f8cd b014 	str.w	fp, [sp, #20]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	46b1      	mov	r9, r6
 8006a4e:	9307      	str	r3, [sp, #28]
 8006a50:	4606      	mov	r6, r0
 8006a52:	4639      	mov	r1, r7
 8006a54:	9804      	ldr	r0, [sp, #16]
 8006a56:	f7ff faa7 	bl	8005fa8 <quorem>
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a62:	9804      	ldr	r0, [sp, #16]
 8006a64:	f000 fb1a 	bl	800709c <__mcmp>
 8006a68:	4632      	mov	r2, r6
 8006a6a:	9000      	str	r0, [sp, #0]
 8006a6c:	4639      	mov	r1, r7
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 fb2e 	bl	80070d0 <__mdiff>
 8006a74:	68c3      	ldr	r3, [r0, #12]
 8006a76:	4602      	mov	r2, r0
 8006a78:	bb03      	cbnz	r3, 8006abc <_dtoa_r+0x9fc>
 8006a7a:	4601      	mov	r1, r0
 8006a7c:	9008      	str	r0, [sp, #32]
 8006a7e:	9804      	ldr	r0, [sp, #16]
 8006a80:	f000 fb0c 	bl	800709c <__mcmp>
 8006a84:	9a08      	ldr	r2, [sp, #32]
 8006a86:	4603      	mov	r3, r0
 8006a88:	4611      	mov	r1, r2
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	9308      	str	r3, [sp, #32]
 8006a8e:	f000 f924 	bl	8006cda <_Bfree>
 8006a92:	9b08      	ldr	r3, [sp, #32]
 8006a94:	b9a3      	cbnz	r3, 8006ac0 <_dtoa_r+0xa00>
 8006a96:	9a06      	ldr	r2, [sp, #24]
 8006a98:	b992      	cbnz	r2, 8006ac0 <_dtoa_r+0xa00>
 8006a9a:	9a07      	ldr	r2, [sp, #28]
 8006a9c:	b982      	cbnz	r2, 8006ac0 <_dtoa_r+0xa00>
 8006a9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006aa2:	d029      	beq.n	8006af8 <_dtoa_r+0xa38>
 8006aa4:	9b00      	ldr	r3, [sp, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	dd01      	ble.n	8006aae <_dtoa_r+0x9ee>
 8006aaa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006aae:	9b05      	ldr	r3, [sp, #20]
 8006ab0:	1c5d      	adds	r5, r3, #1
 8006ab2:	f883 8000 	strb.w	r8, [r3]
 8006ab6:	e782      	b.n	80069be <_dtoa_r+0x8fe>
 8006ab8:	4630      	mov	r0, r6
 8006aba:	e7c2      	b.n	8006a42 <_dtoa_r+0x982>
 8006abc:	2301      	movs	r3, #1
 8006abe:	e7e3      	b.n	8006a88 <_dtoa_r+0x9c8>
 8006ac0:	9a00      	ldr	r2, [sp, #0]
 8006ac2:	2a00      	cmp	r2, #0
 8006ac4:	db04      	blt.n	8006ad0 <_dtoa_r+0xa10>
 8006ac6:	d125      	bne.n	8006b14 <_dtoa_r+0xa54>
 8006ac8:	9a06      	ldr	r2, [sp, #24]
 8006aca:	bb1a      	cbnz	r2, 8006b14 <_dtoa_r+0xa54>
 8006acc:	9a07      	ldr	r2, [sp, #28]
 8006ace:	bb0a      	cbnz	r2, 8006b14 <_dtoa_r+0xa54>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	ddec      	ble.n	8006aae <_dtoa_r+0x9ee>
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	9904      	ldr	r1, [sp, #16]
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fa8b 	bl	8006ff4 <__lshift>
 8006ade:	4639      	mov	r1, r7
 8006ae0:	9004      	str	r0, [sp, #16]
 8006ae2:	f000 fadb 	bl	800709c <__mcmp>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	dc03      	bgt.n	8006af2 <_dtoa_r+0xa32>
 8006aea:	d1e0      	bne.n	8006aae <_dtoa_r+0x9ee>
 8006aec:	f018 0f01 	tst.w	r8, #1
 8006af0:	d0dd      	beq.n	8006aae <_dtoa_r+0x9ee>
 8006af2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006af6:	d1d8      	bne.n	8006aaa <_dtoa_r+0x9ea>
 8006af8:	9b05      	ldr	r3, [sp, #20]
 8006afa:	9a05      	ldr	r2, [sp, #20]
 8006afc:	1c5d      	adds	r5, r3, #1
 8006afe:	2339      	movs	r3, #57	; 0x39
 8006b00:	7013      	strb	r3, [r2, #0]
 8006b02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b06:	2b39      	cmp	r3, #57	; 0x39
 8006b08:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b0c:	d04f      	beq.n	8006bae <_dtoa_r+0xaee>
 8006b0e:	3301      	adds	r3, #1
 8006b10:	7013      	strb	r3, [r2, #0]
 8006b12:	e754      	b.n	80069be <_dtoa_r+0x8fe>
 8006b14:	9a05      	ldr	r2, [sp, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f102 0501 	add.w	r5, r2, #1
 8006b1c:	dd06      	ble.n	8006b2c <_dtoa_r+0xa6c>
 8006b1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b22:	d0e9      	beq.n	8006af8 <_dtoa_r+0xa38>
 8006b24:	f108 0801 	add.w	r8, r8, #1
 8006b28:	9b05      	ldr	r3, [sp, #20]
 8006b2a:	e7c2      	b.n	8006ab2 <_dtoa_r+0x9f2>
 8006b2c:	9a02      	ldr	r2, [sp, #8]
 8006b2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b32:	eba5 030b 	sub.w	r3, r5, fp
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d021      	beq.n	8006b7e <_dtoa_r+0xabe>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	220a      	movs	r2, #10
 8006b3e:	9904      	ldr	r1, [sp, #16]
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 f8e1 	bl	8006d08 <__multadd>
 8006b46:	45b1      	cmp	r9, r6
 8006b48:	9004      	str	r0, [sp, #16]
 8006b4a:	f04f 0300 	mov.w	r3, #0
 8006b4e:	f04f 020a 	mov.w	r2, #10
 8006b52:	4649      	mov	r1, r9
 8006b54:	4620      	mov	r0, r4
 8006b56:	d105      	bne.n	8006b64 <_dtoa_r+0xaa4>
 8006b58:	f000 f8d6 	bl	8006d08 <__multadd>
 8006b5c:	4681      	mov	r9, r0
 8006b5e:	4606      	mov	r6, r0
 8006b60:	9505      	str	r5, [sp, #20]
 8006b62:	e776      	b.n	8006a52 <_dtoa_r+0x992>
 8006b64:	f000 f8d0 	bl	8006d08 <__multadd>
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4681      	mov	r9, r0
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	220a      	movs	r2, #10
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 f8c9 	bl	8006d08 <__multadd>
 8006b76:	4606      	mov	r6, r0
 8006b78:	e7f2      	b.n	8006b60 <_dtoa_r+0xaa0>
 8006b7a:	f04f 0900 	mov.w	r9, #0
 8006b7e:	2201      	movs	r2, #1
 8006b80:	9904      	ldr	r1, [sp, #16]
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 fa36 	bl	8006ff4 <__lshift>
 8006b88:	4639      	mov	r1, r7
 8006b8a:	9004      	str	r0, [sp, #16]
 8006b8c:	f000 fa86 	bl	800709c <__mcmp>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	dcb6      	bgt.n	8006b02 <_dtoa_r+0xa42>
 8006b94:	d102      	bne.n	8006b9c <_dtoa_r+0xadc>
 8006b96:	f018 0f01 	tst.w	r8, #1
 8006b9a:	d1b2      	bne.n	8006b02 <_dtoa_r+0xa42>
 8006b9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ba0:	2b30      	cmp	r3, #48	; 0x30
 8006ba2:	f105 32ff 	add.w	r2, r5, #4294967295
 8006ba6:	f47f af0a 	bne.w	80069be <_dtoa_r+0x8fe>
 8006baa:	4615      	mov	r5, r2
 8006bac:	e7f6      	b.n	8006b9c <_dtoa_r+0xadc>
 8006bae:	4593      	cmp	fp, r2
 8006bb0:	d105      	bne.n	8006bbe <_dtoa_r+0xafe>
 8006bb2:	2331      	movs	r3, #49	; 0x31
 8006bb4:	f10a 0a01 	add.w	sl, sl, #1
 8006bb8:	f88b 3000 	strb.w	r3, [fp]
 8006bbc:	e6ff      	b.n	80069be <_dtoa_r+0x8fe>
 8006bbe:	4615      	mov	r5, r2
 8006bc0:	e79f      	b.n	8006b02 <_dtoa_r+0xa42>
 8006bc2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006c28 <_dtoa_r+0xb68>
 8006bc6:	e007      	b.n	8006bd8 <_dtoa_r+0xb18>
 8006bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bca:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006c2c <_dtoa_r+0xb6c>
 8006bce:	b11b      	cbz	r3, 8006bd8 <_dtoa_r+0xb18>
 8006bd0:	f10b 0308 	add.w	r3, fp, #8
 8006bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	4658      	mov	r0, fp
 8006bda:	b017      	add	sp, #92	; 0x5c
 8006bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be0:	9b06      	ldr	r3, [sp, #24]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	f77f ae35 	ble.w	8006852 <_dtoa_r+0x792>
 8006be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bea:	9307      	str	r3, [sp, #28]
 8006bec:	e649      	b.n	8006882 <_dtoa_r+0x7c2>
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	dc03      	bgt.n	8006bfc <_dtoa_r+0xb3c>
 8006bf4:	9b06      	ldr	r3, [sp, #24]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	f73f aecc 	bgt.w	8006994 <_dtoa_r+0x8d4>
 8006bfc:	465d      	mov	r5, fp
 8006bfe:	4639      	mov	r1, r7
 8006c00:	9804      	ldr	r0, [sp, #16]
 8006c02:	f7ff f9d1 	bl	8005fa8 <quorem>
 8006c06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c0a:	f805 8b01 	strb.w	r8, [r5], #1
 8006c0e:	9a02      	ldr	r2, [sp, #8]
 8006c10:	eba5 030b 	sub.w	r3, r5, fp
 8006c14:	429a      	cmp	r2, r3
 8006c16:	ddb0      	ble.n	8006b7a <_dtoa_r+0xaba>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	220a      	movs	r2, #10
 8006c1c:	9904      	ldr	r1, [sp, #16]
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 f872 	bl	8006d08 <__multadd>
 8006c24:	9004      	str	r0, [sp, #16]
 8006c26:	e7ea      	b.n	8006bfe <_dtoa_r+0xb3e>
 8006c28:	080077d4 	.word	0x080077d4
 8006c2c:	080077f8 	.word	0x080077f8

08006c30 <_localeconv_r>:
 8006c30:	4b04      	ldr	r3, [pc, #16]	; (8006c44 <_localeconv_r+0x14>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6a18      	ldr	r0, [r3, #32]
 8006c36:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <_localeconv_r+0x18>)
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	bf08      	it	eq
 8006c3c:	4618      	moveq	r0, r3
 8006c3e:	30f0      	adds	r0, #240	; 0xf0
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	2000000c 	.word	0x2000000c
 8006c48:	20000070 	.word	0x20000070

08006c4c <malloc>:
 8006c4c:	4b02      	ldr	r3, [pc, #8]	; (8006c58 <malloc+0xc>)
 8006c4e:	4601      	mov	r1, r0
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	f000 bb45 	b.w	80072e0 <_malloc_r>
 8006c56:	bf00      	nop
 8006c58:	2000000c 	.word	0x2000000c

08006c5c <memcpy>:
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	1e43      	subs	r3, r0, #1
 8006c60:	440a      	add	r2, r1
 8006c62:	4291      	cmp	r1, r2
 8006c64:	d100      	bne.n	8006c68 <memcpy+0xc>
 8006c66:	bd10      	pop	{r4, pc}
 8006c68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c70:	e7f7      	b.n	8006c62 <memcpy+0x6>

08006c72 <_Balloc>:
 8006c72:	b570      	push	{r4, r5, r6, lr}
 8006c74:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c76:	4604      	mov	r4, r0
 8006c78:	460e      	mov	r6, r1
 8006c7a:	b93d      	cbnz	r5, 8006c8c <_Balloc+0x1a>
 8006c7c:	2010      	movs	r0, #16
 8006c7e:	f7ff ffe5 	bl	8006c4c <malloc>
 8006c82:	6260      	str	r0, [r4, #36]	; 0x24
 8006c84:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c88:	6005      	str	r5, [r0, #0]
 8006c8a:	60c5      	str	r5, [r0, #12]
 8006c8c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c8e:	68eb      	ldr	r3, [r5, #12]
 8006c90:	b183      	cbz	r3, 8006cb4 <_Balloc+0x42>
 8006c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c9a:	b9b8      	cbnz	r0, 8006ccc <_Balloc+0x5a>
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f506 	lsl.w	r5, r1, r6
 8006ca2:	1d6a      	adds	r2, r5, #5
 8006ca4:	0092      	lsls	r2, r2, #2
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 fabe 	bl	8007228 <_calloc_r>
 8006cac:	b160      	cbz	r0, 8006cc8 <_Balloc+0x56>
 8006cae:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006cb2:	e00e      	b.n	8006cd2 <_Balloc+0x60>
 8006cb4:	2221      	movs	r2, #33	; 0x21
 8006cb6:	2104      	movs	r1, #4
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 fab5 	bl	8007228 <_calloc_r>
 8006cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cc0:	60e8      	str	r0, [r5, #12]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e4      	bne.n	8006c92 <_Balloc+0x20>
 8006cc8:	2000      	movs	r0, #0
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	6802      	ldr	r2, [r0, #0]
 8006cce:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cd8:	e7f7      	b.n	8006cca <_Balloc+0x58>

08006cda <_Bfree>:
 8006cda:	b570      	push	{r4, r5, r6, lr}
 8006cdc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006cde:	4606      	mov	r6, r0
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	b93c      	cbnz	r4, 8006cf4 <_Bfree+0x1a>
 8006ce4:	2010      	movs	r0, #16
 8006ce6:	f7ff ffb1 	bl	8006c4c <malloc>
 8006cea:	6270      	str	r0, [r6, #36]	; 0x24
 8006cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cf0:	6004      	str	r4, [r0, #0]
 8006cf2:	60c4      	str	r4, [r0, #12]
 8006cf4:	b13d      	cbz	r5, 8006d06 <_Bfree+0x2c>
 8006cf6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006cf8:	686a      	ldr	r2, [r5, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d00:	6029      	str	r1, [r5, #0]
 8006d02:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006d06:	bd70      	pop	{r4, r5, r6, pc}

08006d08 <__multadd>:
 8006d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0c:	690d      	ldr	r5, [r1, #16]
 8006d0e:	461f      	mov	r7, r3
 8006d10:	4606      	mov	r6, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	f101 0c14 	add.w	ip, r1, #20
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f8dc 0000 	ldr.w	r0, [ip]
 8006d1e:	b281      	uxth	r1, r0
 8006d20:	fb02 7101 	mla	r1, r2, r1, r7
 8006d24:	0c0f      	lsrs	r7, r1, #16
 8006d26:	0c00      	lsrs	r0, r0, #16
 8006d28:	fb02 7000 	mla	r0, r2, r0, r7
 8006d2c:	b289      	uxth	r1, r1
 8006d2e:	3301      	adds	r3, #1
 8006d30:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d34:	429d      	cmp	r5, r3
 8006d36:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d3a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d3e:	dcec      	bgt.n	8006d1a <__multadd+0x12>
 8006d40:	b1d7      	cbz	r7, 8006d78 <__multadd+0x70>
 8006d42:	68a3      	ldr	r3, [r4, #8]
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dc12      	bgt.n	8006d6e <__multadd+0x66>
 8006d48:	6861      	ldr	r1, [r4, #4]
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	3101      	adds	r1, #1
 8006d4e:	f7ff ff90 	bl	8006c72 <_Balloc>
 8006d52:	6922      	ldr	r2, [r4, #16]
 8006d54:	3202      	adds	r2, #2
 8006d56:	f104 010c 	add.w	r1, r4, #12
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	0092      	lsls	r2, r2, #2
 8006d5e:	300c      	adds	r0, #12
 8006d60:	f7ff ff7c 	bl	8006c5c <memcpy>
 8006d64:	4621      	mov	r1, r4
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ffb7 	bl	8006cda <_Bfree>
 8006d6c:	4644      	mov	r4, r8
 8006d6e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d72:	3501      	adds	r5, #1
 8006d74:	615f      	str	r7, [r3, #20]
 8006d76:	6125      	str	r5, [r4, #16]
 8006d78:	4620      	mov	r0, r4
 8006d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d7e <__hi0bits>:
 8006d7e:	0c02      	lsrs	r2, r0, #16
 8006d80:	0412      	lsls	r2, r2, #16
 8006d82:	4603      	mov	r3, r0
 8006d84:	b9b2      	cbnz	r2, 8006db4 <__hi0bits+0x36>
 8006d86:	0403      	lsls	r3, r0, #16
 8006d88:	2010      	movs	r0, #16
 8006d8a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d8e:	bf04      	itt	eq
 8006d90:	021b      	lsleq	r3, r3, #8
 8006d92:	3008      	addeq	r0, #8
 8006d94:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d98:	bf04      	itt	eq
 8006d9a:	011b      	lsleq	r3, r3, #4
 8006d9c:	3004      	addeq	r0, #4
 8006d9e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006da2:	bf04      	itt	eq
 8006da4:	009b      	lsleq	r3, r3, #2
 8006da6:	3002      	addeq	r0, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	db06      	blt.n	8006dba <__hi0bits+0x3c>
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	d503      	bpl.n	8006db8 <__hi0bits+0x3a>
 8006db0:	3001      	adds	r0, #1
 8006db2:	4770      	bx	lr
 8006db4:	2000      	movs	r0, #0
 8006db6:	e7e8      	b.n	8006d8a <__hi0bits+0xc>
 8006db8:	2020      	movs	r0, #32
 8006dba:	4770      	bx	lr

08006dbc <__lo0bits>:
 8006dbc:	6803      	ldr	r3, [r0, #0]
 8006dbe:	f013 0207 	ands.w	r2, r3, #7
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	d00b      	beq.n	8006dde <__lo0bits+0x22>
 8006dc6:	07da      	lsls	r2, r3, #31
 8006dc8:	d423      	bmi.n	8006e12 <__lo0bits+0x56>
 8006dca:	0798      	lsls	r0, r3, #30
 8006dcc:	bf49      	itett	mi
 8006dce:	085b      	lsrmi	r3, r3, #1
 8006dd0:	089b      	lsrpl	r3, r3, #2
 8006dd2:	2001      	movmi	r0, #1
 8006dd4:	600b      	strmi	r3, [r1, #0]
 8006dd6:	bf5c      	itt	pl
 8006dd8:	600b      	strpl	r3, [r1, #0]
 8006dda:	2002      	movpl	r0, #2
 8006ddc:	4770      	bx	lr
 8006dde:	b298      	uxth	r0, r3
 8006de0:	b9a8      	cbnz	r0, 8006e0e <__lo0bits+0x52>
 8006de2:	0c1b      	lsrs	r3, r3, #16
 8006de4:	2010      	movs	r0, #16
 8006de6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006dea:	bf04      	itt	eq
 8006dec:	0a1b      	lsreq	r3, r3, #8
 8006dee:	3008      	addeq	r0, #8
 8006df0:	071a      	lsls	r2, r3, #28
 8006df2:	bf04      	itt	eq
 8006df4:	091b      	lsreq	r3, r3, #4
 8006df6:	3004      	addeq	r0, #4
 8006df8:	079a      	lsls	r2, r3, #30
 8006dfa:	bf04      	itt	eq
 8006dfc:	089b      	lsreq	r3, r3, #2
 8006dfe:	3002      	addeq	r0, #2
 8006e00:	07da      	lsls	r2, r3, #31
 8006e02:	d402      	bmi.n	8006e0a <__lo0bits+0x4e>
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	d006      	beq.n	8006e16 <__lo0bits+0x5a>
 8006e08:	3001      	adds	r0, #1
 8006e0a:	600b      	str	r3, [r1, #0]
 8006e0c:	4770      	bx	lr
 8006e0e:	4610      	mov	r0, r2
 8006e10:	e7e9      	b.n	8006de6 <__lo0bits+0x2a>
 8006e12:	2000      	movs	r0, #0
 8006e14:	4770      	bx	lr
 8006e16:	2020      	movs	r0, #32
 8006e18:	4770      	bx	lr

08006e1a <__i2b>:
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	2101      	movs	r1, #1
 8006e20:	f7ff ff27 	bl	8006c72 <_Balloc>
 8006e24:	2201      	movs	r2, #1
 8006e26:	6144      	str	r4, [r0, #20]
 8006e28:	6102      	str	r2, [r0, #16]
 8006e2a:	bd10      	pop	{r4, pc}

08006e2c <__multiply>:
 8006e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	4614      	mov	r4, r2
 8006e32:	690a      	ldr	r2, [r1, #16]
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	bfb8      	it	lt
 8006e3a:	460b      	movlt	r3, r1
 8006e3c:	4688      	mov	r8, r1
 8006e3e:	bfbc      	itt	lt
 8006e40:	46a0      	movlt	r8, r4
 8006e42:	461c      	movlt	r4, r3
 8006e44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e54:	eb07 0609 	add.w	r6, r7, r9
 8006e58:	42b3      	cmp	r3, r6
 8006e5a:	bfb8      	it	lt
 8006e5c:	3101      	addlt	r1, #1
 8006e5e:	f7ff ff08 	bl	8006c72 <_Balloc>
 8006e62:	f100 0514 	add.w	r5, r0, #20
 8006e66:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4573      	cmp	r3, lr
 8006e70:	d316      	bcc.n	8006ea0 <__multiply+0x74>
 8006e72:	f104 0214 	add.w	r2, r4, #20
 8006e76:	f108 0114 	add.w	r1, r8, #20
 8006e7a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006e7e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	9b00      	ldr	r3, [sp, #0]
 8006e86:	9201      	str	r2, [sp, #4]
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d80c      	bhi.n	8006ea6 <__multiply+0x7a>
 8006e8c:	2e00      	cmp	r6, #0
 8006e8e:	dd03      	ble.n	8006e98 <__multiply+0x6c>
 8006e90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d05d      	beq.n	8006f54 <__multiply+0x128>
 8006e98:	6106      	str	r6, [r0, #16]
 8006e9a:	b003      	add	sp, #12
 8006e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea0:	f843 2b04 	str.w	r2, [r3], #4
 8006ea4:	e7e3      	b.n	8006e6e <__multiply+0x42>
 8006ea6:	f8b2 b000 	ldrh.w	fp, [r2]
 8006eaa:	f1bb 0f00 	cmp.w	fp, #0
 8006eae:	d023      	beq.n	8006ef8 <__multiply+0xcc>
 8006eb0:	4689      	mov	r9, r1
 8006eb2:	46ac      	mov	ip, r5
 8006eb4:	f04f 0800 	mov.w	r8, #0
 8006eb8:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ebc:	f8dc a000 	ldr.w	sl, [ip]
 8006ec0:	b2a3      	uxth	r3, r4
 8006ec2:	fa1f fa8a 	uxth.w	sl, sl
 8006ec6:	fb0b a303 	mla	r3, fp, r3, sl
 8006eca:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ece:	f8dc 4000 	ldr.w	r4, [ip]
 8006ed2:	4443      	add	r3, r8
 8006ed4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ed8:	fb0b 840a 	mla	r4, fp, sl, r8
 8006edc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ee0:	46e2      	mov	sl, ip
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006ee8:	454f      	cmp	r7, r9
 8006eea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006eee:	f84a 3b04 	str.w	r3, [sl], #4
 8006ef2:	d82b      	bhi.n	8006f4c <__multiply+0x120>
 8006ef4:	f8cc 8004 	str.w	r8, [ip, #4]
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006efe:	3204      	adds	r2, #4
 8006f00:	f1ba 0f00 	cmp.w	sl, #0
 8006f04:	d020      	beq.n	8006f48 <__multiply+0x11c>
 8006f06:	682b      	ldr	r3, [r5, #0]
 8006f08:	4689      	mov	r9, r1
 8006f0a:	46a8      	mov	r8, r5
 8006f0c:	f04f 0b00 	mov.w	fp, #0
 8006f10:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f14:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f18:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f1c:	445c      	add	r4, fp
 8006f1e:	46c4      	mov	ip, r8
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f26:	f84c 3b04 	str.w	r3, [ip], #4
 8006f2a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f2e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006f32:	0c1b      	lsrs	r3, r3, #16
 8006f34:	fb0a b303 	mla	r3, sl, r3, fp
 8006f38:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f3c:	454f      	cmp	r7, r9
 8006f3e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006f42:	d805      	bhi.n	8006f50 <__multiply+0x124>
 8006f44:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f48:	3504      	adds	r5, #4
 8006f4a:	e79b      	b.n	8006e84 <__multiply+0x58>
 8006f4c:	46d4      	mov	ip, sl
 8006f4e:	e7b3      	b.n	8006eb8 <__multiply+0x8c>
 8006f50:	46e0      	mov	r8, ip
 8006f52:	e7dd      	b.n	8006f10 <__multiply+0xe4>
 8006f54:	3e01      	subs	r6, #1
 8006f56:	e799      	b.n	8006e8c <__multiply+0x60>

08006f58 <__pow5mult>:
 8006f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	f012 0203 	ands.w	r2, r2, #3
 8006f62:	4606      	mov	r6, r0
 8006f64:	460f      	mov	r7, r1
 8006f66:	d007      	beq.n	8006f78 <__pow5mult+0x20>
 8006f68:	3a01      	subs	r2, #1
 8006f6a:	4c21      	ldr	r4, [pc, #132]	; (8006ff0 <__pow5mult+0x98>)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f72:	f7ff fec9 	bl	8006d08 <__multadd>
 8006f76:	4607      	mov	r7, r0
 8006f78:	10ad      	asrs	r5, r5, #2
 8006f7a:	d035      	beq.n	8006fe8 <__pow5mult+0x90>
 8006f7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f7e:	b93c      	cbnz	r4, 8006f90 <__pow5mult+0x38>
 8006f80:	2010      	movs	r0, #16
 8006f82:	f7ff fe63 	bl	8006c4c <malloc>
 8006f86:	6270      	str	r0, [r6, #36]	; 0x24
 8006f88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f8c:	6004      	str	r4, [r0, #0]
 8006f8e:	60c4      	str	r4, [r0, #12]
 8006f90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f98:	b94c      	cbnz	r4, 8006fae <__pow5mult+0x56>
 8006f9a:	f240 2171 	movw	r1, #625	; 0x271
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7ff ff3b 	bl	8006e1a <__i2b>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006faa:	4604      	mov	r4, r0
 8006fac:	6003      	str	r3, [r0, #0]
 8006fae:	f04f 0800 	mov.w	r8, #0
 8006fb2:	07eb      	lsls	r3, r5, #31
 8006fb4:	d50a      	bpl.n	8006fcc <__pow5mult+0x74>
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4622      	mov	r2, r4
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7ff ff36 	bl	8006e2c <__multiply>
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4681      	mov	r9, r0
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f7ff fe88 	bl	8006cda <_Bfree>
 8006fca:	464f      	mov	r7, r9
 8006fcc:	106d      	asrs	r5, r5, #1
 8006fce:	d00b      	beq.n	8006fe8 <__pow5mult+0x90>
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	b938      	cbnz	r0, 8006fe4 <__pow5mult+0x8c>
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7ff ff27 	bl	8006e2c <__multiply>
 8006fde:	6020      	str	r0, [r4, #0]
 8006fe0:	f8c0 8000 	str.w	r8, [r0]
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	e7e4      	b.n	8006fb2 <__pow5mult+0x5a>
 8006fe8:	4638      	mov	r0, r7
 8006fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fee:	bf00      	nop
 8006ff0:	080078f8 	.word	0x080078f8

08006ff4 <__lshift>:
 8006ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	6849      	ldr	r1, [r1, #4]
 8007002:	eb0a 0903 	add.w	r9, sl, r3
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	4607      	mov	r7, r0
 800700a:	4616      	mov	r6, r2
 800700c:	f109 0501 	add.w	r5, r9, #1
 8007010:	42ab      	cmp	r3, r5
 8007012:	db32      	blt.n	800707a <__lshift+0x86>
 8007014:	4638      	mov	r0, r7
 8007016:	f7ff fe2c 	bl	8006c72 <_Balloc>
 800701a:	2300      	movs	r3, #0
 800701c:	4680      	mov	r8, r0
 800701e:	f100 0114 	add.w	r1, r0, #20
 8007022:	461a      	mov	r2, r3
 8007024:	4553      	cmp	r3, sl
 8007026:	db2b      	blt.n	8007080 <__lshift+0x8c>
 8007028:	6920      	ldr	r0, [r4, #16]
 800702a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800702e:	f104 0314 	add.w	r3, r4, #20
 8007032:	f016 021f 	ands.w	r2, r6, #31
 8007036:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800703a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800703e:	d025      	beq.n	800708c <__lshift+0x98>
 8007040:	f1c2 0e20 	rsb	lr, r2, #32
 8007044:	2000      	movs	r0, #0
 8007046:	681e      	ldr	r6, [r3, #0]
 8007048:	468a      	mov	sl, r1
 800704a:	4096      	lsls	r6, r2
 800704c:	4330      	orrs	r0, r6
 800704e:	f84a 0b04 	str.w	r0, [sl], #4
 8007052:	f853 0b04 	ldr.w	r0, [r3], #4
 8007056:	459c      	cmp	ip, r3
 8007058:	fa20 f00e 	lsr.w	r0, r0, lr
 800705c:	d814      	bhi.n	8007088 <__lshift+0x94>
 800705e:	6048      	str	r0, [r1, #4]
 8007060:	b108      	cbz	r0, 8007066 <__lshift+0x72>
 8007062:	f109 0502 	add.w	r5, r9, #2
 8007066:	3d01      	subs	r5, #1
 8007068:	4638      	mov	r0, r7
 800706a:	f8c8 5010 	str.w	r5, [r8, #16]
 800706e:	4621      	mov	r1, r4
 8007070:	f7ff fe33 	bl	8006cda <_Bfree>
 8007074:	4640      	mov	r0, r8
 8007076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707a:	3101      	adds	r1, #1
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	e7c7      	b.n	8007010 <__lshift+0x1c>
 8007080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007084:	3301      	adds	r3, #1
 8007086:	e7cd      	b.n	8007024 <__lshift+0x30>
 8007088:	4651      	mov	r1, sl
 800708a:	e7dc      	b.n	8007046 <__lshift+0x52>
 800708c:	3904      	subs	r1, #4
 800708e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007092:	f841 2f04 	str.w	r2, [r1, #4]!
 8007096:	459c      	cmp	ip, r3
 8007098:	d8f9      	bhi.n	800708e <__lshift+0x9a>
 800709a:	e7e4      	b.n	8007066 <__lshift+0x72>

0800709c <__mcmp>:
 800709c:	6903      	ldr	r3, [r0, #16]
 800709e:	690a      	ldr	r2, [r1, #16]
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	b530      	push	{r4, r5, lr}
 80070a4:	d10c      	bne.n	80070c0 <__mcmp+0x24>
 80070a6:	0092      	lsls	r2, r2, #2
 80070a8:	3014      	adds	r0, #20
 80070aa:	3114      	adds	r1, #20
 80070ac:	1884      	adds	r4, r0, r2
 80070ae:	4411      	add	r1, r2
 80070b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070b8:	4295      	cmp	r5, r2
 80070ba:	d003      	beq.n	80070c4 <__mcmp+0x28>
 80070bc:	d305      	bcc.n	80070ca <__mcmp+0x2e>
 80070be:	2301      	movs	r3, #1
 80070c0:	4618      	mov	r0, r3
 80070c2:	bd30      	pop	{r4, r5, pc}
 80070c4:	42a0      	cmp	r0, r4
 80070c6:	d3f3      	bcc.n	80070b0 <__mcmp+0x14>
 80070c8:	e7fa      	b.n	80070c0 <__mcmp+0x24>
 80070ca:	f04f 33ff 	mov.w	r3, #4294967295
 80070ce:	e7f7      	b.n	80070c0 <__mcmp+0x24>

080070d0 <__mdiff>:
 80070d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d4:	460d      	mov	r5, r1
 80070d6:	4607      	mov	r7, r0
 80070d8:	4611      	mov	r1, r2
 80070da:	4628      	mov	r0, r5
 80070dc:	4614      	mov	r4, r2
 80070de:	f7ff ffdd 	bl	800709c <__mcmp>
 80070e2:	1e06      	subs	r6, r0, #0
 80070e4:	d108      	bne.n	80070f8 <__mdiff+0x28>
 80070e6:	4631      	mov	r1, r6
 80070e8:	4638      	mov	r0, r7
 80070ea:	f7ff fdc2 	bl	8006c72 <_Balloc>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80070f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f8:	bfa4      	itt	ge
 80070fa:	4623      	movge	r3, r4
 80070fc:	462c      	movge	r4, r5
 80070fe:	4638      	mov	r0, r7
 8007100:	6861      	ldr	r1, [r4, #4]
 8007102:	bfa6      	itte	ge
 8007104:	461d      	movge	r5, r3
 8007106:	2600      	movge	r6, #0
 8007108:	2601      	movlt	r6, #1
 800710a:	f7ff fdb2 	bl	8006c72 <_Balloc>
 800710e:	692b      	ldr	r3, [r5, #16]
 8007110:	60c6      	str	r6, [r0, #12]
 8007112:	6926      	ldr	r6, [r4, #16]
 8007114:	f105 0914 	add.w	r9, r5, #20
 8007118:	f104 0214 	add.w	r2, r4, #20
 800711c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007120:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007124:	f100 0514 	add.w	r5, r0, #20
 8007128:	f04f 0e00 	mov.w	lr, #0
 800712c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007130:	f859 4b04 	ldr.w	r4, [r9], #4
 8007134:	fa1e f18a 	uxtah	r1, lr, sl
 8007138:	b2a3      	uxth	r3, r4
 800713a:	1ac9      	subs	r1, r1, r3
 800713c:	0c23      	lsrs	r3, r4, #16
 800713e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007142:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007146:	b289      	uxth	r1, r1
 8007148:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800714c:	45c8      	cmp	r8, r9
 800714e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007152:	4694      	mov	ip, r2
 8007154:	f845 3b04 	str.w	r3, [r5], #4
 8007158:	d8e8      	bhi.n	800712c <__mdiff+0x5c>
 800715a:	45bc      	cmp	ip, r7
 800715c:	d304      	bcc.n	8007168 <__mdiff+0x98>
 800715e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007162:	b183      	cbz	r3, 8007186 <__mdiff+0xb6>
 8007164:	6106      	str	r6, [r0, #16]
 8007166:	e7c5      	b.n	80070f4 <__mdiff+0x24>
 8007168:	f85c 1b04 	ldr.w	r1, [ip], #4
 800716c:	fa1e f381 	uxtah	r3, lr, r1
 8007170:	141a      	asrs	r2, r3, #16
 8007172:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007176:	b29b      	uxth	r3, r3
 8007178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800717c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007180:	f845 3b04 	str.w	r3, [r5], #4
 8007184:	e7e9      	b.n	800715a <__mdiff+0x8a>
 8007186:	3e01      	subs	r6, #1
 8007188:	e7e9      	b.n	800715e <__mdiff+0x8e>

0800718a <__d2b>:
 800718a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800718e:	460e      	mov	r6, r1
 8007190:	2101      	movs	r1, #1
 8007192:	ec59 8b10 	vmov	r8, r9, d0
 8007196:	4615      	mov	r5, r2
 8007198:	f7ff fd6b 	bl	8006c72 <_Balloc>
 800719c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071a0:	4607      	mov	r7, r0
 80071a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071a6:	bb34      	cbnz	r4, 80071f6 <__d2b+0x6c>
 80071a8:	9301      	str	r3, [sp, #4]
 80071aa:	f1b8 0300 	subs.w	r3, r8, #0
 80071ae:	d027      	beq.n	8007200 <__d2b+0x76>
 80071b0:	a802      	add	r0, sp, #8
 80071b2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80071b6:	f7ff fe01 	bl	8006dbc <__lo0bits>
 80071ba:	9900      	ldr	r1, [sp, #0]
 80071bc:	b1f0      	cbz	r0, 80071fc <__d2b+0x72>
 80071be:	9a01      	ldr	r2, [sp, #4]
 80071c0:	f1c0 0320 	rsb	r3, r0, #32
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	430b      	orrs	r3, r1
 80071ca:	40c2      	lsrs	r2, r0
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	9201      	str	r2, [sp, #4]
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf14      	ite	ne
 80071d8:	2102      	movne	r1, #2
 80071da:	2101      	moveq	r1, #1
 80071dc:	6139      	str	r1, [r7, #16]
 80071de:	b1c4      	cbz	r4, 8007212 <__d2b+0x88>
 80071e0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071e4:	4404      	add	r4, r0
 80071e6:	6034      	str	r4, [r6, #0]
 80071e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071ec:	6028      	str	r0, [r5, #0]
 80071ee:	4638      	mov	r0, r7
 80071f0:	b003      	add	sp, #12
 80071f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071fa:	e7d5      	b.n	80071a8 <__d2b+0x1e>
 80071fc:	6179      	str	r1, [r7, #20]
 80071fe:	e7e7      	b.n	80071d0 <__d2b+0x46>
 8007200:	a801      	add	r0, sp, #4
 8007202:	f7ff fddb 	bl	8006dbc <__lo0bits>
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	2101      	movs	r1, #1
 800720c:	6139      	str	r1, [r7, #16]
 800720e:	3020      	adds	r0, #32
 8007210:	e7e5      	b.n	80071de <__d2b+0x54>
 8007212:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007216:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800721a:	6030      	str	r0, [r6, #0]
 800721c:	6918      	ldr	r0, [r3, #16]
 800721e:	f7ff fdae 	bl	8006d7e <__hi0bits>
 8007222:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007226:	e7e1      	b.n	80071ec <__d2b+0x62>

08007228 <_calloc_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	fb02 f401 	mul.w	r4, r2, r1
 800722e:	4621      	mov	r1, r4
 8007230:	f000 f856 	bl	80072e0 <_malloc_r>
 8007234:	4605      	mov	r5, r0
 8007236:	b118      	cbz	r0, 8007240 <_calloc_r+0x18>
 8007238:	4622      	mov	r2, r4
 800723a:	2100      	movs	r1, #0
 800723c:	f7fe fa30 	bl	80056a0 <memset>
 8007240:	4628      	mov	r0, r5
 8007242:	bd38      	pop	{r3, r4, r5, pc}

08007244 <_free_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4605      	mov	r5, r0
 8007248:	2900      	cmp	r1, #0
 800724a:	d045      	beq.n	80072d8 <_free_r+0x94>
 800724c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007250:	1f0c      	subs	r4, r1, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	bfb8      	it	lt
 8007256:	18e4      	addlt	r4, r4, r3
 8007258:	f000 fa29 	bl	80076ae <__malloc_lock>
 800725c:	4a1f      	ldr	r2, [pc, #124]	; (80072dc <_free_r+0x98>)
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	4610      	mov	r0, r2
 8007262:	b933      	cbnz	r3, 8007272 <_free_r+0x2e>
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	6014      	str	r4, [r2, #0]
 8007268:	4628      	mov	r0, r5
 800726a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800726e:	f000 ba1f 	b.w	80076b0 <__malloc_unlock>
 8007272:	42a3      	cmp	r3, r4
 8007274:	d90c      	bls.n	8007290 <_free_r+0x4c>
 8007276:	6821      	ldr	r1, [r4, #0]
 8007278:	1862      	adds	r2, r4, r1
 800727a:	4293      	cmp	r3, r2
 800727c:	bf04      	itt	eq
 800727e:	681a      	ldreq	r2, [r3, #0]
 8007280:	685b      	ldreq	r3, [r3, #4]
 8007282:	6063      	str	r3, [r4, #4]
 8007284:	bf04      	itt	eq
 8007286:	1852      	addeq	r2, r2, r1
 8007288:	6022      	streq	r2, [r4, #0]
 800728a:	6004      	str	r4, [r0, #0]
 800728c:	e7ec      	b.n	8007268 <_free_r+0x24>
 800728e:	4613      	mov	r3, r2
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	b10a      	cbz	r2, 8007298 <_free_r+0x54>
 8007294:	42a2      	cmp	r2, r4
 8007296:	d9fa      	bls.n	800728e <_free_r+0x4a>
 8007298:	6819      	ldr	r1, [r3, #0]
 800729a:	1858      	adds	r0, r3, r1
 800729c:	42a0      	cmp	r0, r4
 800729e:	d10b      	bne.n	80072b8 <_free_r+0x74>
 80072a0:	6820      	ldr	r0, [r4, #0]
 80072a2:	4401      	add	r1, r0
 80072a4:	1858      	adds	r0, r3, r1
 80072a6:	4282      	cmp	r2, r0
 80072a8:	6019      	str	r1, [r3, #0]
 80072aa:	d1dd      	bne.n	8007268 <_free_r+0x24>
 80072ac:	6810      	ldr	r0, [r2, #0]
 80072ae:	6852      	ldr	r2, [r2, #4]
 80072b0:	605a      	str	r2, [r3, #4]
 80072b2:	4401      	add	r1, r0
 80072b4:	6019      	str	r1, [r3, #0]
 80072b6:	e7d7      	b.n	8007268 <_free_r+0x24>
 80072b8:	d902      	bls.n	80072c0 <_free_r+0x7c>
 80072ba:	230c      	movs	r3, #12
 80072bc:	602b      	str	r3, [r5, #0]
 80072be:	e7d3      	b.n	8007268 <_free_r+0x24>
 80072c0:	6820      	ldr	r0, [r4, #0]
 80072c2:	1821      	adds	r1, r4, r0
 80072c4:	428a      	cmp	r2, r1
 80072c6:	bf04      	itt	eq
 80072c8:	6811      	ldreq	r1, [r2, #0]
 80072ca:	6852      	ldreq	r2, [r2, #4]
 80072cc:	6062      	str	r2, [r4, #4]
 80072ce:	bf04      	itt	eq
 80072d0:	1809      	addeq	r1, r1, r0
 80072d2:	6021      	streq	r1, [r4, #0]
 80072d4:	605c      	str	r4, [r3, #4]
 80072d6:	e7c7      	b.n	8007268 <_free_r+0x24>
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
 80072da:	bf00      	nop
 80072dc:	20000224 	.word	0x20000224

080072e0 <_malloc_r>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	1ccd      	adds	r5, r1, #3
 80072e4:	f025 0503 	bic.w	r5, r5, #3
 80072e8:	3508      	adds	r5, #8
 80072ea:	2d0c      	cmp	r5, #12
 80072ec:	bf38      	it	cc
 80072ee:	250c      	movcc	r5, #12
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	4606      	mov	r6, r0
 80072f4:	db01      	blt.n	80072fa <_malloc_r+0x1a>
 80072f6:	42a9      	cmp	r1, r5
 80072f8:	d903      	bls.n	8007302 <_malloc_r+0x22>
 80072fa:	230c      	movs	r3, #12
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	2000      	movs	r0, #0
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	f000 f9d4 	bl	80076ae <__malloc_lock>
 8007306:	4a21      	ldr	r2, [pc, #132]	; (800738c <_malloc_r+0xac>)
 8007308:	6814      	ldr	r4, [r2, #0]
 800730a:	4621      	mov	r1, r4
 800730c:	b991      	cbnz	r1, 8007334 <_malloc_r+0x54>
 800730e:	4c20      	ldr	r4, [pc, #128]	; (8007390 <_malloc_r+0xb0>)
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	b91b      	cbnz	r3, 800731c <_malloc_r+0x3c>
 8007314:	4630      	mov	r0, r6
 8007316:	f000 f98f 	bl	8007638 <_sbrk_r>
 800731a:	6020      	str	r0, [r4, #0]
 800731c:	4629      	mov	r1, r5
 800731e:	4630      	mov	r0, r6
 8007320:	f000 f98a 	bl	8007638 <_sbrk_r>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d124      	bne.n	8007372 <_malloc_r+0x92>
 8007328:	230c      	movs	r3, #12
 800732a:	6033      	str	r3, [r6, #0]
 800732c:	4630      	mov	r0, r6
 800732e:	f000 f9bf 	bl	80076b0 <__malloc_unlock>
 8007332:	e7e4      	b.n	80072fe <_malloc_r+0x1e>
 8007334:	680b      	ldr	r3, [r1, #0]
 8007336:	1b5b      	subs	r3, r3, r5
 8007338:	d418      	bmi.n	800736c <_malloc_r+0x8c>
 800733a:	2b0b      	cmp	r3, #11
 800733c:	d90f      	bls.n	800735e <_malloc_r+0x7e>
 800733e:	600b      	str	r3, [r1, #0]
 8007340:	50cd      	str	r5, [r1, r3]
 8007342:	18cc      	adds	r4, r1, r3
 8007344:	4630      	mov	r0, r6
 8007346:	f000 f9b3 	bl	80076b0 <__malloc_unlock>
 800734a:	f104 000b 	add.w	r0, r4, #11
 800734e:	1d23      	adds	r3, r4, #4
 8007350:	f020 0007 	bic.w	r0, r0, #7
 8007354:	1ac3      	subs	r3, r0, r3
 8007356:	d0d3      	beq.n	8007300 <_malloc_r+0x20>
 8007358:	425a      	negs	r2, r3
 800735a:	50e2      	str	r2, [r4, r3]
 800735c:	e7d0      	b.n	8007300 <_malloc_r+0x20>
 800735e:	428c      	cmp	r4, r1
 8007360:	684b      	ldr	r3, [r1, #4]
 8007362:	bf16      	itet	ne
 8007364:	6063      	strne	r3, [r4, #4]
 8007366:	6013      	streq	r3, [r2, #0]
 8007368:	460c      	movne	r4, r1
 800736a:	e7eb      	b.n	8007344 <_malloc_r+0x64>
 800736c:	460c      	mov	r4, r1
 800736e:	6849      	ldr	r1, [r1, #4]
 8007370:	e7cc      	b.n	800730c <_malloc_r+0x2c>
 8007372:	1cc4      	adds	r4, r0, #3
 8007374:	f024 0403 	bic.w	r4, r4, #3
 8007378:	42a0      	cmp	r0, r4
 800737a:	d005      	beq.n	8007388 <_malloc_r+0xa8>
 800737c:	1a21      	subs	r1, r4, r0
 800737e:	4630      	mov	r0, r6
 8007380:	f000 f95a 	bl	8007638 <_sbrk_r>
 8007384:	3001      	adds	r0, #1
 8007386:	d0cf      	beq.n	8007328 <_malloc_r+0x48>
 8007388:	6025      	str	r5, [r4, #0]
 800738a:	e7db      	b.n	8007344 <_malloc_r+0x64>
 800738c:	20000224 	.word	0x20000224
 8007390:	20000228 	.word	0x20000228

08007394 <__ssputs_r>:
 8007394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	688e      	ldr	r6, [r1, #8]
 800739a:	429e      	cmp	r6, r3
 800739c:	4682      	mov	sl, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	4690      	mov	r8, r2
 80073a2:	4699      	mov	r9, r3
 80073a4:	d837      	bhi.n	8007416 <__ssputs_r+0x82>
 80073a6:	898a      	ldrh	r2, [r1, #12]
 80073a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073ac:	d031      	beq.n	8007412 <__ssputs_r+0x7e>
 80073ae:	6825      	ldr	r5, [r4, #0]
 80073b0:	6909      	ldr	r1, [r1, #16]
 80073b2:	1a6f      	subs	r7, r5, r1
 80073b4:	6965      	ldr	r5, [r4, #20]
 80073b6:	2302      	movs	r3, #2
 80073b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80073c0:	f109 0301 	add.w	r3, r9, #1
 80073c4:	443b      	add	r3, r7
 80073c6:	429d      	cmp	r5, r3
 80073c8:	bf38      	it	cc
 80073ca:	461d      	movcc	r5, r3
 80073cc:	0553      	lsls	r3, r2, #21
 80073ce:	d530      	bpl.n	8007432 <__ssputs_r+0x9e>
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7ff ff85 	bl	80072e0 <_malloc_r>
 80073d6:	4606      	mov	r6, r0
 80073d8:	b950      	cbnz	r0, 80073f0 <__ssputs_r+0x5c>
 80073da:	230c      	movs	r3, #12
 80073dc:	f8ca 3000 	str.w	r3, [sl]
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f0:	463a      	mov	r2, r7
 80073f2:	6921      	ldr	r1, [r4, #16]
 80073f4:	f7ff fc32 	bl	8006c5c <memcpy>
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	6126      	str	r6, [r4, #16]
 8007406:	6165      	str	r5, [r4, #20]
 8007408:	443e      	add	r6, r7
 800740a:	1bed      	subs	r5, r5, r7
 800740c:	6026      	str	r6, [r4, #0]
 800740e:	60a5      	str	r5, [r4, #8]
 8007410:	464e      	mov	r6, r9
 8007412:	454e      	cmp	r6, r9
 8007414:	d900      	bls.n	8007418 <__ssputs_r+0x84>
 8007416:	464e      	mov	r6, r9
 8007418:	4632      	mov	r2, r6
 800741a:	4641      	mov	r1, r8
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	f000 f92d 	bl	800767c <memmove>
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	1b9b      	subs	r3, r3, r6
 8007426:	60a3      	str	r3, [r4, #8]
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	441e      	add	r6, r3
 800742c:	6026      	str	r6, [r4, #0]
 800742e:	2000      	movs	r0, #0
 8007430:	e7dc      	b.n	80073ec <__ssputs_r+0x58>
 8007432:	462a      	mov	r2, r5
 8007434:	f000 f93d 	bl	80076b2 <_realloc_r>
 8007438:	4606      	mov	r6, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	d1e2      	bne.n	8007404 <__ssputs_r+0x70>
 800743e:	6921      	ldr	r1, [r4, #16]
 8007440:	4650      	mov	r0, sl
 8007442:	f7ff feff 	bl	8007244 <_free_r>
 8007446:	e7c8      	b.n	80073da <__ssputs_r+0x46>

08007448 <_svfiprintf_r>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	461d      	mov	r5, r3
 800744e:	898b      	ldrh	r3, [r1, #12]
 8007450:	061f      	lsls	r7, r3, #24
 8007452:	b09d      	sub	sp, #116	; 0x74
 8007454:	4680      	mov	r8, r0
 8007456:	460c      	mov	r4, r1
 8007458:	4616      	mov	r6, r2
 800745a:	d50f      	bpl.n	800747c <_svfiprintf_r+0x34>
 800745c:	690b      	ldr	r3, [r1, #16]
 800745e:	b96b      	cbnz	r3, 800747c <_svfiprintf_r+0x34>
 8007460:	2140      	movs	r1, #64	; 0x40
 8007462:	f7ff ff3d 	bl	80072e0 <_malloc_r>
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	6120      	str	r0, [r4, #16]
 800746a:	b928      	cbnz	r0, 8007478 <_svfiprintf_r+0x30>
 800746c:	230c      	movs	r3, #12
 800746e:	f8c8 3000 	str.w	r3, [r8]
 8007472:	f04f 30ff 	mov.w	r0, #4294967295
 8007476:	e0c8      	b.n	800760a <_svfiprintf_r+0x1c2>
 8007478:	2340      	movs	r3, #64	; 0x40
 800747a:	6163      	str	r3, [r4, #20]
 800747c:	2300      	movs	r3, #0
 800747e:	9309      	str	r3, [sp, #36]	; 0x24
 8007480:	2320      	movs	r3, #32
 8007482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007486:	2330      	movs	r3, #48	; 0x30
 8007488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800748c:	9503      	str	r5, [sp, #12]
 800748e:	f04f 0b01 	mov.w	fp, #1
 8007492:	4637      	mov	r7, r6
 8007494:	463d      	mov	r5, r7
 8007496:	f815 3b01 	ldrb.w	r3, [r5], #1
 800749a:	b10b      	cbz	r3, 80074a0 <_svfiprintf_r+0x58>
 800749c:	2b25      	cmp	r3, #37	; 0x25
 800749e:	d13e      	bne.n	800751e <_svfiprintf_r+0xd6>
 80074a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80074a4:	d00b      	beq.n	80074be <_svfiprintf_r+0x76>
 80074a6:	4653      	mov	r3, sl
 80074a8:	4632      	mov	r2, r6
 80074aa:	4621      	mov	r1, r4
 80074ac:	4640      	mov	r0, r8
 80074ae:	f7ff ff71 	bl	8007394 <__ssputs_r>
 80074b2:	3001      	adds	r0, #1
 80074b4:	f000 80a4 	beq.w	8007600 <_svfiprintf_r+0x1b8>
 80074b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ba:	4453      	add	r3, sl
 80074bc:	9309      	str	r3, [sp, #36]	; 0x24
 80074be:	783b      	ldrb	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 809d 	beq.w	8007600 <_svfiprintf_r+0x1b8>
 80074c6:	2300      	movs	r3, #0
 80074c8:	f04f 32ff 	mov.w	r2, #4294967295
 80074cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	9307      	str	r3, [sp, #28]
 80074d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074d8:	931a      	str	r3, [sp, #104]	; 0x68
 80074da:	462f      	mov	r7, r5
 80074dc:	2205      	movs	r2, #5
 80074de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80074e2:	4850      	ldr	r0, [pc, #320]	; (8007624 <_svfiprintf_r+0x1dc>)
 80074e4:	f7f8 fe84 	bl	80001f0 <memchr>
 80074e8:	9b04      	ldr	r3, [sp, #16]
 80074ea:	b9d0      	cbnz	r0, 8007522 <_svfiprintf_r+0xda>
 80074ec:	06d9      	lsls	r1, r3, #27
 80074ee:	bf44      	itt	mi
 80074f0:	2220      	movmi	r2, #32
 80074f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074f6:	071a      	lsls	r2, r3, #28
 80074f8:	bf44      	itt	mi
 80074fa:	222b      	movmi	r2, #43	; 0x2b
 80074fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007500:	782a      	ldrb	r2, [r5, #0]
 8007502:	2a2a      	cmp	r2, #42	; 0x2a
 8007504:	d015      	beq.n	8007532 <_svfiprintf_r+0xea>
 8007506:	9a07      	ldr	r2, [sp, #28]
 8007508:	462f      	mov	r7, r5
 800750a:	2000      	movs	r0, #0
 800750c:	250a      	movs	r5, #10
 800750e:	4639      	mov	r1, r7
 8007510:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007514:	3b30      	subs	r3, #48	; 0x30
 8007516:	2b09      	cmp	r3, #9
 8007518:	d94d      	bls.n	80075b6 <_svfiprintf_r+0x16e>
 800751a:	b1b8      	cbz	r0, 800754c <_svfiprintf_r+0x104>
 800751c:	e00f      	b.n	800753e <_svfiprintf_r+0xf6>
 800751e:	462f      	mov	r7, r5
 8007520:	e7b8      	b.n	8007494 <_svfiprintf_r+0x4c>
 8007522:	4a40      	ldr	r2, [pc, #256]	; (8007624 <_svfiprintf_r+0x1dc>)
 8007524:	1a80      	subs	r0, r0, r2
 8007526:	fa0b f000 	lsl.w	r0, fp, r0
 800752a:	4318      	orrs	r0, r3
 800752c:	9004      	str	r0, [sp, #16]
 800752e:	463d      	mov	r5, r7
 8007530:	e7d3      	b.n	80074da <_svfiprintf_r+0x92>
 8007532:	9a03      	ldr	r2, [sp, #12]
 8007534:	1d11      	adds	r1, r2, #4
 8007536:	6812      	ldr	r2, [r2, #0]
 8007538:	9103      	str	r1, [sp, #12]
 800753a:	2a00      	cmp	r2, #0
 800753c:	db01      	blt.n	8007542 <_svfiprintf_r+0xfa>
 800753e:	9207      	str	r2, [sp, #28]
 8007540:	e004      	b.n	800754c <_svfiprintf_r+0x104>
 8007542:	4252      	negs	r2, r2
 8007544:	f043 0302 	orr.w	r3, r3, #2
 8007548:	9207      	str	r2, [sp, #28]
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	783b      	ldrb	r3, [r7, #0]
 800754e:	2b2e      	cmp	r3, #46	; 0x2e
 8007550:	d10c      	bne.n	800756c <_svfiprintf_r+0x124>
 8007552:	787b      	ldrb	r3, [r7, #1]
 8007554:	2b2a      	cmp	r3, #42	; 0x2a
 8007556:	d133      	bne.n	80075c0 <_svfiprintf_r+0x178>
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	1d1a      	adds	r2, r3, #4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	9203      	str	r2, [sp, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	bfb8      	it	lt
 8007564:	f04f 33ff 	movlt.w	r3, #4294967295
 8007568:	3702      	adds	r7, #2
 800756a:	9305      	str	r3, [sp, #20]
 800756c:	4d2e      	ldr	r5, [pc, #184]	; (8007628 <_svfiprintf_r+0x1e0>)
 800756e:	7839      	ldrb	r1, [r7, #0]
 8007570:	2203      	movs	r2, #3
 8007572:	4628      	mov	r0, r5
 8007574:	f7f8 fe3c 	bl	80001f0 <memchr>
 8007578:	b138      	cbz	r0, 800758a <_svfiprintf_r+0x142>
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	1b40      	subs	r0, r0, r5
 800757e:	fa03 f000 	lsl.w	r0, r3, r0
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	4303      	orrs	r3, r0
 8007586:	3701      	adds	r7, #1
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	7839      	ldrb	r1, [r7, #0]
 800758c:	4827      	ldr	r0, [pc, #156]	; (800762c <_svfiprintf_r+0x1e4>)
 800758e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007592:	2206      	movs	r2, #6
 8007594:	1c7e      	adds	r6, r7, #1
 8007596:	f7f8 fe2b 	bl	80001f0 <memchr>
 800759a:	2800      	cmp	r0, #0
 800759c:	d038      	beq.n	8007610 <_svfiprintf_r+0x1c8>
 800759e:	4b24      	ldr	r3, [pc, #144]	; (8007630 <_svfiprintf_r+0x1e8>)
 80075a0:	bb13      	cbnz	r3, 80075e8 <_svfiprintf_r+0x1a0>
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	3307      	adds	r3, #7
 80075a6:	f023 0307 	bic.w	r3, r3, #7
 80075aa:	3308      	adds	r3, #8
 80075ac:	9303      	str	r3, [sp, #12]
 80075ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b0:	444b      	add	r3, r9
 80075b2:	9309      	str	r3, [sp, #36]	; 0x24
 80075b4:	e76d      	b.n	8007492 <_svfiprintf_r+0x4a>
 80075b6:	fb05 3202 	mla	r2, r5, r2, r3
 80075ba:	2001      	movs	r0, #1
 80075bc:	460f      	mov	r7, r1
 80075be:	e7a6      	b.n	800750e <_svfiprintf_r+0xc6>
 80075c0:	2300      	movs	r3, #0
 80075c2:	3701      	adds	r7, #1
 80075c4:	9305      	str	r3, [sp, #20]
 80075c6:	4619      	mov	r1, r3
 80075c8:	250a      	movs	r5, #10
 80075ca:	4638      	mov	r0, r7
 80075cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d0:	3a30      	subs	r2, #48	; 0x30
 80075d2:	2a09      	cmp	r2, #9
 80075d4:	d903      	bls.n	80075de <_svfiprintf_r+0x196>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0c8      	beq.n	800756c <_svfiprintf_r+0x124>
 80075da:	9105      	str	r1, [sp, #20]
 80075dc:	e7c6      	b.n	800756c <_svfiprintf_r+0x124>
 80075de:	fb05 2101 	mla	r1, r5, r1, r2
 80075e2:	2301      	movs	r3, #1
 80075e4:	4607      	mov	r7, r0
 80075e6:	e7f0      	b.n	80075ca <_svfiprintf_r+0x182>
 80075e8:	ab03      	add	r3, sp, #12
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	4622      	mov	r2, r4
 80075ee:	4b11      	ldr	r3, [pc, #68]	; (8007634 <_svfiprintf_r+0x1ec>)
 80075f0:	a904      	add	r1, sp, #16
 80075f2:	4640      	mov	r0, r8
 80075f4:	f7fe f8f0 	bl	80057d8 <_printf_float>
 80075f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80075fc:	4681      	mov	r9, r0
 80075fe:	d1d6      	bne.n	80075ae <_svfiprintf_r+0x166>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	065b      	lsls	r3, r3, #25
 8007604:	f53f af35 	bmi.w	8007472 <_svfiprintf_r+0x2a>
 8007608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800760a:	b01d      	add	sp, #116	; 0x74
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007610:	ab03      	add	r3, sp, #12
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	4622      	mov	r2, r4
 8007616:	4b07      	ldr	r3, [pc, #28]	; (8007634 <_svfiprintf_r+0x1ec>)
 8007618:	a904      	add	r1, sp, #16
 800761a:	4640      	mov	r0, r8
 800761c:	f7fe fb92 	bl	8005d44 <_printf_i>
 8007620:	e7ea      	b.n	80075f8 <_svfiprintf_r+0x1b0>
 8007622:	bf00      	nop
 8007624:	08007904 	.word	0x08007904
 8007628:	0800790a 	.word	0x0800790a
 800762c:	0800790e 	.word	0x0800790e
 8007630:	080057d9 	.word	0x080057d9
 8007634:	08007395 	.word	0x08007395

08007638 <_sbrk_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4c06      	ldr	r4, [pc, #24]	; (8007654 <_sbrk_r+0x1c>)
 800763c:	2300      	movs	r3, #0
 800763e:	4605      	mov	r5, r0
 8007640:	4608      	mov	r0, r1
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	f7fa fd60 	bl	8002108 <_sbrk>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_sbrk_r+0x1a>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	b103      	cbz	r3, 8007652 <_sbrk_r+0x1a>
 8007650:	602b      	str	r3, [r5, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	2000039c 	.word	0x2000039c

08007658 <__ascii_mbtowc>:
 8007658:	b082      	sub	sp, #8
 800765a:	b901      	cbnz	r1, 800765e <__ascii_mbtowc+0x6>
 800765c:	a901      	add	r1, sp, #4
 800765e:	b142      	cbz	r2, 8007672 <__ascii_mbtowc+0x1a>
 8007660:	b14b      	cbz	r3, 8007676 <__ascii_mbtowc+0x1e>
 8007662:	7813      	ldrb	r3, [r2, #0]
 8007664:	600b      	str	r3, [r1, #0]
 8007666:	7812      	ldrb	r2, [r2, #0]
 8007668:	1c10      	adds	r0, r2, #0
 800766a:	bf18      	it	ne
 800766c:	2001      	movne	r0, #1
 800766e:	b002      	add	sp, #8
 8007670:	4770      	bx	lr
 8007672:	4610      	mov	r0, r2
 8007674:	e7fb      	b.n	800766e <__ascii_mbtowc+0x16>
 8007676:	f06f 0001 	mvn.w	r0, #1
 800767a:	e7f8      	b.n	800766e <__ascii_mbtowc+0x16>

0800767c <memmove>:
 800767c:	4288      	cmp	r0, r1
 800767e:	b510      	push	{r4, lr}
 8007680:	eb01 0302 	add.w	r3, r1, r2
 8007684:	d807      	bhi.n	8007696 <memmove+0x1a>
 8007686:	1e42      	subs	r2, r0, #1
 8007688:	4299      	cmp	r1, r3
 800768a:	d00a      	beq.n	80076a2 <memmove+0x26>
 800768c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007690:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007694:	e7f8      	b.n	8007688 <memmove+0xc>
 8007696:	4283      	cmp	r3, r0
 8007698:	d9f5      	bls.n	8007686 <memmove+0xa>
 800769a:	1881      	adds	r1, r0, r2
 800769c:	1ad2      	subs	r2, r2, r3
 800769e:	42d3      	cmn	r3, r2
 80076a0:	d100      	bne.n	80076a4 <memmove+0x28>
 80076a2:	bd10      	pop	{r4, pc}
 80076a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076ac:	e7f7      	b.n	800769e <memmove+0x22>

080076ae <__malloc_lock>:
 80076ae:	4770      	bx	lr

080076b0 <__malloc_unlock>:
 80076b0:	4770      	bx	lr

080076b2 <_realloc_r>:
 80076b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b4:	4607      	mov	r7, r0
 80076b6:	4614      	mov	r4, r2
 80076b8:	460e      	mov	r6, r1
 80076ba:	b921      	cbnz	r1, 80076c6 <_realloc_r+0x14>
 80076bc:	4611      	mov	r1, r2
 80076be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076c2:	f7ff be0d 	b.w	80072e0 <_malloc_r>
 80076c6:	b922      	cbnz	r2, 80076d2 <_realloc_r+0x20>
 80076c8:	f7ff fdbc 	bl	8007244 <_free_r>
 80076cc:	4625      	mov	r5, r4
 80076ce:	4628      	mov	r0, r5
 80076d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d2:	f000 f821 	bl	8007718 <_malloc_usable_size_r>
 80076d6:	42a0      	cmp	r0, r4
 80076d8:	d20f      	bcs.n	80076fa <_realloc_r+0x48>
 80076da:	4621      	mov	r1, r4
 80076dc:	4638      	mov	r0, r7
 80076de:	f7ff fdff 	bl	80072e0 <_malloc_r>
 80076e2:	4605      	mov	r5, r0
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d0f2      	beq.n	80076ce <_realloc_r+0x1c>
 80076e8:	4631      	mov	r1, r6
 80076ea:	4622      	mov	r2, r4
 80076ec:	f7ff fab6 	bl	8006c5c <memcpy>
 80076f0:	4631      	mov	r1, r6
 80076f2:	4638      	mov	r0, r7
 80076f4:	f7ff fda6 	bl	8007244 <_free_r>
 80076f8:	e7e9      	b.n	80076ce <_realloc_r+0x1c>
 80076fa:	4635      	mov	r5, r6
 80076fc:	e7e7      	b.n	80076ce <_realloc_r+0x1c>

080076fe <__ascii_wctomb>:
 80076fe:	b149      	cbz	r1, 8007714 <__ascii_wctomb+0x16>
 8007700:	2aff      	cmp	r2, #255	; 0xff
 8007702:	bf85      	ittet	hi
 8007704:	238a      	movhi	r3, #138	; 0x8a
 8007706:	6003      	strhi	r3, [r0, #0]
 8007708:	700a      	strbls	r2, [r1, #0]
 800770a:	f04f 30ff 	movhi.w	r0, #4294967295
 800770e:	bf98      	it	ls
 8007710:	2001      	movls	r0, #1
 8007712:	4770      	bx	lr
 8007714:	4608      	mov	r0, r1
 8007716:	4770      	bx	lr

08007718 <_malloc_usable_size_r>:
 8007718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800771c:	1f18      	subs	r0, r3, #4
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfbc      	itt	lt
 8007722:	580b      	ldrlt	r3, [r1, r0]
 8007724:	18c0      	addlt	r0, r0, r3
 8007726:	4770      	bx	lr

08007728 <_init>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr

08007734 <_fini>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	bf00      	nop
 8007738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773a:	bc08      	pop	{r3}
 800773c:	469e      	mov	lr, r3
 800773e:	4770      	bx	lr
